
SPRACING_F3_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  0800f2d8  0800f2d8  0001f2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fccc  0800fccc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800fccc  0800fccc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fccc  0800fccc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fccc  0800fccc  0001fccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fcd4  0800fcd4  0001fcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800fcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200001ec  0800fec8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  0800fec8  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e187  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b85  00000000  00000000  0003e3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00041f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002159e  00000000  00000000  000449f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b256  00000000  00000000  00065f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae879  00000000  00000000  000811e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fa5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a4  00000000  00000000  0012fab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2c0 	.word	0x0800f2c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800f2c0 	.word	0x0800f2c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <HAL_TIM_IC_CaptureCallback>:
uint16_t channel_7;
uint16_t channel_8;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */

  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel 1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7f1b      	ldrb	r3, [r3, #28]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f040 80b4 	bne.w	8000e02 <HAL_TIM_IC_CaptureCallback+0x17a>
  {
	  if (Is_first_capture == 0)
 8000c9a:	4b5c      	ldr	r3, [pc, #368]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d11a      	bne.n	8000cd8 <HAL_TIM_IC_CaptureCallback+0x50>
	  {
		  IC_value_1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	485a      	ldr	r0, [pc, #360]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000ca6:	f008 fad9 	bl	800925c <HAL_TIM_ReadCapturedValue>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a59      	ldr	r2, [pc, #356]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000cae:	6013      	str	r3, [r2, #0]
		  Is_first_capture = 1;
 8000cb0:	4b56      	ldr	r3, [pc, #344]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000cb6:	4b56      	ldr	r3, [pc, #344]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	6a1a      	ldr	r2, [r3, #32]
 8000cbc:	4b54      	ldr	r3, [pc, #336]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 020a 	bic.w	r2, r2, #10
 8000cc4:	621a      	str	r2, [r3, #32]
 8000cc6:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a1a      	ldr	r2, [r3, #32]
 8000ccc:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0202 	orr.w	r2, r2, #2
 8000cd4:	621a      	str	r2, [r3, #32]
		    if (channel_select_counter == 7)channel_7 = difference;
		    if (channel_select_counter == 8)channel_8 = difference;
	  }
  }

}
 8000cd6:	e094      	b.n	8000e02 <HAL_TIM_IC_CaptureCallback+0x17a>
	  else if (Is_first_capture == 1)
 8000cd8:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f040 8090 	bne.w	8000e02 <HAL_TIM_IC_CaptureCallback+0x17a>
		  IC_value_2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	484a      	ldr	r0, [pc, #296]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000ce6:	f008 fab9 	bl	800925c <HAL_TIM_ReadCapturedValue>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a4a      	ldr	r2, [pc, #296]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000cee:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000cf0:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
		  if (IC_value_2 > IC_value_1)
 8000cf8:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d90d      	bls.n	8000d20 <HAL_TIM_IC_CaptureCallback+0x98>
			  difference = (IC_value_2 - IC_value_1) + 500;
 8000d04:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	e00c      	b.n	8000d3a <HAL_TIM_IC_CaptureCallback+0xb2>
		  else difference = ((0XFFFF - IC_value_1) + IC_value_2) + 500;  // not necessary since timer is reseted
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000d38:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6a1a      	ldr	r2, [r3, #32]
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020a 	bic.w	r2, r2, #10
 8000d48:	621a      	str	r2, [r3, #32]
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <HAL_TIM_IC_CaptureCallback+0x188>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a12      	ldr	r2, [r2, #32]
 8000d54:	621a      	str	r2, [r3, #32]
		  Is_first_capture = 0;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <HAL_TIM_IC_CaptureCallback+0x184>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
		  if (difference > 3000) {
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d906      	bls.n	8000d76 <HAL_TIM_IC_CaptureCallback+0xee>
		      channel_select_counter = 0;
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		      receiver_watchdog = 0;
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	e005      	b.n	8000d82 <HAL_TIM_IC_CaptureCallback+0xfa>
		    else channel_select_counter++;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000d80:	701a      	strb	r2, [r3, #0]
		    if (channel_select_counter == 1)channel_1 = difference;
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d103      	bne.n	8000d92 <HAL_TIM_IC_CaptureCallback+0x10a>
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000d90:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 2)channel_2 = difference;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d103      	bne.n	8000da2 <HAL_TIM_IC_CaptureCallback+0x11a>
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000da0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 3)channel_3 = difference;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d103      	bne.n	8000db2 <HAL_TIM_IC_CaptureCallback+0x12a>
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_TIM_IC_CaptureCallback+0x1a8>)
 8000db0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 4)channel_4 = difference;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d103      	bne.n	8000dc2 <HAL_TIM_IC_CaptureCallback+0x13a>
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000dc0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 5)channel_5 = difference;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d103      	bne.n	8000dd2 <HAL_TIM_IC_CaptureCallback+0x14a>
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000dcc:	881a      	ldrh	r2, [r3, #0]
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000dd0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 6)channel_6 = difference;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d103      	bne.n	8000de2 <HAL_TIM_IC_CaptureCallback+0x15a>
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000ddc:	881a      	ldrh	r2, [r3, #0]
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000de0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 7)channel_7 = difference;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b07      	cmp	r3, #7
 8000de8:	d103      	bne.n	8000df2 <HAL_TIM_IC_CaptureCallback+0x16a>
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000df0:	801a      	strh	r2, [r3, #0]
		    if (channel_select_counter == 8)channel_8 = difference;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x198>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d103      	bne.n	8000e02 <HAL_TIM_IC_CaptureCallback+0x17a>
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x194>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000e00:	801a      	strh	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000212 	.word	0x20000212
 8000e10:	20000754 	.word	0x20000754
 8000e14:	20000208 	.word	0x20000208
 8000e18:	2000020c 	.word	0x2000020c
 8000e1c:	20000210 	.word	0x20000210
 8000e20:	20000996 	.word	0x20000996
 8000e24:	200009a4 	.word	0x200009a4
 8000e28:	200009a0 	.word	0x200009a0
 8000e2c:	2000099c 	.word	0x2000099c
 8000e30:	200009a6 	.word	0x200009a6
 8000e34:	20000998 	.word	0x20000998
 8000e38:	2000099e 	.word	0x2000099e
 8000e3c:	200009a2 	.word	0x200009a2
 8000e40:	2000099a 	.word	0x2000099a
 8000e44:	20000994 	.word	0x20000994

08000e48 <throttle_ch>:


uint16_t throttle_ch (void) { return channel_1; }
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <throttle_ch+0x14>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200009a0 	.word	0x200009a0

08000e60 <roll_ch>:
uint16_t roll_ch (void) { return channel_2; }
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <roll_ch+0x14>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000099c 	.word	0x2000099c

08000e78 <pitch_ch>:
uint16_t pitch_ch (void) { return channel_3; }
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <pitch_ch+0x14>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200009a6 	.word	0x200009a6

08000e90 <yaw_ch>:
uint16_t yaw_ch (void) { return channel_4; }
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <yaw_ch+0x14>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000998 	.word	0x20000998

08000ea8 <F_mode_ch>:
uint16_t F_mode_ch (void) { return channel_5; }
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <F_mode_ch+0x14>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000099e 	.word	0x2000099e

08000ec0 <PID_select_ch>:
uint16_t Aux6_ch (void) { return channel_6; }
uint16_t PID_select_ch (void) { return channel_7; }
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <PID_select_ch+0x14>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000099a 	.word	0x2000099a

08000ed8 <PID_change_ch>:
uint16_t PID_change_ch (void) { return channel_8; }
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <PID_change_ch+0x14>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000994 	.word	0x20000994

08000ef0 <PWM_ESC_tim_setup>:


void PWM_ESC_tim_setup(void){
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

	// TIM_CR1_ARPE auto reload preload enable: TIM_ARR register is buffered -> transfer to the shadow register.
	  TIM4->CR1 = TIM_CR1_CEN | TIM_CR1_ARPE;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000ef6:	2281      	movs	r2, #129	; 0x81
 8000ef8:	601a      	str	r2, [r3, #0]
	  TIM4->CR2 = 0;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
	  TIM4->SMCR = 0;
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
	  TIM4->DIER = 0;
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
	  TIM4->EGR = 0;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
	  //(0b110 << 4) | (0b110 << 12) | setting the compare mode - here PWM mode, upcounting, active as long as TIM4_CNT < TIM4_CCRI, else inactive
	  // TIM_CCMR1_OC1PE preload  enabled
	  // TIM_CCMR1_OC2PE output compare  2 preload enable on CCRx
	  TIM4->CCMR1 = (0b110 << 4) | TIM_CCMR1_OC1PE | (0b110 << 12) | TIM_CCMR1_OC2PE;
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f14:	f646 0268 	movw	r2, #26728	; 0x6868
 8000f18:	619a      	str	r2, [r3, #24]
	  TIM4->CCMR2 = (0b110 << 4) | TIM_CCMR2_OC3PE | (0b110 << 12) | TIM_CCMR2_OC4PE;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f1c:	f646 0268 	movw	r2, #26728	; 0x6868
 8000f20:	61da      	str	r2, [r3, #28]
	  //capture output enable from the capture/compare enable register CCER
	  TIM4->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f24:	f241 1211 	movw	r2, #4369	; 0x1111
 8000f28:	621a      	str	r2, [r3, #32]
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_2);
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_3);
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);*/

		// TIM_CR1_ARPE auto reload preload enable: TIM_ARR register is buffered -> transfer to the shadow register.
		  TIM16->CR1 = TIM_CR1_CEN | TIM_CR1_ARPE;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f2c:	2281      	movs	r2, #129	; 0x81
 8000f2e:	601a      	str	r2, [r3, #0]
		  TIM16->CR2 = 0;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
		  TIM16->SMCR = 0;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
		  TIM16->DIER = 0;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
		  TIM16->EGR = 0;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
		  //(0b110 << 4) | (0b110 << 12) | setting the compare mode - here PWM mode, upcounting, active as long as TIM16_CNT < TIM16_CCRI, else inactive
		  // TIM_CCMR1_OC1PE preload  enabled
		  // TIM_CCMR1_OC2PE output compare  2 preload enable on CCRx
		  TIM16->CCMR1 = (0b110 << 4) | TIM_CCMR1_OC1PE;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f4a:	2268      	movs	r2, #104	; 0x68
 8000f4c:	619a      	str	r2, [r3, #24]
		  //| (0b110 << 12) | TIM_CCMR1_OC2PE;
		  //capture output enable from the capture/compare enable register CCER
		  TIM16->CCER = TIM_CCER_CC1E;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	621a      	str	r2, [r3, #32]
		  //| TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;


		  // TIM_CR1_ARPE auto reload preload enable: TIM_ARR register is buffered -> transfer to the shadow register.
		  TIM17->CR1 = TIM_CR1_CEN | TIM_CR1_ARPE;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f56:	2281      	movs	r2, #129	; 0x81
 8000f58:	601a      	str	r2, [r3, #0]
		  TIM17->CR2 = 0;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
		  TIM17->SMCR = 0;
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
		  TIM17->DIER = 0;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
		  TIM17->EGR = 0;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
		  //(0b110 << 4) | (0b110 << 12) | setting the compare mode - here PWM mode, upcounting, active as long as TIM17_CNT < TIM17_CCRI, else inactive
		  // TIM_CCMR1_OC1PE preload  enabled
		  // TIM_CCMR1_OC2PE output compare  2 preload enable on CCRx
		  TIM17->CCMR1 = (0b110 << 4) | TIM_CCMR1_OC1PE;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f74:	2268      	movs	r2, #104	; 0x68
 8000f76:	619a      	str	r2, [r3, #24]
		  //| (0b110 << 12) | TIM_CCMR1_OC2PE;
		  //capture output enable from the capture/compare enable register CCER
		  TIM17->CCER = TIM_CCER_CC1E;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	621a      	str	r2, [r3, #32]
		  //| TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;




		  TIM16->CCR1 = 1000;  // modulating the pulse width
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <PWM_ESC_tim_setup+0xbc>)
 8000f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f84:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM17->CCR1 = 1000;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <PWM_ESC_tim_setup+0xc0>)
 8000f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM4->CCR1  = 1000;  // modulating the pulse width
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM4->CCR2  = 1000;
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <PWM_ESC_tim_setup+0xb8>)
 8000f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40000800 	.word	0x40000800
 8000fac:	40014400 	.word	0x40014400
 8000fb0:	40014800 	.word	0x40014800

08000fb4 <_ZN7RC_rateD1Ev>:
#include "RCrate.h"

RC_rate::RC_rate() {
	// TODO Auto-generated constructor stub
}
RC_rate::~RC_rate() {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <_ZN7RC_rateD1Ev+0x1c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	0800f2e0 	.word	0x0800f2e0

08000fd4 <_ZN7RC_rateD0Ev>:
RC_rate::~RC_rate() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
}
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffe9 	bl	8000fb4 <_ZN7RC_rateD1Ev>
 8000fe2:	2114      	movs	r1, #20
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f009 fb39 	bl	800a65c <_ZdlPvj>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN7RC_rateC1Efff>:

RC_rate::RC_rate(float level_P, float angle, float rate)
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001000:	edc7 0a01 	vstr	s1, [r7, #4]
 8001004:	ed87 1a00 	vstr	s2, [r7]
 8001008:	4a09      	ldr	r2, [pc, #36]	; (8001030 <_ZN7RC_rateC1Efff+0x3c>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]
{
 _Level_P_Gain = level_P;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	609a      	str	r2, [r3, #8]
 _max_angle = angle;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
 _RC_rate_param = rate;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	0800f2e0 	.word	0x0800f2e0

08001034 <_ZN7RC_rate14RC_rate_manualEs>:

float RC_rate::RC_rate_manual(int16_t channel){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]

	  _setpoint = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	605a      	str	r2, [r3, #4]

	  if (channel > 1508)_setpoint = channel - 1508;
 8001048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800104c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001050:	4293      	cmp	r3, r2
 8001052:	dd0b      	ble.n	800106c <_ZN7RC_rate14RC_rate_manualEs+0x38>
 8001054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001058:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a01 	vstr	s15, [r3, #4]
 800106a:	e010      	b.n	800108e <_ZN7RC_rate14RC_rate_manualEs+0x5a>
	  else if (channel < 1492)_setpoint = channel - 1492;
 800106c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001070:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8001074:	4293      	cmp	r3, r2
 8001076:	dc0a      	bgt.n	800108e <_ZN7RC_rate14RC_rate_manualEs+0x5a>
 8001078:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800107c:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edc3 7a01 	vstr	s15, [r3, #4]

//	  _setpoint /= 1.23; // 492/400. the rate is 400 deg/s


	  return _setpoint;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	ee07 3a90 	vmov	s15, r3
}
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_ZN7RC_rate11set_Level_PEf>:


void RC_rate::set_Level_P(float d){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	ed87 0a00 	vstr	s0, [r7]
	 _Level_P_Gain = d;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	609a      	str	r2, [r3, #8]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_ZN7RC_rate11get_Level_PEv>:


float RC_rate::get_Level_P(){
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	  return _Level_P_Gain;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	ee07 3a90 	vmov	s15, r3
}
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZN7RC_rate12set_MaxAngleEf>:



void RC_rate::set_MaxAngle(float a){
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	ed87 0a00 	vstr	s0, [r7]
	_max_angle = a;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	60da      	str	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_ZN7RC_rate12get_MaxAngleEv>:


float RC_rate::get_MaxAngle(){
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	  return _max_angle;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	ee07 3a90 	vmov	s15, r3
}
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN7RC_rate11set_RC_rateEf>:


void RC_rate::set_RC_rate(float r){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	ed87 0a00 	vstr	s0, [r7]
	_RC_rate_param = r;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZN7RC_rate11get_RC_rateEv>:


float RC_rate::get_RC_rate(){
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	  return _RC_rate_param;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	ee07 3a90 	vmov	s15, r3
}
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <error_signal>:
uint8_t buzzer_mode, buzzer_mode_counter, buzzer_mode_led;
uint16_t buzzer_last;
uint32_t error_timer, flight_mode_timer, buzzer_mode_timer;


void error_signal(uint8_t e) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	error= e;
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <error_signal+0xa0>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	7013      	strb	r3, [r2, #0]
  if (error_timer < HAL_GetTick()) {
 8001168:	f003 ff82 	bl	8005070 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <error_signal+0xa4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d93b      	bls.n	80011ee <error_signal+0x96>
    error_timer = HAL_GetTick() + 250;                                                     //Set the next error_timer interval at 250ms.
 8001176:	f003 ff7b 	bl	8005070 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	33fa      	adds	r3, #250	; 0xfa
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <error_signal+0xa4>)
 8001180:	6013      	str	r3, [r2, #0]
    if (error > 0 && error_counter > error + 3) error_counter = 0;                         //If there is an error to report and the error_counter > error +3 reset the error.
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <error_signal+0xa0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00a      	beq.n	80011a0 <error_signal+0x48>
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <error_signal+0xa8>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <error_signal+0xa0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	3303      	adds	r3, #3
 8001196:	429a      	cmp	r2, r3
 8001198:	dd02      	ble.n	80011a0 <error_signal+0x48>
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <error_signal+0xa8>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    if (error_counter < error && error_led == 0 && error > 0) {                            //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <error_signal+0xa8>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <error_signal+0xa0>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d211      	bcs.n	80011d0 <error_signal+0x78>
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <error_signal+0xac>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <error_signal+0x78>
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <error_signal+0xa0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <error_signal+0x78>
	  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2102      	movs	r1, #2
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f005 fa9c 	bl	8006700 <HAL_GPIO_WritePin>
      error_led = 1;                                                                       //Set the LED flag to indicate that the LED is on.
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <error_signal+0xac>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
      error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
      error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
    }
  }
}
 80011ce:	e00e      	b.n	80011ee <error_signal+0x96>
	  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f005 fa92 	bl	8006700 <HAL_GPIO_WritePin>
      error_counter++;                                                                     //Increment the error_counter variable by 1 to keep trach of the flashes.
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <error_signal+0xa8>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <error_signal+0xa8>)
 80011e6:	701a      	strb	r2, [r3, #0]
      error_led = 0;                                                                       //Set the LED flag to indicate that the LED is off.
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <error_signal+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200009bc 	.word	0x200009bc
 80011fc:	200009b4 	.word	0x200009b4
 8001200:	200009bd 	.word	0x200009bd
 8001204:	200009b0 	.word	0x200009b0

08001208 <flight_mode_signal>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//In this part the flight mode LED signal is generated.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void flight_mode_signal(uint8_t m) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	flight_mode = m;
 8001212:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <flight_mode_signal+0x9c>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	7013      	strb	r3, [r2, #0]
  if (flight_mode_timer  < HAL_GetTick()) {                                                      //If the error_timer value is smaller that the millis() function.
 8001218:	f003 ff2a 	bl	8005070 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <flight_mode_signal+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d939      	bls.n	800129a <flight_mode_signal+0x92>
    flight_mode_timer = HAL_GetTick() + 250;                                                    //Set the next error_timer interval at 250ms.
 8001226:	f003 ff23 	bl	8005070 <HAL_GetTick>
 800122a:	4603      	mov	r3, r0
 800122c:	33fa      	adds	r3, #250	; 0xfa
 800122e:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <flight_mode_signal+0xa0>)
 8001230:	6013      	str	r3, [r2, #0]
    if (flight_mode > 0 && flight_mode_counter > flight_mode + 3) flight_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <flight_mode_signal+0x9c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <flight_mode_signal+0x48>
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <flight_mode_signal+0xa4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <flight_mode_signal+0x9c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3303      	adds	r3, #3
 8001246:	429a      	cmp	r2, r3
 8001248:	dd02      	ble.n	8001250 <flight_mode_signal+0x48>
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <flight_mode_signal+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
    if (flight_mode_counter < flight_mode && flight_mode_led == 0 && flight_mode > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <flight_mode_signal+0xa4>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <flight_mode_signal+0x9c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d210      	bcs.n	800127e <flight_mode_signal+0x76>
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <flight_mode_signal+0xa8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <flight_mode_signal+0x76>
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <flight_mode_signal+0x9c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <flight_mode_signal+0x76>
	  HAL_GPIO_WritePin(GPIOB, Green_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2110      	movs	r1, #16
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <flight_mode_signal+0xac>)
 8001272:	f005 fa45 	bl	8006700 <HAL_GPIO_WritePin>
      flight_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <flight_mode_signal+0xa8>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, Green_Pin, GPIO_PIN_RESET);
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
    }
  }
}
 800127c:	e00d      	b.n	800129a <flight_mode_signal+0x92>
	  HAL_GPIO_WritePin(GPIOB, Green_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2110      	movs	r1, #16
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <flight_mode_signal+0xac>)
 8001284:	f005 fa3c 	bl	8006700 <HAL_GPIO_WritePin>
      flight_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <flight_mode_signal+0xa4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <flight_mode_signal+0xa4>)
 8001292:	701a      	strb	r2, [r3, #0]
      flight_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <flight_mode_signal+0xa8>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	200009b8 	.word	0x200009b8
 80012ac:	200009ab 	.word	0x200009ab
 80012b0:	200009aa 	.word	0x200009aa
 80012b4:	48000400 	.word	0x48000400

080012b8 <buzzer_signal>:



void buzzer_signal(uint8_t b, uint16_t d) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	80bb      	strh	r3, [r7, #4]
	buzzer_mode = b; buzzer_last = d;
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <buzzer_signal+0xb0>)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	7013      	strb	r3, [r2, #0]
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <buzzer_signal+0xb4>)
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	8013      	strh	r3, [r2, #0]
  if (buzzer_mode_timer  < HAL_GetTick()) {                                                      //If the error_timer value is smaller that the millis() function.
 80012d4:	f003 fecc 	bl	8005070 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <buzzer_signal+0xb8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d93d      	bls.n	800135e <buzzer_signal+0xa6>
    buzzer_mode_timer = HAL_GetTick() + buzzer_last;                                                    //Set the next error_timer interval at 250ms.
 80012e2:	f003 fec5 	bl	8005070 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <buzzer_signal+0xb4>)
 80012ea:	8812      	ldrh	r2, [r2, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <buzzer_signal+0xb8>)
 80012f0:	6013      	str	r3, [r2, #0]
    if (buzzer_mode > 0 && buzzer_mode_counter > buzzer_mode + 3) buzzer_mode_counter = 0; //If there is an error to report and the error_counter > error +3 reset the error.
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <buzzer_signal+0xb0>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <buzzer_signal+0x58>
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <buzzer_signal+0xbc>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <buzzer_signal+0xb0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3303      	adds	r3, #3
 8001306:	429a      	cmp	r2, r3
 8001308:	dd02      	ble.n	8001310 <buzzer_signal+0x58>
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <buzzer_signal+0xbc>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]


    if (buzzer_mode_counter < buzzer_mode && buzzer_mode_led == 0 && buzzer_mode > 0) {    //If the error flash sequence isn't finisched (error_counter < error) and the LED is off.
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <buzzer_signal+0xbc>)
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <buzzer_signal+0xb0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d211      	bcs.n	8001340 <buzzer_signal+0x88>
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <buzzer_signal+0xc0>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10d      	bne.n	8001340 <buzzer_signal+0x88>
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <buzzer_signal+0xb0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <buzzer_signal+0x88>
	  HAL_GPIO_WritePin(GPIOC, zzub_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	4812      	ldr	r0, [pc, #72]	; (800137c <buzzer_signal+0xc4>)
 8001334:	f005 f9e4 	bl	8006700 <HAL_GPIO_WritePin>
      buzzer_mode_led = 1;                                                                 //Set the LED flag to indicate that the LED is on.
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <buzzer_signal+0xc0>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, zzub_Pin, GPIO_PIN_RESET);
      buzzer_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
      buzzer_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
    }
  }
}
 800133e:	e00e      	b.n	800135e <buzzer_signal+0xa6>
	  HAL_GPIO_WritePin(GPIOC, zzub_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <buzzer_signal+0xc4>)
 8001348:	f005 f9da 	bl	8006700 <HAL_GPIO_WritePin>
      buzzer_mode_counter++;                                                               //Increment the error_counter variable by 1 to keep trach of the flashes.
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <buzzer_signal+0xbc>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <buzzer_signal+0xbc>)
 8001356:	701a      	strb	r2, [r3, #0]
      buzzer_mode_led = 0;                                                                 //Set the LED flag to indicate that the LED is off.
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <buzzer_signal+0xc0>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200009a9 	.word	0x200009a9
 800136c:	200009ae 	.word	0x200009ae
 8001370:	200009c0 	.word	0x200009c0
 8001374:	200009a8 	.word	0x200009a8
 8001378:	200009ac 	.word	0x200009ac
 800137c:	48000800 	.word	0x48000800

08001380 <calc_angles>:
float pitch_angle = 0, roll_angle = 0;
float pitch_angle_half = 0, roll_angle_half = 0;



void calc_angles (float dt){
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	ed2d 8b02 	vpush	{d8}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	ed87 0a01 	vstr	s0, [r7, #4]


      acc_total_vector = sqrt((accel_X() * accel_X()) + (accel_Y() * accel_Y()) + (accel_Z() * accel_Z()));    //Calculate the total accelerometer vector.
 800138e:	f003 f877 	bl	8004480 <accel_X>
 8001392:	eeb0 8a40 	vmov.f32	s16, s0
 8001396:	f003 f873 	bl	8004480 <accel_X>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80013a2:	f003 f87b 	bl	800449c <accel_Y>
 80013a6:	eef0 8a40 	vmov.f32	s17, s0
 80013aa:	f003 f877 	bl	800449c <accel_Y>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013b6:	ee38 8a27 	vadd.f32	s16, s16, s15
 80013ba:	f003 f87d 	bl	80044b8 <accel_Z>
 80013be:	eef0 8a40 	vmov.f32	s17, s0
 80013c2:	f003 f879 	bl	80044b8 <accel_Z>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80013ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013d2:	ee17 0a90 	vmov	r0, s15
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	ec43 2b10 	vmov	d0, r2, r3
 80013e2:	f009 fa51 	bl	800a888 <sqrt>
 80013e6:	ec53 2b10 	vmov	r2, r3, d0
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fbb3 	bl	8000b58 <__aeabi_d2iz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4aca      	ldr	r2, [pc, #808]	; (8001720 <calc_angles+0x3a0>)
 80013f6:	6013      	str	r3, [r2, #0]

      if (abs(accel_Y()) < acc_total_vector) {                                             //Prevent the asin function to produce a NaN.
 80013f8:	f003 f850 	bl	800449c <accel_Y>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001404:	ee17 3a90 	vmov	r3, s15
 8001408:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800140c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001410:	4bc3      	ldr	r3, [pc, #780]	; (8001720 <calc_angles+0x3a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	da25      	bge.n	8001464 <calc_angles+0xe4>
        angle_aX = asin((float)accel_Y() / acc_total_vector) * 57.296;              //Calculate the pitch angle.
 8001418:	f003 f840 	bl	800449c <accel_Y>
 800141c:	eeb0 7a40 	vmov.f32	s14, s0
 8001420:	4bbf      	ldr	r3, [pc, #764]	; (8001720 <calc_angles+0x3a0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001430:	ee16 0a90 	vmov	r0, s13
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	ec43 2b10 	vmov	d0, r2, r3
 8001440:	f009 f9e8 	bl	800a814 <asin>
 8001444:	ec51 0b10 	vmov	r0, r1, d0
 8001448:	a3b1      	add	r3, pc, #708	; (adr r3, 8001710 <calc_angles+0x390>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fbc5 	bl	8000be8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	4ab0      	ldr	r2, [pc, #704]	; (8001724 <calc_angles+0x3a4>)
 8001462:	6013      	str	r3, [r2, #0]
      }
      if (abs(accel_X()) < acc_total_vector) {                                             //Prevent the asin function to produce a NaN.
 8001464:	f003 f80c 	bl	8004480 <accel_X>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001478:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800147c:	4ba8      	ldr	r3, [pc, #672]	; (8001720 <calc_angles+0x3a0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	da25      	bge.n	80014d0 <calc_angles+0x150>
        angle_aY = asin((float)accel_X() / acc_total_vector) * 57.296;               //Calculate the roll angle.
 8001484:	f002 fffc 	bl	8004480 <accel_X>
 8001488:	eeb0 7a40 	vmov.f32	s14, s0
 800148c:	4ba4      	ldr	r3, [pc, #656]	; (8001720 <calc_angles+0x3a0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001498:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800149c:	ee16 0a90 	vmov	r0, s13
 80014a0:	f7ff f852 	bl	8000548 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	ec43 2b10 	vmov	d0, r2, r3
 80014ac:	f009 f9b2 	bl	800a814 <asin>
 80014b0:	ec51 0b10 	vmov	r0, r1, d0
 80014b4:	a396      	add	r3, pc, #600	; (adr r3, 8001710 <calc_angles+0x390>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f89d 	bl	80005f8 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a96      	ldr	r2, [pc, #600]	; (8001728 <calc_angles+0x3a8>)
 80014ce:	6013      	str	r3, [r2, #0]
      }


// ------------------------------------ mode 2 ---------------------------------------------

       angle_gX += (gyro_X() *  dt);
 80014d0:	f002 ffac 	bl	800442c <gyro_X>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e0:	4b92      	ldr	r3, [pc, #584]	; (800172c <calc_angles+0x3ac>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	4b90      	ldr	r3, [pc, #576]	; (800172c <calc_angles+0x3ac>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
       angle_gY += (gyro_Y() * -dt); // -dt to synchronize the gyro direction with the acc.
 80014f0:	f002 ffaa 	bl	8004448 <gyro_Y>
 80014f4:	eeb0 7a40 	vmov.f32	s14, s0
 80014f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fc:	eef1 7a67 	vneg.f32	s15, s15
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001504:	4b8a      	ldr	r3, [pc, #552]	; (8001730 <calc_angles+0x3b0>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	4b88      	ldr	r3, [pc, #544]	; (8001730 <calc_angles+0x3b0>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
       angle_gZ += (gyro_Z() *  dt);
 8001514:	f002 ffa6 	bl	8004464 <gyro_Z>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001524:	4b83      	ldr	r3, [pc, #524]	; (8001734 <calc_angles+0x3b4>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <calc_angles+0x3b4>)
 8001530:	edc3 7a00 	vstr	s15, [r3]

//       if (angle_gZ < 0) angle_gZ += 360;
//       else if (angle_gZ >= 360) angle_gZ -= 360;

       angle_gY += angle_gX * sin(gyro_Z() * dt * DEG_TO_RAD);
 8001534:	4b7d      	ldr	r3, [pc, #500]	; (800172c <calc_angles+0x3ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	f002 ff8f 	bl	8004464 <gyro_Z>
 8001546:	eeb0 7a40 	vmov.f32	s14, s0
 800154a:	edd7 7a01 	vldr	s15, [r7, #4]
 800154e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	a36f      	add	r3, pc, #444	; (adr r3, 8001718 <calc_angles+0x398>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f84a 	bl	80005f8 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	ec43 2b17 	vmov	d7, r2, r3
 800156c:	eeb0 0a47 	vmov.f32	s0, s14
 8001570:	eef0 0a67 	vmov.f32	s1, s15
 8001574:	f009 f878 	bl	800a668 <sin>
 8001578:	ec53 2b10 	vmov	r2, r3, d0
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7ff f83a 	bl	80005f8 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <calc_angles+0x3b0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffd9 	bl	8000548 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7fe fe75 	bl	800028c <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fb1d 	bl	8000be8 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <calc_angles+0x3b0>)
 80015b2:	6013      	str	r3, [r2, #0]
       angle_gX -= angle_gY * sin(gyro_Z() * dt * DEG_TO_RAD);
 80015b4:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <calc_angles+0x3b0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffc5 	bl	8000548 <__aeabi_f2d>
 80015be:	4604      	mov	r4, r0
 80015c0:	460d      	mov	r5, r1
 80015c2:	f002 ff4f 	bl	8004464 <gyro_Z>
 80015c6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	a34f      	add	r3, pc, #316	; (adr r3, 8001718 <calc_angles+0x398>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7ff f80a 	bl	80005f8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	ec43 2b17 	vmov	d7, r2, r3
 80015ec:	eeb0 0a47 	vmov.f32	s0, s14
 80015f0:	eef0 0a67 	vmov.f32	s1, s15
 80015f4:	f009 f838 	bl	800a668 <sin>
 80015f8:	ec53 2b10 	vmov	r2, r3, d0
 80015fc:	4620      	mov	r0, r4
 80015fe:	4629      	mov	r1, r5
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4614      	mov	r4, r2
 800160a:	461d      	mov	r5, r3
 800160c:	4b47      	ldr	r3, [pc, #284]	; (800172c <calc_angles+0x3ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4622      	mov	r2, r4
 8001618:	462b      	mov	r3, r5
 800161a:	f7fe fe35 	bl	8000288 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fadf 	bl	8000be8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a3f      	ldr	r2, [pc, #252]	; (800172c <calc_angles+0x3ac>)
 800162e:	6013      	str	r3, [r2, #0]
       angle_gX  = COM_G_GAIN * angle_gX +  COM_A_GAIN * angle_aX ;
 8001630:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001738 <calc_angles+0x3b8>
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <calc_angles+0x3ac>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800173c <calc_angles+0x3bc>
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <calc_angles+0x3a4>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <calc_angles+0x3ac>)
 8001652:	edc3 7a00 	vstr	s15, [r3]
	   angle_gY  = COM_G_GAIN * angle_gY +  COM_A_GAIN * angle_aY ;
 8001656:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001738 <calc_angles+0x3b8>
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <calc_angles+0x3b0>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	eddf 6a35 	vldr	s13, [pc, #212]	; 800173c <calc_angles+0x3bc>
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <calc_angles+0x3a8>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <calc_angles+0x3b0>)
 8001678:	edc3 7a00 	vstr	s15, [r3]
	   roll_angle  = angle_gX  ;
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <calc_angles+0x3ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <calc_angles+0x3c0>)
 8001682:	6013      	str	r3, [r2, #0]
	   pitch_angle = angle_gY ;
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <calc_angles+0x3b0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <calc_angles+0x3c4>)
 800168a:	6013      	str	r3, [r2, #0]



// ------------------------------------ mode 3 ---------------------------------------------

	   roll_angle_half  = COM_G_GAIN * (roll_angle_half  + gyro_X() *  dt) +  COM_A_GAIN * angle_aX ;
 800168c:	f002 fece 	bl	800442c <gyro_X>
 8001690:	eeb0 7a40 	vmov.f32	s14, s0
 8001694:	edd7 7a01 	vldr	s15, [r7, #4]
 8001698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <calc_angles+0x3c8>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001738 <calc_angles+0x3b8>
 80016aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ae:	eddf 6a23 	vldr	s13, [pc, #140]	; 800173c <calc_angles+0x3bc>
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <calc_angles+0x3a4>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <calc_angles+0x3c8>)
 80016c2:	edc3 7a00 	vstr	s15, [r3]
	   pitch_angle_half = COM_G_GAIN * (pitch_angle_half + gyro_Y() * -dt) +  COM_A_GAIN * angle_aY ;
 80016c6:	f002 febf 	bl	8004448 <gyro_Y>
 80016ca:	eeb0 7a40 	vmov.f32	s14, s0
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	eef1 7a67 	vneg.f32	s15, s15
 80016d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <calc_angles+0x3cc>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001738 <calc_angles+0x3b8>
 80016e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ec:	eddf 6a13 	vldr	s13, [pc, #76]	; 800173c <calc_angles+0x3bc>
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <calc_angles+0x3a8>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <calc_angles+0x3cc>)
 8001700:	edc3 7a00 	vstr	s15, [r3]
// ------------------------- or ----------------------------

//       roll_angle_half  = COM_G_GAIN * (roll_angle_half  + ((gyro_X() *  dt) + (angle_gY * sin(gyro_Z() * dt * DEG_TO_RAD )))) +  COM_A_GAIN * angle_aX ;
//       pitch_angle_half = COM_G_GAIN * (pitch_angle_half + ((gyro_Y() * -dt) + (angle_gX * sin(gyro_Z() * dt * DEG_TO_RAD )))) +  COM_A_GAIN * angle_aY ;

}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	ecbd 8b02 	vpop	{d8}
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	53f7ced9 	.word	0x53f7ced9
 8001714:	404ca5e3 	.word	0x404ca5e3
 8001718:	a2529d39 	.word	0xa2529d39
 800171c:	3f91df46 	.word	0x3f91df46
 8001720:	200009d0 	.word	0x200009d0
 8001724:	200009d8 	.word	0x200009d8
 8001728:	200009c8 	.word	0x200009c8
 800172c:	200009cc 	.word	0x200009cc
 8001730:	200009c4 	.word	0x200009c4
 8001734:	200009d4 	.word	0x200009d4
 8001738:	3f7fbe77 	.word	0x3f7fbe77
 800173c:	3a83126f 	.word	0x3a83126f
 8001740:	20000218 	.word	0x20000218
 8001744:	20000214 	.word	0x20000214
 8001748:	20000220 	.word	0x20000220
 800174c:	2000021c 	.word	0x2000021c

08001750 <get_roll_angle>:



float get_roll_angle (void) { return roll_angle; }
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <get_roll_angle+0x18>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	20000218 	.word	0x20000218

0800176c <get_pitch_angle>:
float get_pitch_angle (void) { return pitch_angle; }
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <get_pitch_angle+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20000214 	.word	0x20000214

08001788 <get_roll_angle_half>:
float get_yaw_angle (void) { return angle_gZ; }

float get_roll_angle_half (void) { return roll_angle_half; }
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <get_roll_angle_half+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	20000220 	.word	0x20000220

080017a4 <get_pitch_angle_half>:
float get_pitch_angle_half (void) { return pitch_angle_half; }
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <get_pitch_angle_half+0x18>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	2000021c 	.word	0x2000021c

080017c0 <control_motors>:

uint8_t armed = 0;
uint8_t speed = 0;


void control_motors(uint16_t val ){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]


	  if (throttle_ch() < 1030 && yaw_ch() < 1030)armed = 55;
 80017ca:	f7ff fb3d 	bl	8000e48 <throttle_ch>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	f240 4305 	movw	r3, #1029	; 0x405
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d80a      	bhi.n	80017f0 <control_motors+0x30>
 80017da:	f7ff fb59 	bl	8000e90 <yaw_ch>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f240 4305 	movw	r3, #1029	; 0x405
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d802      	bhi.n	80017f0 <control_motors+0x30>
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <control_motors+0xa4>)
 80017ec:	2237      	movs	r2, #55	; 0x37
 80017ee:	701a      	strb	r2, [r3, #0]

	  if (armed == 55 && throttle_ch() < 1030 && yaw_ch() > 1488) {
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <control_motors+0xa4>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b37      	cmp	r3, #55	; 0x37
 80017f6:	d116      	bne.n	8001826 <control_motors+0x66>
 80017f8:	f7ff fb26 	bl	8000e48 <throttle_ch>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	f240 4305 	movw	r3, #1029	; 0x405
 8001804:	429a      	cmp	r2, r3
 8001806:	d80e      	bhi.n	8001826 <control_motors+0x66>
 8001808:	f7ff fb42 	bl	8000e90 <yaw_ch>
 800180c:	4603      	mov	r3, r0
 800180e:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001812:	d908      	bls.n	8001826 <control_motors+0x66>
	     speed = val - 1000; // max. value is 255, due to uint8_t. if val is 1050, speed = 50
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	3318      	adds	r3, #24
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <control_motors+0xa8>)
 800181e:	701a      	strb	r2, [r3, #0]
	     armed = 1;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <control_motors+0xa4>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
       }

	  if (armed == 1 && throttle_ch() < 1030 && yaw_ch() > 1950) {
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <control_motors+0xa4>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d115      	bne.n	800185a <control_motors+0x9a>
 800182e:	f7ff fb0b 	bl	8000e48 <throttle_ch>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	f240 4305 	movw	r3, #1029	; 0x405
 800183a:	429a      	cmp	r2, r3
 800183c:	d80d      	bhi.n	800185a <control_motors+0x9a>
 800183e:	f7ff fb27 	bl	8000e90 <yaw_ch>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	f240 739e 	movw	r3, #1950	; 0x79e
 800184a:	429a      	cmp	r2, r3
 800184c:	d905      	bls.n	800185a <control_motors+0x9a>
		  armed = 0;
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <control_motors+0xa4>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
		  speed = 0;
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <control_motors+0xa8>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
}

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000224 	.word	0x20000224
 8001868:	20000225 	.word	0x20000225

0800186c <start_speed>:


uint8_t start_speed () {return speed;}
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <start_speed+0x14>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000225 	.word	0x20000225

08001884 <armed_s>:
uint8_t armed_s () {return armed;}
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <armed_s+0x14>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000224 	.word	0x20000224

0800189c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80018aa:	f008 ff31 	bl	800a710 <cosf>
 80018ae:	eef0 7a40 	vmov.f32	s15, s0
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80018ca:	f008 ff61 	bl	800a790 <sinf>
 80018ce:	eef0 7a40 	vmov.f32	s15, s0
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZN6filterD1Ev>:

filter::filter() {
	// TODO Auto-generated constructor stub
}

filter::~filter() {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <_ZN6filterD1Ev+0x1c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	0800f2f0 	.word	0x0800f2f0

080018fc <_ZN6filterD0Ev>:
filter::~filter() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
}
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe9 	bl	80018dc <_ZN6filterD1Ev>
 800190a:	2160      	movs	r1, #96	; 0x60
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f008 fea5 	bl	800a65c <_ZdlPvj>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0000      	movs	r0, r0
	...

08001920 <_ZN6filterC1Eff>:


filter::filter(float f, float dt){
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	ed87 0a02 	vstr	s0, [r7, #8]
 800192c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001930:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <_ZN6filterC1Eff+0x1f8>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]

	_cutoff_freq = f;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	605a      	str	r2, [r3, #4]
	_dT = dt;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]

//	---------------------- Biquad param ----------------------------

    omega = 2.0f * PI_FLOAT * _cutoff_freq * _dT; // dt = 2000.0 * 0.000001f; //  omega = 2.0f * M_PI_FLOAT * filterFreq * refreshRate * 0.000001f;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	edd3 7a01 	vldr	s15, [r3, #4]
 8001948:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001b1c <_ZN6filterC1Eff+0x1fc>
 800194c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edd3 7a02 	vldr	s15, [r3, #8]
 8001956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	edc3 7a03 	vstr	s15, [r3, #12]
    sn = sin(omega);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	edd3 7a03 	vldr	s15, [r3, #12]
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f7ff ffa7 	bl	80018bc <_ZSt3sinf>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	edc3 7a04 	vstr	s15, [r3, #16]
    cs = cos(omega);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	edd3 7a03 	vldr	s15, [r3, #12]
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	f7ff ff8b 	bl	800189c <_ZSt3cosf>
 8001986:	eef0 7a40 	vmov.f32	s15, s0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	edc3 7a05 	vstr	s15, [r3, #20]
    alpha = sn / (2.0 * 0.7071); // Q=2
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdd7 	bl	8000548 <__aeabi_f2d>
 800199a:	a35d      	add	r3, pc, #372	; (adr r3, 8001b10 <_ZN6filterC1Eff+0x1f0>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff54 	bl	800084c <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f91c 	bl	8000be8 <__aeabi_d2f>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	619a      	str	r2, [r3, #24]


    //float b0 = 0, b1 = 0, b2 = 0, a0 = 0, a1 = 0, a2 = 0;
    b0 = (1 - cs) * 0.5f;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80019bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edc3 7a07 	vstr	s15, [r3, #28]
    b1 = 1 - cs;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edc3 7a08 	vstr	s15, [r3, #32]
    b2 = (1 - cs) * 0.5f;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80019ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    a0 = 1 + alpha;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    a1 = -2 * cs;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    a2 = 1 - alpha;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    // normalize the coefficients
    filter_b0 = b0 / a0;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    filter_b1 = b1 / a0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    filter_b2 = b2 / a0;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    filter_a1 = a1 / a0;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    filter_a2 = a2 / a0;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    _x1 = 0;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	649a      	str	r2, [r3, #72]	; 0x48
    _x2 = 0;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	64da      	str	r2, [r3, #76]	; 0x4c


    //	---------------------- pt1 param ----------------------------


    _RC = 1 / ( 2 * PI_FLOAT * _cutoff_freq);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ac2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b1c <_ZN6filterC1Eff+0x1fc>
 8001ac6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	_Gain = _dT / (_RC + _dT);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	pt1_result = 0;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	655a      	str	r2, [r3, #84]	; 0x54

}
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w
 8001b10:	2de00d1b 	.word	0x2de00d1b
 8001b14:	3ff6a090 	.word	0x3ff6a090
 8001b18:	0800f2f0 	.word	0x0800f2f0
 8001b1c:	40c90fda 	.word	0x40c90fda

08001b20 <_ZN6filter13Biquad_filterEf>:


float filter::Biquad_filter(float input){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	ed87 0a00 	vstr	s0, [r7]

	 result = filter_b0 * input + _x1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001b32:	edd7 7a00 	vldr	s15, [r7]
 8001b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	 _x1 = filter_b1 * input - filter_a1 * result + _x2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001b50:	edd7 7a00 	vldr	s15, [r7]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	 _x2 = filter_b2 * input - filter_a2 * result;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001b82:	edd7 7a00 	vldr	s15, [r7]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	 //result = result * 0.99;

	 return result;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba8:	ee07 3a90 	vmov	s15, r3

}
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_ZN6filter10Pt1_filterEf>:


float filter::Pt1_filter(float input){
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	ed87 0a00 	vstr	s0, [r7]

	pt1_result = pt1_result + _Gain * (input - pt1_result);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001bd8:	ed97 6a00 	vldr	s12, [r7]
 8001bdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

	return pt1_result;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	0000      	movs	r0, r0
	...

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b598      	push	{r3, r4, r7, lr}
 8001c0a:	ed2d 8b02 	vpush	{d8}
 8001c0e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c10:	f003 f9d4 	bl	8004fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c14:	f001 fcbe 	bl	8003594 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c18:	f002 f89e 	bl	8003d58 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8001c1c:	f001 fe20 	bl	8003860 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8001c20:	f001 fe80 	bl	8003924 <_ZL12MX_TIM4_Initv>
  MX_TIM16_Init();
 8001c24:	f001 ff38 	bl	8003a98 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 8001c28:	f001 ffcc 	bl	8003bc4 <_ZL13MX_TIM17_Initv>
  MX_USART2_UART_Init();
 8001c2c:	f002 f860 	bl	8003cf0 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001c30:	f001 fd86 	bl	8003740 <_ZL12MX_I2C1_Initv>
  MX_ADC2_Init();
 8001c34:	f001 fd1c 	bl	8003670 <_ZL12MX_ADC2_Initv>
  MX_SPI2_Init();
 8001c38:	f001 fdd0 	bl	80037dc <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */


  RCC->AHBENR |=  ( RCC_AHBENR_ADC12EN );
 8001c3c:	4bc2      	ldr	r3, [pc, #776]	; (8001f48 <main+0x340>)
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	4ac1      	ldr	r2, [pc, #772]	; (8001f48 <main+0x340>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6153      	str	r3, [r2, #20]

  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f004 fd56 	bl	8006700 <HAL_GPIO_WritePin>


  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // PPM
 8001c54:	2100      	movs	r1, #0
 8001c56:	48bd      	ldr	r0, [pc, #756]	; (8001f4c <main+0x344>)
 8001c58:	f007 f858 	bl	8008d0c <HAL_TIM_IC_Start_IT>
  HAL_Delay(50);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f003 fa13 	bl	8005088 <HAL_Delay>

  while (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||
 8001c62:	f7ff f8f1 	bl	8000e48 <throttle_ch>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
	     throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010)  {
 8001c6a:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d937      	bls.n	8001ce2 <main+0xda>
  while (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||
 8001c72:	f7ff f8f5 	bl	8000e60 <roll_ch>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d92f      	bls.n	8001ce2 <main+0xda>
 8001c82:	f7ff f8f9 	bl	8000e78 <pitch_ch>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d927      	bls.n	8001ce2 <main+0xda>
 8001c92:	f7ff f8fd 	bl	8000e90 <yaw_ch>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d91f      	bls.n	8001ce2 <main+0xda>
	     throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010)  {
 8001ca2:	f7ff f8d1 	bl	8000e48 <throttle_ch>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
  while (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||
 8001caa:	f240 73da 	movw	r3, #2010	; 0x7da
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d817      	bhi.n	8001ce2 <main+0xda>
	     throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010)  {
 8001cb2:	f7ff f8d5 	bl	8000e60 <roll_ch>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	f240 73da 	movw	r3, #2010	; 0x7da
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d80f      	bhi.n	8001ce2 <main+0xda>
 8001cc2:	f7ff f8d9 	bl	8000e78 <pitch_ch>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f240 73da 	movw	r3, #2010	; 0x7da
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d807      	bhi.n	8001ce2 <main+0xda>
 8001cd2:	f7ff f8dd 	bl	8000e90 <yaw_ch>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f240 73da 	movw	r3, #2010	; 0x7da
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d901      	bls.n	8001ce6 <main+0xde>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <main+0xe0>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <main+0xf2>
	error_signal(4);
 8001cec:	2004      	movs	r0, #4
 8001cee:	f7ff fa33 	bl	8001158 <error_signal>
    HAL_Delay(2);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f003 f9c8 	bl	8005088 <HAL_Delay>
  while (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||
 8001cf8:	e7b3      	b.n	8001c62 <main+0x5a>
  }


  PWM_ESC_tim_setup();
 8001cfa:	f7ff f8f9 	bl	8000ef0 <PWM_ESC_tim_setup>
  HAL_Delay(50);
 8001cfe:	2032      	movs	r0, #50	; 0x32
 8001d00:	f003 f9c2 	bl	8005088 <HAL_Delay>
  HAL_TIM_OC_Start(&htim16, TIM_CHANNEL_1);
 8001d04:	2100      	movs	r1, #0
 8001d06:	4892      	ldr	r0, [pc, #584]	; (8001f50 <main+0x348>)
 8001d08:	f006 ff7c 	bl	8008c04 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4891      	ldr	r0, [pc, #580]	; (8001f54 <main+0x34c>)
 8001d10:	f006 ff78 	bl	8008c04 <HAL_TIM_OC_Start>
  HAL_Delay(50);
 8001d14:	2032      	movs	r0, #50	; 0x32
 8001d16:	f003 f9b7 	bl	8005088 <HAL_Delay>

  if (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||  // in case of failsafe it should be modified otherwise motors will be off on air
 8001d1a:	f7ff f895 	bl	8000e48 <throttle_ch>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
      throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010) {
 8001d22:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d937      	bls.n	8001d9a <main+0x192>
  if (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||  // in case of failsafe it should be modified otherwise motors will be off on air
 8001d2a:	f7ff f899 	bl	8000e60 <roll_ch>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d92f      	bls.n	8001d9a <main+0x192>
 8001d3a:	f7ff f89d 	bl	8000e78 <pitch_ch>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d927      	bls.n	8001d9a <main+0x192>
 8001d4a:	f7ff f8a1 	bl	8000e90 <yaw_ch>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	f240 33dd 	movw	r3, #989	; 0x3dd
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d91f      	bls.n	8001d9a <main+0x192>
      throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010) {
 8001d5a:	f7ff f875 	bl	8000e48 <throttle_ch>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
  if (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||  // in case of failsafe it should be modified otherwise motors will be off on air
 8001d62:	f240 73da 	movw	r3, #2010	; 0x7da
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d817      	bhi.n	8001d9a <main+0x192>
      throttle_ch() > 2010 || roll_ch() > 2010 || pitch_ch() > 2010 || yaw_ch() > 2010) {
 8001d6a:	f7ff f879 	bl	8000e60 <roll_ch>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	f240 73da 	movw	r3, #2010	; 0x7da
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d80f      	bhi.n	8001d9a <main+0x192>
 8001d7a:	f7ff f87d 	bl	8000e78 <pitch_ch>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	f240 73da 	movw	r3, #2010	; 0x7da
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d807      	bhi.n	8001d9a <main+0x192>
 8001d8a:	f7ff f881 	bl	8000e90 <yaw_ch>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	f240 73da 	movw	r3, #2010	; 0x7da
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d901      	bls.n	8001d9e <main+0x196>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <main+0x198>
 8001d9e:	2300      	movs	r3, #0
  if (throttle_ch() < 990  || roll_ch() < 990  || pitch_ch() < 990  || yaw_ch() < 990 ||  // in case of failsafe it should be modified otherwise motors will be off on air
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <main+0x1bc>
  	esc_1 = 1000;
 8001da4:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <main+0x350>)
 8001da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001daa:	801a      	strh	r2, [r3, #0]
  	esc_2 = 1000;
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <main+0x354>)
 8001dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db2:	801a      	strh	r2, [r3, #0]
  	esc_3 = 1000;
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <main+0x358>)
 8001db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dba:	801a      	strh	r2, [r3, #0]
  	esc_4 = 1000;
 8001dbc:	4b69      	ldr	r3, [pc, #420]	; (8001f64 <main+0x35c>)
 8001dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc2:	801a      	strh	r2, [r3, #0]
  }


  while (HAL_I2C_IsDeviceReady(&hi2c1, 208, 1 , 10) != HAL_OK) {
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	21d0      	movs	r1, #208	; 0xd0
 8001dca:	4867      	ldr	r0, [pc, #412]	; (8001f68 <main+0x360>)
 8001dcc:	f004 ff88 	bl	8006ce0 <HAL_I2C_IsDeviceReady>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <main+0x1e6>
	error_signal(2);
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7ff f9b9 	bl	8001158 <error_signal>
	HAL_Delay(2);
 8001de6:	2002      	movs	r0, #2
 8001de8:	f003 f94e 	bl	8005088 <HAL_Delay>
  while (HAL_I2C_IsDeviceReady(&hi2c1, 208, 1 , 10) != HAL_OK) {
 8001dec:	e7ea      	b.n	8001dc4 <main+0x1bc>
  }

  HAL_Delay(2000);
 8001dee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001df2:	f003 f949 	bl	8005088 <HAL_Delay>


//  MPU6050_confirm();
  MPU6050_Init();
 8001df6:	f002 f94d 	bl	8004094 <MPU6050_Init>
  HAL_Delay(50);
 8001dfa:	2032      	movs	r0, #50	; 0x32
 8001dfc:	f003 f944 	bl	8005088 <HAL_Delay>
  MPU6050_calib_Gyro();
 8001e00:	f002 f9a0 	bl	8004144 <MPU6050_calib_Gyro>
//  W25qxx_Init();
//  Address = 0x000000;
//  W25qxx_EraseSector(Address);


  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <main+0x364>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <main+0x364>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8001e10:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <main+0x368>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e16:	4b56      	ldr	r3, [pc, #344]	; (8001f70 <main+0x368>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a55      	ldr	r2, [pc, #340]	; (8001f70 <main+0x368>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  S_cycle = DWT->CYCCNT;
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <main+0x368>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a53      	ldr	r2, [pc, #332]	; (8001f74 <main+0x36c>)
 8001e28:	6013      	str	r3, [r2, #0]

// --------------------------------------------------- READ BATTERY --------------------------------------------------

//	  Txdata = (uint8_t)(get_roll_angle() + 55 );

	  Batt_L_count++;
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <main+0x370>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <main+0x370>)
 8001e34:	701a      	strb	r2, [r3, #0]
	  if (Batt_L_count == 125){
 8001e36:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <main+0x370>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b7d      	cmp	r3, #125	; 0x7d
 8001e3c:	d15c      	bne.n	8001ef8 <main+0x2f0>

	  HAL_ADC_Start(&hadc2);
 8001e3e:	484f      	ldr	r0, [pc, #316]	; (8001f7c <main+0x374>)
 8001e40:	f003 fb26 	bl	8005490 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK){
 8001e44:	2105      	movs	r1, #5
 8001e46:	484d      	ldr	r0, [pc, #308]	; (8001f7c <main+0x374>)
 8001e48:	f003 fc6e 	bl	8005728 <HAL_ADC_PollForConversion>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d015      	beq.n	8001e88 <main+0x280>

		  Batt_volt = HAL_ADC_GetValue(&hadc2) / 1.087;
 8001e5c:	4847      	ldr	r0, [pc, #284]	; (8001f7c <main+0x374>)
 8001e5e:	f003 fd5d 	bl	800591c <HAL_ADC_GetValue>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb4d 	bl	8000504 <__aeabi_ui2d>
 8001e6a:	a335      	add	r3, pc, #212	; (adr r3, 8001f40 <main+0x338>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fcec 	bl	800084c <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe94 	bl	8000ba8 <__aeabi_d2uiz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <main+0x378>)
 8001e86:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_ADC_Stop(&hadc2);
 8001e88:	483c      	ldr	r0, [pc, #240]	; (8001f7c <main+0x374>)
 8001e8a:	f003 fc17 	bl	80056bc <HAL_ADC_Stop>

	  Batt_av_count ++;
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <main+0x37c>)
 8001e90:	f993 3000 	ldrsb.w	r3, [r3]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	b25a      	sxtb	r2, r3
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <main+0x37c>)
 8001e9e:	701a      	strb	r2, [r3, #0]
	  Batt_arr[Batt_av_count] = Batt_volt;
 8001ea0:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <main+0x37c>)
 8001ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <main+0x378>)
 8001eaa:	8819      	ldrh	r1, [r3, #0]
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <main+0x380>)
 8001eae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  Batt_av = (Batt_arr[0]+Batt_arr[1]+Batt_arr[2]+Batt_arr[3]+Batt_arr[4])/5;
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <main+0x380>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <main+0x380>)
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <main+0x380>)
 8001ec0:	8892      	ldrh	r2, [r2, #4]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <main+0x380>)
 8001ec6:	88d2      	ldrh	r2, [r2, #6]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <main+0x380>)
 8001ecc:	8912      	ldrh	r2, [r2, #8]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <main+0x384>)
 8001ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed6:	1052      	asrs	r2, r2, #1
 8001ed8:	17db      	asrs	r3, r3, #31
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <main+0x388>)
 8001ee0:	801a      	strh	r2, [r3, #0]

//      W25qxx_WriteByte(Txdata, Address);
//	    W25qxx_ReadByte(&Rxdata, Address);
//      Address+=8;

	  if(Batt_av_count > 3)Batt_av_count = -1;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <main+0x37c>)
 8001ee4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	dd02      	ble.n	8001ef2 <main+0x2ea>
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <main+0x37c>)
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	701a      	strb	r2, [r3, #0]

	  Batt_L_count =0;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <main+0x370>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
//for the flash data call the structure w25qxx.feature. the delays in the inti function has to be keept.


// --------------------------------------------------- SET PARAMETERS --------------------------------------------------

	       if (F_mode_ch() >= 1750)                      flight_mode = 1;
 8001ef8:	f7fe ffd6 	bl	8000ea8 <F_mode_ch>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	f240 63d5 	movw	r3, #1749	; 0x6d5
 8001f04:	429a      	cmp	r2, r3
 8001f06:	bf8c      	ite	hi
 8001f08:	2301      	movhi	r3, #1
 8001f0a:	2300      	movls	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <main+0x312>
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <main+0x38c>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e055      	b.n	8001fc6 <main+0x3be>
	  else if (F_mode_ch() < 1750 && F_mode_ch() >= 1350)flight_mode = 2;
 8001f1a:	f7fe ffc5 	bl	8000ea8 <F_mode_ch>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	f240 63d5 	movw	r3, #1749	; 0x6d5
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d836      	bhi.n	8001f98 <main+0x390>
 8001f2a:	f7fe ffbd 	bl	8000ea8 <F_mode_ch>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	f240 5345 	movw	r3, #1349	; 0x545
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d92e      	bls.n	8001f98 <main+0x390>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e02d      	b.n	8001f9a <main+0x392>
 8001f3e:	bf00      	nop
 8001f40:	1cac0831 	.word	0x1cac0831
 8001f44:	3ff1645a 	.word	0x3ff1645a
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	20000754 	.word	0x20000754
 8001f50:	200007d4 	.word	0x200007d4
 8001f54:	20000814 	.word	0x20000814
 8001f58:	20000002 	.word	0x20000002
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	20000006 	.word	0x20000006
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000708 	.word	0x20000708
 8001f6c:	e000edf0 	.word	0xe000edf0
 8001f70:	e0001000 	.word	0xe0001000
 8001f74:	200008d4 	.word	0x200008d4
 8001f78:	20000970 	.word	0x20000970
 8001f7c:	200006b8 	.word	0x200006b8
 8001f80:	20000962 	.word	0x20000962
 8001f84:	2000000a 	.word	0x2000000a
 8001f88:	20000964 	.word	0x20000964
 8001f8c:	66666667 	.word	0x66666667
 8001f90:	2000096e 	.word	0x2000096e
 8001f94:	20000000 	.word	0x20000000
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <main+0x39e>
 8001f9e:	4bae      	ldr	r3, [pc, #696]	; (8002258 <main+0x650>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e00f      	b.n	8001fc6 <main+0x3be>
	  else if (F_mode_ch() < 1350)                       flight_mode = 3;
 8001fa6:	f7fe ff7f 	bl	8000ea8 <F_mode_ch>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	f240 5345 	movw	r3, #1349	; 0x545
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	bf94      	ite	ls
 8001fb6:	2301      	movls	r3, #1
 8001fb8:	2300      	movhi	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <main+0x3be>
 8001fc0:	4ba5      	ldr	r3, [pc, #660]	; (8002258 <main+0x650>)
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	701a      	strb	r2, [r3, #0]


	  PID_change_counter++;
 8001fc6:	4ba5      	ldr	r3, [pc, #660]	; (800225c <main+0x654>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4ba3      	ldr	r3, [pc, #652]	; (800225c <main+0x654>)
 8001fd0:	801a      	strh	r2, [r3, #0]
	  if (PID_change_counter == 500){
 8001fd2:	4ba2      	ldr	r3, [pc, #648]	; (800225c <main+0x654>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fda:	f040 8562 	bne.w	8002aa2 <main+0xe9a>
		  PID_change_counter = 0;
 8001fde:	4b9f      	ldr	r3, [pc, #636]	; (800225c <main+0x654>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	801a      	strh	r2, [r3, #0]

           if (PID_select_ch() > 1250 && PID_select_ch() <= 1500)change_term = 1;
 8001fe4:	f7fe ff6c 	bl	8000ec0 <PID_select_ch>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d909      	bls.n	8002008 <main+0x400>
 8001ff4:	f7fe ff64 	bl	8000ec0 <PID_select_ch>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002000:	429a      	cmp	r2, r3
 8002002:	d801      	bhi.n	8002008 <main+0x400>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <main+0x402>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <main+0x40e>
 800200e:	4b94      	ldr	r3, [pc, #592]	; (8002260 <main+0x658>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e02c      	b.n	8002070 <main+0x468>
	  else if (PID_select_ch() > 1500 && PID_select_ch() <= 1830)change_term = 2;
 8002016:	f7fe ff53 	bl	8000ec0 <PID_select_ch>
 800201a:	4603      	mov	r3, r0
 800201c:	461a      	mov	r2, r3
 800201e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002022:	429a      	cmp	r2, r3
 8002024:	d909      	bls.n	800203a <main+0x432>
 8002026:	f7fe ff4b 	bl	8000ec0 <PID_select_ch>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	f240 7326 	movw	r3, #1830	; 0x726
 8002032:	429a      	cmp	r2, r3
 8002034:	d801      	bhi.n	800203a <main+0x432>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <main+0x434>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <main+0x440>
 8002040:	4b87      	ldr	r3, [pc, #540]	; (8002260 <main+0x658>)
 8002042:	2202      	movs	r2, #2
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e013      	b.n	8002070 <main+0x468>
	  else if (PID_select_ch() > 1830)change_term = 3;
 8002048:	f7fe ff3a 	bl	8000ec0 <PID_select_ch>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	f240 7326 	movw	r3, #1830	; 0x726
 8002054:	429a      	cmp	r2, r3
 8002056:	bf8c      	ite	hi
 8002058:	2301      	movhi	r3, #1
 800205a:	2300      	movls	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <main+0x462>
 8002062:	4b7f      	ldr	r3, [pc, #508]	; (8002260 <main+0x658>)
 8002064:	2203      	movs	r2, #3
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e002      	b.n	8002070 <main+0x468>
	  else change_term = 0;
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <main+0x658>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
           change_term_signal = 0;
 8002070:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <main+0x65c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]

	  if (PID_change_ch() > 1700){  // increase PID value
 8002076:	f7fe ff2f 	bl	8000ed8 <PID_change_ch>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8002082:	429a      	cmp	r2, r3
 8002084:	bf8c      	ite	hi
 8002086:	2301      	movhi	r3, #1
 8002088:	2300      	movls	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8275 	beq.w	800257c <main+0x974>
		      if (change_term != 0)change_term_signal = 1;
 8002092:	4b73      	ldr	r3, [pc, #460]	; (8002260 <main+0x658>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <main+0x498>
 800209a:	4b72      	ldr	r3, [pc, #456]	; (8002264 <main+0x65c>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]

		      if (change_term == 1){  // only P value up
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <main+0x658>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 80e9 	bne.w	800227c <main+0x674>
		    	  	  	  	  	    if (flight_mode == 1){  // gyro mode
 80020aa:	4b6b      	ldr	r3, [pc, #428]	; (8002258 <main+0x650>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d15d      	bne.n	800216e <main+0x566>
		    	                    Roll_PID.setP(Roll_PID.getP()   + 0.01);    if (Roll_PID.getP() > 5.0)Roll_PID.setP(5.0);
 80020b2:	486d      	ldr	r0, [pc, #436]	; (8002268 <main+0x660>)
 80020b4:	f002 fb6e 	bl	8004794 <_ZN3Pid4getPEv>
 80020b8:	ee10 3a10 	vmov	r3, s0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa43 	bl	8000548 <__aeabi_f2d>
 80020c2:	a361      	add	r3, pc, #388	; (adr r3, 8002248 <main+0x640>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe f8e0 	bl	800028c <__adddf3>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fd88 	bl	8000be8 <__aeabi_d2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	ee00 3a10 	vmov	s0, r3
 80020de:	4862      	ldr	r0, [pc, #392]	; (8002268 <main+0x660>)
 80020e0:	f002 fb1c 	bl	800471c <_ZN3Pid4setPEf>
 80020e4:	4860      	ldr	r0, [pc, #384]	; (8002268 <main+0x660>)
 80020e6:	f002 fb55 	bl	8004794 <_ZN3Pid4getPEv>
 80020ea:	eef0 7a40 	vmov.f32	s15, s0
 80020ee:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80020f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fa:	bfcc      	ite	gt
 80020fc:	2301      	movgt	r3, #1
 80020fe:	2300      	movle	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <main+0x508>
 8002106:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800210a:	4857      	ldr	r0, [pc, #348]	; (8002268 <main+0x660>)
 800210c:	f002 fb06 	bl	800471c <_ZN3Pid4setPEf>
		                            Pitch_PID.setP(Pitch_PID.getP() + 0.01);    if (Pitch_PID.getP() > 3.0)Pitch_PID.setP(3.0);
 8002110:	4856      	ldr	r0, [pc, #344]	; (800226c <main+0x664>)
 8002112:	f002 fb3f 	bl	8004794 <_ZN3Pid4getPEv>
 8002116:	ee10 3a10 	vmov	r3, s0
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa14 	bl	8000548 <__aeabi_f2d>
 8002120:	a349      	add	r3, pc, #292	; (adr r3, 8002248 <main+0x640>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe f8b1 	bl	800028c <__adddf3>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd59 	bl	8000be8 <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	ee00 3a10 	vmov	s0, r3
 800213c:	484b      	ldr	r0, [pc, #300]	; (800226c <main+0x664>)
 800213e:	f002 faed 	bl	800471c <_ZN3Pid4setPEf>
 8002142:	484a      	ldr	r0, [pc, #296]	; (800226c <main+0x664>)
 8002144:	f002 fb26 	bl	8004794 <_ZN3Pid4getPEv>
 8002148:	eef0 7a40 	vmov.f32	s15, s0
 800214c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	bfcc      	ite	gt
 800215a:	2301      	movgt	r3, #1
 800215c:	2300      	movle	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <main+0x566>
 8002164:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002168:	4840      	ldr	r0, [pc, #256]	; (800226c <main+0x664>)
 800216a:	f002 fad7 	bl	800471c <_ZN3Pid4setPEf>
//		                            Yaw_PID.setP(Yaw_PID.getP()     + 0.01);    if (Yaw_PID.getP() > 3.0)Yaw_PID.setP(3.0);
		    	  	  	  	  	    					 }

		    	     	 	 	 	if (flight_mode == 2){  // level mode
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <main+0x650>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	f040 8495 	bne.w	8002aa2 <main+0xe9a>
		    	     	 	 	 	ROLL_SP.set_Level_P(ROLL_SP.get_Level_P()   + 0.01);    if (ROLL_SP.get_Level_P() > 2.0)ROLL_SP.set_Level_P(2.0);
 8002178:	483d      	ldr	r0, [pc, #244]	; (8002270 <main+0x668>)
 800217a:	f7fe ffa2 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 800217e:	ee10 3a10 	vmov	r3, s0
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f9e0 	bl	8000548 <__aeabi_f2d>
 8002188:	a32f      	add	r3, pc, #188	; (adr r3, 8002248 <main+0x640>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f87d 	bl	800028c <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	ee00 3a10 	vmov	s0, r3
 80021a4:	4832      	ldr	r0, [pc, #200]	; (8002270 <main+0x668>)
 80021a6:	f7fe ff7d 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 80021aa:	4831      	ldr	r0, [pc, #196]	; (8002270 <main+0x668>)
 80021ac:	f7fe ff89 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 80021b0:	eef0 7a40 	vmov.f32	s15, s0
 80021b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80021b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	bfcc      	ite	gt
 80021c2:	2301      	movgt	r3, #1
 80021c4:	2300      	movle	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <main+0x5ce>
 80021cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80021d0:	4827      	ldr	r0, [pc, #156]	; (8002270 <main+0x668>)
 80021d2:	f7fe ff67 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
		    	     	 	 	    Pitch_SP.set_Level_P(Pitch_SP.get_Level_P() + 0.01);    if (Pitch_SP.get_Level_P() > 2.6)Pitch_SP.set_Level_P(2.6);
 80021d6:	4827      	ldr	r0, [pc, #156]	; (8002274 <main+0x66c>)
 80021d8:	f7fe ff73 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 80021dc:	ee10 3a10 	vmov	r3, s0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9b1 	bl	8000548 <__aeabi_f2d>
 80021e6:	a318      	add	r3, pc, #96	; (adr r3, 8002248 <main+0x640>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe f84e 	bl	800028c <__adddf3>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcf6 	bl	8000be8 <__aeabi_d2f>
 80021fc:	4603      	mov	r3, r0
 80021fe:	ee00 3a10 	vmov	s0, r3
 8002202:	481c      	ldr	r0, [pc, #112]	; (8002274 <main+0x66c>)
 8002204:	f7fe ff4e 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 8002208:	481a      	ldr	r0, [pc, #104]	; (8002274 <main+0x66c>)
 800220a:	f7fe ff5a 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 800220e:	ee10 3a10 	vmov	r3, s0
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f998 	bl	8000548 <__aeabi_f2d>
 8002218:	2301      	movs	r3, #1
 800221a:	461c      	mov	r4, r3
 800221c:	a30c      	add	r3, pc, #48	; (adr r3, 8002250 <main+0x648>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <main+0x628>
 800222c:	2300      	movs	r3, #0
 800222e:	461c      	mov	r4, r3
 8002230:	b2e3      	uxtb	r3, r4
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8435 	beq.w	8002aa2 <main+0xe9a>
 8002238:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002278 <main+0x670>
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <main+0x66c>)
 800223e:	f7fe ff31 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 8002242:	f000 bc2e 	b.w	8002aa2 <main+0xe9a>
 8002246:	bf00      	nop
 8002248:	47ae147b 	.word	0x47ae147b
 800224c:	3f847ae1 	.word	0x3f847ae1
 8002250:	cccccccd 	.word	0xcccccccd
 8002254:	4004cccc 	.word	0x4004cccc
 8002258:	20000000 	.word	0x20000000
 800225c:	20000972 	.word	0x20000972
 8002260:	200008e0 	.word	0x200008e0
 8002264:	200008e1 	.word	0x200008e1
 8002268:	2000028c 	.word	0x2000028c
 800226c:	200002bc 	.word	0x200002bc
 8002270:	2000031c 	.word	0x2000031c
 8002274:	20000330 	.word	0x20000330
 8002278:	40266666 	.word	0x40266666
		    	     	 	 	 						 }
		                           }
		 else if (change_term == 2){ // only I value up
 800227c:	4bb8      	ldr	r3, [pc, #736]	; (8002560 <main+0x958>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b02      	cmp	r3, #2
 8002282:	f040 80b1 	bne.w	80023e8 <main+0x7e0>
			 	 	 	 	 	 	if (flight_mode == 1){  // gyro mode
 8002286:	4bb7      	ldr	r3, [pc, #732]	; (8002564 <main+0x95c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d15d      	bne.n	800234a <main+0x742>
			                        Roll_PID.setI(Roll_PID.getI()   + 0.1); if (Roll_PID.getI()  > 10.0)Roll_PID.setI(10.0);
 800228e:	48b6      	ldr	r0, [pc, #728]	; (8002568 <main+0x960>)
 8002290:	f002 fa8f 	bl	80047b2 <_ZN3Pid4getIEv>
 8002294:	ee10 3a10 	vmov	r3, s0
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f955 	bl	8000548 <__aeabi_f2d>
 800229e:	a3ae      	add	r3, pc, #696	; (adr r3, 8002558 <main+0x950>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fd fff2 	bl	800028c <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe fc9a 	bl	8000be8 <__aeabi_d2f>
 80022b4:	4603      	mov	r3, r0
 80022b6:	ee00 3a10 	vmov	s0, r3
 80022ba:	48ab      	ldr	r0, [pc, #684]	; (8002568 <main+0x960>)
 80022bc:	f002 fa3d 	bl	800473a <_ZN3Pid4setIEf>
 80022c0:	48a9      	ldr	r0, [pc, #676]	; (8002568 <main+0x960>)
 80022c2:	f002 fa76 	bl	80047b2 <_ZN3Pid4getIEv>
 80022c6:	eef0 7a40 	vmov.f32	s15, s0
 80022ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	bfcc      	ite	gt
 80022d8:	2301      	movgt	r3, #1
 80022da:	2300      	movle	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <main+0x6e4>
 80022e2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80022e6:	48a0      	ldr	r0, [pc, #640]	; (8002568 <main+0x960>)
 80022e8:	f002 fa27 	bl	800473a <_ZN3Pid4setIEf>
		                            Pitch_PID.setI(Pitch_PID.getI() + 0.1); if (Pitch_PID.getI() > 10.0)Pitch_PID.setI(10.0);
 80022ec:	489f      	ldr	r0, [pc, #636]	; (800256c <main+0x964>)
 80022ee:	f002 fa60 	bl	80047b2 <_ZN3Pid4getIEv>
 80022f2:	ee10 3a10 	vmov	r3, s0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f926 	bl	8000548 <__aeabi_f2d>
 80022fc:	a396      	add	r3, pc, #600	; (adr r3, 8002558 <main+0x950>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fd ffc3 	bl	800028c <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc6b 	bl	8000be8 <__aeabi_d2f>
 8002312:	4603      	mov	r3, r0
 8002314:	ee00 3a10 	vmov	s0, r3
 8002318:	4894      	ldr	r0, [pc, #592]	; (800256c <main+0x964>)
 800231a:	f002 fa0e 	bl	800473a <_ZN3Pid4setIEf>
 800231e:	4893      	ldr	r0, [pc, #588]	; (800256c <main+0x964>)
 8002320:	f002 fa47 	bl	80047b2 <_ZN3Pid4getIEv>
 8002324:	eef0 7a40 	vmov.f32	s15, s0
 8002328:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	bfcc      	ite	gt
 8002336:	2301      	movgt	r3, #1
 8002338:	2300      	movle	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <main+0x742>
 8002340:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002344:	4889      	ldr	r0, [pc, #548]	; (800256c <main+0x964>)
 8002346:	f002 f9f8 	bl	800473a <_ZN3Pid4setIEf>
//		                            Yaw_PID.setI(Yaw_PID.getI()     + 0.1); if (Yaw_PID.getI()   > 10.0)Yaw_PID.setI(10.0);
			 	 	 	 	 	 						 }

			 	 					if (flight_mode == 2){  // level mode
 800234a:	4b86      	ldr	r3, [pc, #536]	; (8002564 <main+0x95c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 83a7 	bne.w	8002aa2 <main+0xe9a>
			    	     	 	 	ROLL_SP.set_MaxAngle(ROLL_SP.get_MaxAngle()   + 1.0f);    if (ROLL_SP.get_MaxAngle() > 30.0)ROLL_SP.set_MaxAngle(30.0);
 8002354:	4886      	ldr	r0, [pc, #536]	; (8002570 <main+0x968>)
 8002356:	f7fe fed2 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 800235a:	eef0 7a40 	vmov.f32	s15, s0
 800235e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002366:	eeb0 0a67 	vmov.f32	s0, s15
 800236a:	4881      	ldr	r0, [pc, #516]	; (8002570 <main+0x968>)
 800236c:	f7fe feb8 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 8002370:	487f      	ldr	r0, [pc, #508]	; (8002570 <main+0x968>)
 8002372:	f7fe fec4 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002376:	eef0 7a40 	vmov.f32	s15, s0
 800237a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800237e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	bfcc      	ite	gt
 8002388:	2301      	movgt	r3, #1
 800238a:	2300      	movle	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <main+0x794>
 8002392:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8002396:	4876      	ldr	r0, [pc, #472]	; (8002570 <main+0x968>)
 8002398:	f7fe fea2 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
			    	     	 	 	Pitch_SP.set_MaxAngle(Pitch_SP.get_MaxAngle() + 1.0f);    if (Pitch_SP.get_MaxAngle() > 30.0)Pitch_SP.set_MaxAngle(30.0);
 800239c:	4875      	ldr	r0, [pc, #468]	; (8002574 <main+0x96c>)
 800239e:	f7fe feae 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80023a2:	eef0 7a40 	vmov.f32	s15, s0
 80023a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ae:	eeb0 0a67 	vmov.f32	s0, s15
 80023b2:	4870      	ldr	r0, [pc, #448]	; (8002574 <main+0x96c>)
 80023b4:	f7fe fe94 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 80023b8:	486e      	ldr	r0, [pc, #440]	; (8002574 <main+0x96c>)
 80023ba:	f7fe fea0 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80023be:	eef0 7a40 	vmov.f32	s15, s0
 80023c2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	bfcc      	ite	gt
 80023d0:	2301      	movgt	r3, #1
 80023d2:	2300      	movle	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8363 	beq.w	8002aa2 <main+0xe9a>
 80023dc:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80023e0:	4864      	ldr	r0, [pc, #400]	; (8002574 <main+0x96c>)
 80023e2:	f7fe fe7d 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 80023e6:	e35c      	b.n	8002aa2 <main+0xe9a>
			 	 						 	 	 	 	 }
		                           }
		 else if (change_term == 3){ // only D value up
 80023e8:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <main+0x958>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	f040 8358 	bne.w	8002aa2 <main+0xe9a>
			 	 	 	 	 	 	if (flight_mode == 1){  // gyro mode
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <main+0x95c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d15d      	bne.n	80024b6 <main+0x8ae>
			                        Roll_PID.setD(Roll_PID.getD()   + 0.1);    if (Roll_PID.getD() > 10.0)Roll_PID.setD(10.0);
 80023fa:	485b      	ldr	r0, [pc, #364]	; (8002568 <main+0x960>)
 80023fc:	f002 f9e8 	bl	80047d0 <_ZN3Pid4getDEv>
 8002400:	ee10 3a10 	vmov	r3, s0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f89f 	bl	8000548 <__aeabi_f2d>
 800240a:	a353      	add	r3, pc, #332	; (adr r3, 8002558 <main+0x950>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fd ff3c 	bl	800028c <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fbe4 	bl	8000be8 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	ee00 3a10 	vmov	s0, r3
 8002426:	4850      	ldr	r0, [pc, #320]	; (8002568 <main+0x960>)
 8002428:	f002 f996 	bl	8004758 <_ZN3Pid4setDEf>
 800242c:	484e      	ldr	r0, [pc, #312]	; (8002568 <main+0x960>)
 800242e:	f002 f9cf 	bl	80047d0 <_ZN3Pid4getDEv>
 8002432:	eef0 7a40 	vmov.f32	s15, s0
 8002436:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800243a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	bfcc      	ite	gt
 8002444:	2301      	movgt	r3, #1
 8002446:	2300      	movle	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <main+0x850>
 800244e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002452:	4845      	ldr	r0, [pc, #276]	; (8002568 <main+0x960>)
 8002454:	f002 f980 	bl	8004758 <_ZN3Pid4setDEf>
		                            Pitch_PID.setD(Pitch_PID.getD() + 0.1);    if (Pitch_PID.getD() > 10.0)Pitch_PID.setD(10.0);
 8002458:	4844      	ldr	r0, [pc, #272]	; (800256c <main+0x964>)
 800245a:	f002 f9b9 	bl	80047d0 <_ZN3Pid4getDEv>
 800245e:	ee10 3a10 	vmov	r3, s0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f870 	bl	8000548 <__aeabi_f2d>
 8002468:	a33b      	add	r3, pc, #236	; (adr r3, 8002558 <main+0x950>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fd ff0d 	bl	800028c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbb5 	bl	8000be8 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	ee00 3a10 	vmov	s0, r3
 8002484:	4839      	ldr	r0, [pc, #228]	; (800256c <main+0x964>)
 8002486:	f002 f967 	bl	8004758 <_ZN3Pid4setDEf>
 800248a:	4838      	ldr	r0, [pc, #224]	; (800256c <main+0x964>)
 800248c:	f002 f9a0 	bl	80047d0 <_ZN3Pid4getDEv>
 8002490:	eef0 7a40 	vmov.f32	s15, s0
 8002494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	bfcc      	ite	gt
 80024a2:	2301      	movgt	r3, #1
 80024a4:	2300      	movle	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <main+0x8ae>
 80024ac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80024b0:	482e      	ldr	r0, [pc, #184]	; (800256c <main+0x964>)
 80024b2:	f002 f951 	bl	8004758 <_ZN3Pid4setDEf>
			 	 	 	 	 	 						 }

			 	 	 	 	 	 	if (flight_mode == 2){  // level mode
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <main+0x95c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 82f1 	bne.w	8002aa2 <main+0xe9a>
				    	     	 	ROLL_SP.set_RC_rate(ROLL_SP.get_RC_rate()   + 0.1f);    if (ROLL_SP.get_RC_rate()  > 2.0)ROLL_SP.set_RC_rate(2.0);
 80024c0:	482b      	ldr	r0, [pc, #172]	; (8002570 <main+0x968>)
 80024c2:	f7fe fe3a 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 80024c6:	eef0 7a40 	vmov.f32	s15, s0
 80024ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002578 <main+0x970>
 80024ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	4826      	ldr	r0, [pc, #152]	; (8002570 <main+0x968>)
 80024d8:	f7fe fe20 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
 80024dc:	4824      	ldr	r0, [pc, #144]	; (8002570 <main+0x968>)
 80024de:	f7fe fe2c 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 80024e2:	eef0 7a40 	vmov.f32	s15, s0
 80024e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80024ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	bfcc      	ite	gt
 80024f4:	2301      	movgt	r3, #1
 80024f6:	2300      	movle	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <main+0x900>
 80024fe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002502:	481b      	ldr	r0, [pc, #108]	; (8002570 <main+0x968>)
 8002504:	f7fe fe0a 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
				    	     	 	Pitch_SP.set_RC_rate(Pitch_SP.get_RC_rate() + 0.1f);    if (Pitch_SP.get_RC_rate() > 2.0)Pitch_SP.set_RC_rate(2.0);
 8002508:	481a      	ldr	r0, [pc, #104]	; (8002574 <main+0x96c>)
 800250a:	f7fe fe16 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002578 <main+0x970>
 8002516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	4815      	ldr	r0, [pc, #84]	; (8002574 <main+0x96c>)
 8002520:	f7fe fdfc 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <main+0x96c>)
 8002526:	f7fe fe08 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 800252a:	eef0 7a40 	vmov.f32	s15, s0
 800252e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	bfcc      	ite	gt
 800253c:	2301      	movgt	r3, #1
 800253e:	2300      	movle	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 82ad 	beq.w	8002aa2 <main+0xe9a>
 8002548:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800254c:	4809      	ldr	r0, [pc, #36]	; (8002574 <main+0x96c>)
 800254e:	f7fe fde5 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
 8002552:	e2a6      	b.n	8002aa2 <main+0xe9a>
 8002554:	f3af 8000 	nop.w
 8002558:	9999999a 	.word	0x9999999a
 800255c:	3fb99999 	.word	0x3fb99999
 8002560:	200008e0 	.word	0x200008e0
 8002564:	20000000 	.word	0x20000000
 8002568:	2000028c 	.word	0x2000028c
 800256c:	200002bc 	.word	0x200002bc
 8002570:	2000031c 	.word	0x2000031c
 8002574:	20000330 	.word	0x20000330
 8002578:	3dcccccd 	.word	0x3dcccccd
			 	 	 	 	 	 						 }
		                           }

	                             }

	  else if (PID_change_ch() < 1300){ // increase PID value
 800257c:	f7fe fcac 	bl	8000ed8 <PID_change_ch>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	f240 5313 	movw	r3, #1299	; 0x513
 8002588:	429a      	cmp	r2, r3
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8285 	beq.w	8002aa2 <main+0xe9a>
		      if (change_term != 0)change_term_signal = 2;
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <main+0xb78>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <main+0x99e>
 80025a0:	4b78      	ldr	r3, [pc, #480]	; (8002784 <main+0xb7c>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]

	          if (change_term == 1){  // only P value down
 80025a6:	4b76      	ldr	r3, [pc, #472]	; (8002780 <main+0xb78>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 80f8 	bne.w	80027a0 <main+0xb98>
	        	  	  	  	  	    if (flight_mode == 1){  // gyro mode
 80025b0:	4b75      	ldr	r3, [pc, #468]	; (8002788 <main+0xb80>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d169      	bne.n	800268c <main+0xa84>
	        	                    Roll_PID.setP(Roll_PID.getP()   - 0.01);    if (Roll_PID.getP() < 0.2)Roll_PID.setP(0.1);
 80025b8:	4874      	ldr	r0, [pc, #464]	; (800278c <main+0xb84>)
 80025ba:	f002 f8eb 	bl	8004794 <_ZN3Pid4getPEv>
 80025be:	ee10 3a10 	vmov	r3, s0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffc0 	bl	8000548 <__aeabi_f2d>
 80025c8:	a369      	add	r3, pc, #420	; (adr r3, 8002770 <main+0xb68>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fd fe5b 	bl	8000288 <__aeabi_dsub>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fb05 	bl	8000be8 <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	ee00 3a10 	vmov	s0, r3
 80025e4:	4869      	ldr	r0, [pc, #420]	; (800278c <main+0xb84>)
 80025e6:	f002 f899 	bl	800471c <_ZN3Pid4setPEf>
 80025ea:	4868      	ldr	r0, [pc, #416]	; (800278c <main+0xb84>)
 80025ec:	f002 f8d2 	bl	8004794 <_ZN3Pid4getPEv>
 80025f0:	ee10 3a10 	vmov	r3, s0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffa7 	bl	8000548 <__aeabi_f2d>
 80025fa:	2301      	movs	r3, #1
 80025fc:	461c      	mov	r4, r3
 80025fe:	a35e      	add	r3, pc, #376	; (adr r3, 8002778 <main+0xb70>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe fa6a 	bl	8000adc <__aeabi_dcmplt>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <main+0xa0a>
 800260e:	2300      	movs	r3, #0
 8002610:	461c      	mov	r4, r3
 8002612:	b2e3      	uxtb	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <main+0xa1a>
 8002618:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002790 <main+0xb88>
 800261c:	485b      	ldr	r0, [pc, #364]	; (800278c <main+0xb84>)
 800261e:	f002 f87d 	bl	800471c <_ZN3Pid4setPEf>
	                                Pitch_PID.setP(Pitch_PID.getP() - 0.01);    if (Pitch_PID.getP() < 0.2)Pitch_PID.setP(0.1);
 8002622:	485c      	ldr	r0, [pc, #368]	; (8002794 <main+0xb8c>)
 8002624:	f002 f8b6 	bl	8004794 <_ZN3Pid4getPEv>
 8002628:	ee10 3a10 	vmov	r3, s0
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ff8b 	bl	8000548 <__aeabi_f2d>
 8002632:	a34f      	add	r3, pc, #316	; (adr r3, 8002770 <main+0xb68>)
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	f7fd fe26 	bl	8000288 <__aeabi_dsub>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fad0 	bl	8000be8 <__aeabi_d2f>
 8002648:	4603      	mov	r3, r0
 800264a:	ee00 3a10 	vmov	s0, r3
 800264e:	4851      	ldr	r0, [pc, #324]	; (8002794 <main+0xb8c>)
 8002650:	f002 f864 	bl	800471c <_ZN3Pid4setPEf>
 8002654:	484f      	ldr	r0, [pc, #316]	; (8002794 <main+0xb8c>)
 8002656:	f002 f89d 	bl	8004794 <_ZN3Pid4getPEv>
 800265a:	ee10 3a10 	vmov	r3, s0
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff72 	bl	8000548 <__aeabi_f2d>
 8002664:	2301      	movs	r3, #1
 8002666:	461c      	mov	r4, r3
 8002668:	a343      	add	r3, pc, #268	; (adr r3, 8002778 <main+0xb70>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fe fa35 	bl	8000adc <__aeabi_dcmplt>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <main+0xa74>
 8002678:	2300      	movs	r3, #0
 800267a:	461c      	mov	r4, r3
 800267c:	b2e3      	uxtb	r3, r4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <main+0xa84>
 8002682:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002790 <main+0xb88>
 8002686:	4843      	ldr	r0, [pc, #268]	; (8002794 <main+0xb8c>)
 8002688:	f002 f848 	bl	800471c <_ZN3Pid4setPEf>
//	                                Yaw_PID.setP(Yaw_PID.getP()     - 0.01);    if (Yaw_PID.getP() < 0.2)Yaw_PID.setP(0.1);
	        	  	  	  	  	    					 }

	        	  	  	  	  	    if (flight_mode == 2){  // level mode
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <main+0xb80>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	f040 8206 	bne.w	8002aa2 <main+0xe9a>
			    	     	 	 	ROLL_SP.set_Level_P(ROLL_SP.get_Level_P()   - 0.01);    if (ROLL_SP.get_Level_P()  < 0.2)ROLL_SP.set_Level_P(0.1);
 8002696:	4840      	ldr	r0, [pc, #256]	; (8002798 <main+0xb90>)
 8002698:	f7fe fd13 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 800269c:	ee10 3a10 	vmov	r3, s0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff51 	bl	8000548 <__aeabi_f2d>
 80026a6:	a332      	add	r3, pc, #200	; (adr r3, 8002770 <main+0xb68>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd fdec 	bl	8000288 <__aeabi_dsub>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe fa96 	bl	8000be8 <__aeabi_d2f>
 80026bc:	4603      	mov	r3, r0
 80026be:	ee00 3a10 	vmov	s0, r3
 80026c2:	4835      	ldr	r0, [pc, #212]	; (8002798 <main+0xb90>)
 80026c4:	f7fe fcee 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 80026c8:	4833      	ldr	r0, [pc, #204]	; (8002798 <main+0xb90>)
 80026ca:	f7fe fcfa 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 80026ce:	ee10 3a10 	vmov	r3, s0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff38 	bl	8000548 <__aeabi_f2d>
 80026d8:	2301      	movs	r3, #1
 80026da:	461c      	mov	r4, r3
 80026dc:	a326      	add	r3, pc, #152	; (adr r3, 8002778 <main+0xb70>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f9fb 	bl	8000adc <__aeabi_dcmplt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <main+0xae8>
 80026ec:	2300      	movs	r3, #0
 80026ee:	461c      	mov	r4, r3
 80026f0:	b2e3      	uxtb	r3, r4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <main+0xaf8>
 80026f6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002790 <main+0xb88>
 80026fa:	4827      	ldr	r0, [pc, #156]	; (8002798 <main+0xb90>)
 80026fc:	f7fe fcd2 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
			    	     	 	 	Pitch_SP.set_Level_P(Pitch_SP.get_Level_P() - 0.01);    if (Pitch_SP.get_Level_P() < 0.2)Pitch_SP.set_Level_P(0.1);
 8002700:	4826      	ldr	r0, [pc, #152]	; (800279c <main+0xb94>)
 8002702:	f7fe fcde 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002706:	ee10 3a10 	vmov	r3, s0
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff1c 	bl	8000548 <__aeabi_f2d>
 8002710:	a317      	add	r3, pc, #92	; (adr r3, 8002770 <main+0xb68>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fdb7 	bl	8000288 <__aeabi_dsub>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe fa61 	bl	8000be8 <__aeabi_d2f>
 8002726:	4603      	mov	r3, r0
 8002728:	ee00 3a10 	vmov	s0, r3
 800272c:	481b      	ldr	r0, [pc, #108]	; (800279c <main+0xb94>)
 800272e:	f7fe fcb9 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 8002732:	481a      	ldr	r0, [pc, #104]	; (800279c <main+0xb94>)
 8002734:	f7fe fcc5 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002738:	ee10 3a10 	vmov	r3, s0
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd ff03 	bl	8000548 <__aeabi_f2d>
 8002742:	2301      	movs	r3, #1
 8002744:	461c      	mov	r4, r3
 8002746:	a30c      	add	r3, pc, #48	; (adr r3, 8002778 <main+0xb70>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fe f9c6 	bl	8000adc <__aeabi_dcmplt>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <main+0xb52>
 8002756:	2300      	movs	r3, #0
 8002758:	461c      	mov	r4, r3
 800275a:	b2e3      	uxtb	r3, r4
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 81a0 	beq.w	8002aa2 <main+0xe9a>
 8002762:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002790 <main+0xb88>
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <main+0xb94>)
 8002768:	f7fe fc9c 	bl	80010a4 <_ZN7RC_rate11set_Level_PEf>
 800276c:	e199      	b.n	8002aa2 <main+0xe9a>
 800276e:	bf00      	nop
 8002770:	47ae147b 	.word	0x47ae147b
 8002774:	3f847ae1 	.word	0x3f847ae1
 8002778:	9999999a 	.word	0x9999999a
 800277c:	3fc99999 	.word	0x3fc99999
 8002780:	200008e0 	.word	0x200008e0
 8002784:	200008e1 	.word	0x200008e1
 8002788:	20000000 	.word	0x20000000
 800278c:	2000028c 	.word	0x2000028c
 8002790:	3dcccccd 	.word	0x3dcccccd
 8002794:	200002bc 	.word	0x200002bc
 8002798:	2000031c 	.word	0x2000031c
 800279c:	20000330 	.word	0x20000330
	        	  	  	  	  	    					 }
	                               }
	     else if (change_term == 2){  // only I value down
 80027a0:	4bc9      	ldr	r3, [pc, #804]	; (8002ac8 <main+0xec0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	f040 80bd 	bne.w	8002924 <main+0xd1c>
	    	 	 	 	 	 	 	if (flight_mode == 1){  // gyro mode
 80027aa:	4bc8      	ldr	r3, [pc, #800]	; (8002acc <main+0xec4>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d169      	bne.n	8002886 <main+0xc7e>
	    	                        Roll_PID.setI(Roll_PID.getI()   - 0.1); if (Roll_PID.getI()  < 0.2)Roll_PID.setI(0.1);
 80027b2:	48c7      	ldr	r0, [pc, #796]	; (8002ad0 <main+0xec8>)
 80027b4:	f001 fffd 	bl	80047b2 <_ZN3Pid4getIEv>
 80027b8:	ee10 3a10 	vmov	r3, s0
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fec3 	bl	8000548 <__aeabi_f2d>
 80027c2:	a3bd      	add	r3, pc, #756	; (adr r3, 8002ab8 <main+0xeb0>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd fd5e 	bl	8000288 <__aeabi_dsub>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7fe fa08 	bl	8000be8 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	ee00 3a10 	vmov	s0, r3
 80027de:	48bc      	ldr	r0, [pc, #752]	; (8002ad0 <main+0xec8>)
 80027e0:	f001 ffab 	bl	800473a <_ZN3Pid4setIEf>
 80027e4:	48ba      	ldr	r0, [pc, #744]	; (8002ad0 <main+0xec8>)
 80027e6:	f001 ffe4 	bl	80047b2 <_ZN3Pid4getIEv>
 80027ea:	ee10 3a10 	vmov	r3, s0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd feaa 	bl	8000548 <__aeabi_f2d>
 80027f4:	2301      	movs	r3, #1
 80027f6:	461c      	mov	r4, r3
 80027f8:	a3b1      	add	r3, pc, #708	; (adr r3, 8002ac0 <main+0xeb8>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fe f96d 	bl	8000adc <__aeabi_dcmplt>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <main+0xc04>
 8002808:	2300      	movs	r3, #0
 800280a:	461c      	mov	r4, r3
 800280c:	b2e3      	uxtb	r3, r4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <main+0xc14>
 8002812:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8002ad4 <main+0xecc>
 8002816:	48ae      	ldr	r0, [pc, #696]	; (8002ad0 <main+0xec8>)
 8002818:	f001 ff8f 	bl	800473a <_ZN3Pid4setIEf>
	                                Pitch_PID.setI(Pitch_PID.getI() - 0.1); if (Pitch_PID.getI() < 0.2)Pitch_PID.setI(0.1);
 800281c:	48ae      	ldr	r0, [pc, #696]	; (8002ad8 <main+0xed0>)
 800281e:	f001 ffc8 	bl	80047b2 <_ZN3Pid4getIEv>
 8002822:	ee10 3a10 	vmov	r3, s0
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe8e 	bl	8000548 <__aeabi_f2d>
 800282c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002ab8 <main+0xeb0>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fd29 	bl	8000288 <__aeabi_dsub>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f9d3 	bl	8000be8 <__aeabi_d2f>
 8002842:	4603      	mov	r3, r0
 8002844:	ee00 3a10 	vmov	s0, r3
 8002848:	48a3      	ldr	r0, [pc, #652]	; (8002ad8 <main+0xed0>)
 800284a:	f001 ff76 	bl	800473a <_ZN3Pid4setIEf>
 800284e:	48a2      	ldr	r0, [pc, #648]	; (8002ad8 <main+0xed0>)
 8002850:	f001 ffaf 	bl	80047b2 <_ZN3Pid4getIEv>
 8002854:	ee10 3a10 	vmov	r3, s0
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe75 	bl	8000548 <__aeabi_f2d>
 800285e:	2301      	movs	r3, #1
 8002860:	461c      	mov	r4, r3
 8002862:	a397      	add	r3, pc, #604	; (adr r3, 8002ac0 <main+0xeb8>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fe f938 	bl	8000adc <__aeabi_dcmplt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <main+0xc6e>
 8002872:	2300      	movs	r3, #0
 8002874:	461c      	mov	r4, r3
 8002876:	b2e3      	uxtb	r3, r4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <main+0xc7e>
 800287c:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8002ad4 <main+0xecc>
 8002880:	4895      	ldr	r0, [pc, #596]	; (8002ad8 <main+0xed0>)
 8002882:	f001 ff5a 	bl	800473a <_ZN3Pid4setIEf>
//	                                Yaw_PID.setI(Yaw_PID.getI()     - 0.1); if (Yaw_PID.getI()   < 0.2)Yaw_PID.setI(0.1);
	    	 	 	 	 	 	 						 }

	    	 	 	 	 	 	 	if (flight_mode == 2){  // level mode
 8002886:	4b91      	ldr	r3, [pc, #580]	; (8002acc <main+0xec4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 8109 	bne.w	8002aa2 <main+0xe9a>
				    	     	 	ROLL_SP.set_MaxAngle(ROLL_SP.get_MaxAngle()   - 1.0f);    if (ROLL_SP.get_MaxAngle() < 6.0)ROLL_SP.set_MaxAngle(5.0);
 8002890:	4892      	ldr	r0, [pc, #584]	; (8002adc <main+0xed4>)
 8002892:	f7fe fc34 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002896:	eef0 7a40 	vmov.f32	s15, s0
 800289a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	488d      	ldr	r0, [pc, #564]	; (8002adc <main+0xed4>)
 80028a8:	f7fe fc1a 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 80028ac:	488b      	ldr	r0, [pc, #556]	; (8002adc <main+0xed4>)
 80028ae:	f7fe fc26 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80028b2:	eef0 7a40 	vmov.f32	s15, s0
 80028b6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80028ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	bf4c      	ite	mi
 80028c4:	2301      	movmi	r3, #1
 80028c6:	2300      	movpl	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <main+0xcd0>
 80028ce:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80028d2:	4882      	ldr	r0, [pc, #520]	; (8002adc <main+0xed4>)
 80028d4:	f7fe fc04 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
				    	     	 	Pitch_SP.set_MaxAngle(Pitch_SP.get_MaxAngle() - 1.0f);    if (Pitch_SP.get_MaxAngle() < 6.0)Pitch_SP.set_MaxAngle(5.0);
 80028d8:	4881      	ldr	r0, [pc, #516]	; (8002ae0 <main+0xed8>)
 80028da:	f7fe fc10 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80028de:	eef0 7a40 	vmov.f32	s15, s0
 80028e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	487c      	ldr	r0, [pc, #496]	; (8002ae0 <main+0xed8>)
 80028f0:	f7fe fbf6 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 80028f4:	487a      	ldr	r0, [pc, #488]	; (8002ae0 <main+0xed8>)
 80028f6:	f7fe fc02 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80028fa:	eef0 7a40 	vmov.f32	s15, s0
 80028fe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	bf4c      	ite	mi
 800290c:	2301      	movmi	r3, #1
 800290e:	2300      	movpl	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80c5 	beq.w	8002aa2 <main+0xe9a>
 8002918:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800291c:	4870      	ldr	r0, [pc, #448]	; (8002ae0 <main+0xed8>)
 800291e:	f7fe fbdf 	bl	80010e0 <_ZN7RC_rate12set_MaxAngleEf>
 8002922:	e0be      	b.n	8002aa2 <main+0xe9a>
	    	 	 	 	 	 	 						 }
	                               }
	     else if (change_term == 3){  // only D value down
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <main+0xec0>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b03      	cmp	r3, #3
 800292a:	f040 80ba 	bne.w	8002aa2 <main+0xe9a>
	    	 	 	 	 	 	 	if (flight_mode == 1){  // gyro mode
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <main+0xec4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d169      	bne.n	8002a0a <main+0xe02>
	    	                        Roll_PID.setD(Roll_PID.getD()   - 0.1);    if (Roll_PID.getD() < 0.2)Roll_PID.setD(0.2);
 8002936:	4866      	ldr	r0, [pc, #408]	; (8002ad0 <main+0xec8>)
 8002938:	f001 ff4a 	bl	80047d0 <_ZN3Pid4getDEv>
 800293c:	ee10 3a10 	vmov	r3, s0
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe01 	bl	8000548 <__aeabi_f2d>
 8002946:	a35c      	add	r3, pc, #368	; (adr r3, 8002ab8 <main+0xeb0>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fc9c 	bl	8000288 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe f946 	bl	8000be8 <__aeabi_d2f>
 800295c:	4603      	mov	r3, r0
 800295e:	ee00 3a10 	vmov	s0, r3
 8002962:	485b      	ldr	r0, [pc, #364]	; (8002ad0 <main+0xec8>)
 8002964:	f001 fef8 	bl	8004758 <_ZN3Pid4setDEf>
 8002968:	4859      	ldr	r0, [pc, #356]	; (8002ad0 <main+0xec8>)
 800296a:	f001 ff31 	bl	80047d0 <_ZN3Pid4getDEv>
 800296e:	ee10 3a10 	vmov	r3, s0
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fde8 	bl	8000548 <__aeabi_f2d>
 8002978:	2301      	movs	r3, #1
 800297a:	461c      	mov	r4, r3
 800297c:	a350      	add	r3, pc, #320	; (adr r3, 8002ac0 <main+0xeb8>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fe f8ab 	bl	8000adc <__aeabi_dcmplt>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <main+0xd88>
 800298c:	2300      	movs	r3, #0
 800298e:	461c      	mov	r4, r3
 8002990:	b2e3      	uxtb	r3, r4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <main+0xd98>
 8002996:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002ae4 <main+0xedc>
 800299a:	484d      	ldr	r0, [pc, #308]	; (8002ad0 <main+0xec8>)
 800299c:	f001 fedc 	bl	8004758 <_ZN3Pid4setDEf>
	                                Pitch_PID.setD(Pitch_PID.getD() - 0.1);    if (Pitch_PID.getD() < 0.2)Pitch_PID.setD(0.2);
 80029a0:	484d      	ldr	r0, [pc, #308]	; (8002ad8 <main+0xed0>)
 80029a2:	f001 ff15 	bl	80047d0 <_ZN3Pid4getDEv>
 80029a6:	ee10 3a10 	vmov	r3, s0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fdcc 	bl	8000548 <__aeabi_f2d>
 80029b0:	a341      	add	r3, pc, #260	; (adr r3, 8002ab8 <main+0xeb0>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fd fc67 	bl	8000288 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f911 	bl	8000be8 <__aeabi_d2f>
 80029c6:	4603      	mov	r3, r0
 80029c8:	ee00 3a10 	vmov	s0, r3
 80029cc:	4842      	ldr	r0, [pc, #264]	; (8002ad8 <main+0xed0>)
 80029ce:	f001 fec3 	bl	8004758 <_ZN3Pid4setDEf>
 80029d2:	4841      	ldr	r0, [pc, #260]	; (8002ad8 <main+0xed0>)
 80029d4:	f001 fefc 	bl	80047d0 <_ZN3Pid4getDEv>
 80029d8:	ee10 3a10 	vmov	r3, s0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdb3 	bl	8000548 <__aeabi_f2d>
 80029e2:	2301      	movs	r3, #1
 80029e4:	461c      	mov	r4, r3
 80029e6:	a336      	add	r3, pc, #216	; (adr r3, 8002ac0 <main+0xeb8>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fe f876 	bl	8000adc <__aeabi_dcmplt>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <main+0xdf2>
 80029f6:	2300      	movs	r3, #0
 80029f8:	461c      	mov	r4, r3
 80029fa:	b2e3      	uxtb	r3, r4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <main+0xe02>
 8002a00:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002ae4 <main+0xedc>
 8002a04:	4834      	ldr	r0, [pc, #208]	; (8002ad8 <main+0xed0>)
 8002a06:	f001 fea7 	bl	8004758 <_ZN3Pid4setDEf>
	    	 	 	 	 	 	 						 }

	 	 	 						if (flight_mode == 2){  // level mode
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <main+0xec4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d147      	bne.n	8002aa2 <main+0xe9a>
									ROLL_SP.set_RC_rate(ROLL_SP.get_RC_rate()   - 0.1f);    if (ROLL_SP.get_RC_rate()  < 0.5)ROLL_SP.set_RC_rate(0.4);
 8002a12:	4832      	ldr	r0, [pc, #200]	; (8002adc <main+0xed4>)
 8002a14:	f7fe fb91 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002a18:	eef0 7a40 	vmov.f32	s15, s0
 8002a1c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002ad4 <main+0xecc>
 8002a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	482c      	ldr	r0, [pc, #176]	; (8002adc <main+0xed4>)
 8002a2a:	f7fe fb77 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
 8002a2e:	482b      	ldr	r0, [pc, #172]	; (8002adc <main+0xed4>)
 8002a30:	f7fe fb83 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002a34:	eef0 7a40 	vmov.f32	s15, s0
 8002a38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	bf4c      	ite	mi
 8002a46:	2301      	movmi	r3, #1
 8002a48:	2300      	movpl	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <main+0xe52>
 8002a50:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002ae8 <main+0xee0>
 8002a54:	4821      	ldr	r0, [pc, #132]	; (8002adc <main+0xed4>)
 8002a56:	f7fe fb61 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
									Pitch_SP.set_RC_rate(Pitch_SP.get_RC_rate() - 0.1f);    if (Pitch_SP.get_RC_rate() < 0.5)Pitch_SP.set_RC_rate(0.4);
 8002a5a:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <main+0xed8>)
 8002a5c:	f7fe fb6d 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002a60:	eef0 7a40 	vmov.f32	s15, s0
 8002a64:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002ad4 <main+0xecc>
 8002a68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a70:	481b      	ldr	r0, [pc, #108]	; (8002ae0 <main+0xed8>)
 8002a72:	f7fe fb53 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
 8002a76:	481a      	ldr	r0, [pc, #104]	; (8002ae0 <main+0xed8>)
 8002a78:	f7fe fb5f 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8c:	bf4c      	ite	mi
 8002a8e:	2301      	movmi	r3, #1
 8002a90:	2300      	movpl	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <main+0xe9a>
 8002a98:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002ae8 <main+0xee0>
 8002a9c:	4810      	ldr	r0, [pc, #64]	; (8002ae0 <main+0xed8>)
 8002a9e:	f7fe fb3d 	bl	800111c <_ZN7RC_rate11set_RC_rateEf>
	  }

	  }


	  if (change_term_signal == 1 ){
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <main+0xee4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d122      	bne.n	8002af0 <main+0xee8>
		  buzzer_signal(1, 100);
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7fe fc03 	bl	80012b8 <buzzer_signal>
 8002ab2:	e025      	b.n	8002b00 <main+0xef8>
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	9999999a 	.word	0x9999999a
 8002abc:	3fb99999 	.word	0x3fb99999
 8002ac0:	9999999a 	.word	0x9999999a
 8002ac4:	3fc99999 	.word	0x3fc99999
 8002ac8:	200008e0 	.word	0x200008e0
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	2000028c 	.word	0x2000028c
 8002ad4:	3dcccccd 	.word	0x3dcccccd
 8002ad8:	200002bc 	.word	0x200002bc
 8002adc:	2000031c 	.word	0x2000031c
 8002ae0:	20000330 	.word	0x20000330
 8002ae4:	3e4ccccd 	.word	0x3e4ccccd
 8002ae8:	3ecccccd 	.word	0x3ecccccd
 8002aec:	200008e1 	.word	0x200008e1
	  }
	  else if (change_term_signal == 2 ){
 8002af0:	4bb6      	ldr	r3, [pc, #728]	; (8002dcc <main+0x11c4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d103      	bne.n	8002b00 <main+0xef8>
		  buzzer_signal(2, 100);
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	2002      	movs	r0, #2
 8002afc:	f7fe fbdc 	bl	80012b8 <buzzer_signal>
	  }


// --------------------------------------------------- FLIGHT CONTROLL --------------------------------------------------

	 	  MPU6050_Read_Gyro();
 8002b00:	f001 fbac 	bl	800425c <MPU6050_Read_Gyro>

		  if (flight_mode == 2 || flight_mode == 3) {
 8002b04:	4bb2      	ldr	r3, [pc, #712]	; (8002dd0 <main+0x11c8>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d003      	beq.n	8002b14 <main+0xf0c>
 8002b0c:	4bb0      	ldr	r3, [pc, #704]	; (8002dd0 <main+0x11c8>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d108      	bne.n	8002b26 <main+0xf1e>
		  MPU6050_Read_Accel();
 8002b14:	f001 fc20 	bl	8004358 <MPU6050_Read_Accel>
		  calc_angles (Loop_time);
 8002b18:	4bae      	ldr	r3, [pc, #696]	; (8002dd4 <main+0x11cc>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	f7fe fc2d 	bl	8001380 <calc_angles>
		   }


	 	 if (flight_mode == 1) {
 8002b26:	4baa      	ldr	r3, [pc, #680]	; (8002dd0 <main+0x11c8>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d150      	bne.n	8002bd0 <main+0xfc8>

		 	  Roll_setpoint = ROLL_SP.RC_rate_manual(roll_ch())    * ROLL_SP.get_RC_rate();
 8002b2e:	f7fe f997 	bl	8000e60 <roll_ch>
 8002b32:	4603      	mov	r3, r0
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	48a7      	ldr	r0, [pc, #668]	; (8002dd8 <main+0x11d0>)
 8002b3a:	f7fe fa7b 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8002b42:	48a5      	ldr	r0, [pc, #660]	; (8002dd8 <main+0x11d0>)
 8002b44:	f7fe faf9 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002b48:	eef0 7a40 	vmov.f32	s15, s0
 8002b4c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b50:	4ba2      	ldr	r3, [pc, #648]	; (8002ddc <main+0x11d4>)
 8002b52:	edc3 7a00 	vstr	s15, [r3]
		 	  Pitch_setpoint = Pitch_SP.RC_rate_manual(pitch_ch()) * Pitch_SP.get_RC_rate();
 8002b56:	f7fe f98f 	bl	8000e78 <pitch_ch>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b21b      	sxth	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	489f      	ldr	r0, [pc, #636]	; (8002de0 <main+0x11d8>)
 8002b62:	f7fe fa67 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002b66:	eeb0 8a40 	vmov.f32	s16, s0
 8002b6a:	489d      	ldr	r0, [pc, #628]	; (8002de0 <main+0x11d8>)
 8002b6c:	f7fe fae5 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002b70:	eef0 7a40 	vmov.f32	s15, s0
 8002b74:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002b78:	4b9a      	ldr	r3, [pc, #616]	; (8002de4 <main+0x11dc>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
		       if (throttle_ch() > 1050 ){
 8002b7e:	f7fe f963 	bl	8000e48 <throttle_ch>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	f240 431a 	movw	r3, #1050	; 0x41a
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	bf8c      	ite	hi
 8002b8e:	2301      	movhi	r3, #1
 8002b90:	2300      	movls	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <main+0xfba>
		 	  Yaw_setpoint = Yaw_SP.RC_rate_manual(yaw_ch())       * Yaw_SP.get_RC_rate();
 8002b98:	f7fe f97a 	bl	8000e90 <yaw_ch>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b21b      	sxth	r3, r3
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4891      	ldr	r0, [pc, #580]	; (8002de8 <main+0x11e0>)
 8002ba4:	f7fe fa46 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002ba8:	eeb0 8a40 	vmov.f32	s16, s0
 8002bac:	488e      	ldr	r0, [pc, #568]	; (8002de8 <main+0x11e0>)
 8002bae:	f7fe fac4 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 8002bb2:	eef0 7a40 	vmov.f32	s15, s0
 8002bb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <main+0x11e4>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
 8002bc0:	e003      	b.n	8002bca <main+0xfc2>
		       } else Yaw_setpoint = 0;
 8002bc2:	4b8a      	ldr	r3, [pc, #552]	; (8002dec <main+0x11e4>)
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

			 flight_mode_signal(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f7fe fb1c 	bl	8001208 <flight_mode_signal>
	 	 }


	 	 if (flight_mode == 2) {
 8002bd0:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <main+0x11c8>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d17d      	bne.n	8002cd4 <main+0x10cc>

		      roll_rc = ROLL_SP.RC_rate_manual(roll_ch());
 8002bd8:	f7fe f942 	bl	8000e60 <roll_ch>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	b21b      	sxth	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	487d      	ldr	r0, [pc, #500]	; (8002dd8 <main+0x11d0>)
 8002be4:	f7fe fa26 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002be8:	eef0 7a40 	vmov.f32	s15, s0
 8002bec:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <main+0x11e8>)
 8002bee:	edc3 7a00 	vstr	s15, [r3]
		      pitch_rc= Pitch_SP.RC_rate_manual(pitch_ch());
 8002bf2:	f7fe f941 	bl	8000e78 <pitch_ch>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4878      	ldr	r0, [pc, #480]	; (8002de0 <main+0x11d8>)
 8002bfe:	f7fe fa19 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002c02:	eef0 7a40 	vmov.f32	s15, s0
 8002c06:	4b7b      	ldr	r3, [pc, #492]	; (8002df4 <main+0x11ec>)
 8002c08:	edc3 7a00 	vstr	s15, [r3]

		      roll_angle_level  =   get_roll_angle()  * ROLL_SP.get_MaxAngle(); // the higher the max angle value, the lower he final angle during flight
 8002c0c:	f7fe fda0 	bl	8001750 <get_roll_angle>
 8002c10:	eeb0 8a40 	vmov.f32	s16, s0
 8002c14:	4870      	ldr	r0, [pc, #448]	; (8002dd8 <main+0x11d0>)
 8002c16:	f7fe fa72 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002c1a:	eef0 7a40 	vmov.f32	s15, s0
 8002c1e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c22:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <main+0x11f0>)
 8002c24:	edc3 7a00 	vstr	s15, [r3]
		      pitch_angle_level = - get_pitch_angle() * Pitch_SP.get_MaxAngle();
 8002c28:	f7fe fda0 	bl	800176c <get_pitch_angle>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	eeb1 8a67 	vneg.f32	s16, s15
 8002c34:	486a      	ldr	r0, [pc, #424]	; (8002de0 <main+0x11d8>)
 8002c36:	f7fe fa62 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002c3a:	eef0 7a40 	vmov.f32	s15, s0
 8002c3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c42:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <main+0x11f4>)
 8002c44:	edc3 7a00 	vstr	s15, [r3]

		      Roll_setpoint  = (roll_rc  - roll_angle_level)  * ROLL_SP.get_Level_P(); // levle P gain
 8002c48:	4b69      	ldr	r3, [pc, #420]	; (8002df0 <main+0x11e8>)
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <main+0x11f0>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002c58:	485f      	ldr	r0, [pc, #380]	; (8002dd8 <main+0x11d0>)
 8002c5a:	f7fe fa32 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002c5e:	eef0 7a40 	vmov.f32	s15, s0
 8002c62:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <main+0x11d4>)
 8002c68:	edc3 7a00 	vstr	s15, [r3]
		 	  Pitch_setpoint = (pitch_rc - pitch_angle_level) * Pitch_SP.get_Level_P();
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <main+0x11ec>)
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <main+0x11f4>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002c7c:	4858      	ldr	r0, [pc, #352]	; (8002de0 <main+0x11d8>)
 8002c7e:	f7fe fa20 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002c82:	eef0 7a40 	vmov.f32	s15, s0
 8002c86:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <main+0x11dc>)
 8002c8c:	edc3 7a00 	vstr	s15, [r3]

		 	  if (throttle_ch() > 1050 ){
 8002c90:	f7fe f8da 	bl	8000e48 <throttle_ch>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	f240 431a 	movw	r3, #1050	; 0x41a
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bf8c      	ite	hi
 8002ca0:	2301      	movhi	r3, #1
 8002ca2:	2300      	movls	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00d      	beq.n	8002cc6 <main+0x10be>
		 	  Yaw_setpoint = Yaw_SP.RC_rate_manual(yaw_ch());
 8002caa:	f7fe f8f1 	bl	8000e90 <yaw_ch>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	484c      	ldr	r0, [pc, #304]	; (8002de8 <main+0x11e0>)
 8002cb6:	f7fe f9bd 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002cba:	eef0 7a40 	vmov.f32	s15, s0
 8002cbe:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <main+0x11e4>)
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
 8002cc4:	e003      	b.n	8002cce <main+0x10c6>
		 	  } else Yaw_setpoint = 0;
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <main+0x11e4>)
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]

		      flight_mode_signal(2);
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f7fe fa9a 	bl	8001208 <flight_mode_signal>

	 	 }


	 	 if (flight_mode == 3) {
 8002cd4:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <main+0x11c8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	f040 8098 	bne.w	8002e0e <main+0x1206>

		      roll_rc = ROLL_SP.RC_rate_manual(roll_ch());
 8002cde:	f7fe f8bf 	bl	8000e60 <roll_ch>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	483b      	ldr	r0, [pc, #236]	; (8002dd8 <main+0x11d0>)
 8002cea:	f7fe f9a3 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002cee:	eef0 7a40 	vmov.f32	s15, s0
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <main+0x11e8>)
 8002cf4:	edc3 7a00 	vstr	s15, [r3]
		      pitch_rc= Pitch_SP.RC_rate_manual(pitch_ch());
 8002cf8:	f7fe f8be 	bl	8000e78 <pitch_ch>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	4837      	ldr	r0, [pc, #220]	; (8002de0 <main+0x11d8>)
 8002d04:	f7fe f996 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002d08:	eef0 7a40 	vmov.f32	s15, s0
 8002d0c:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <main+0x11ec>)
 8002d0e:	edc3 7a00 	vstr	s15, [r3]

		      roll_angle_level  =   get_roll_angle_half()   * ROLL_SP.get_MaxAngle();
 8002d12:	f7fe fd39 	bl	8001788 <get_roll_angle_half>
 8002d16:	eeb0 8a40 	vmov.f32	s16, s0
 8002d1a:	482f      	ldr	r0, [pc, #188]	; (8002dd8 <main+0x11d0>)
 8002d1c:	f7fe f9ef 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002d20:	eef0 7a40 	vmov.f32	s15, s0
 8002d24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d28:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <main+0x11f0>)
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
		      pitch_angle_level = - get_pitch_angle_half()  * Pitch_SP.get_MaxAngle();
 8002d2e:	f7fe fd39 	bl	80017a4 <get_pitch_angle_half>
 8002d32:	eef0 7a40 	vmov.f32	s15, s0
 8002d36:	eeb1 8a67 	vneg.f32	s16, s15
 8002d3a:	4829      	ldr	r0, [pc, #164]	; (8002de0 <main+0x11d8>)
 8002d3c:	f7fe f9df 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 8002d40:	eef0 7a40 	vmov.f32	s15, s0
 8002d44:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d48:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <main+0x11f4>)
 8002d4a:	edc3 7a00 	vstr	s15, [r3]

		 	  Roll_setpoint  = (roll_rc  - roll_angle_level)  * ROLL_SP.get_Level_P();
 8002d4e:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <main+0x11e8>)
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <main+0x11f0>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002d5e:	481e      	ldr	r0, [pc, #120]	; (8002dd8 <main+0x11d0>)
 8002d60:	f7fe f9af 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002d64:	eef0 7a40 	vmov.f32	s15, s0
 8002d68:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	; (8002ddc <main+0x11d4>)
 8002d6e:	edc3 7a00 	vstr	s15, [r3]
		 	  Pitch_setpoint = (pitch_rc - pitch_angle_level) * Pitch_SP.get_Level_P();
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <main+0x11ec>)
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <main+0x11f4>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002d82:	4817      	ldr	r0, [pc, #92]	; (8002de0 <main+0x11d8>)
 8002d84:	f7fe f99d 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 8002d88:	eef0 7a40 	vmov.f32	s15, s0
 8002d8c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <main+0x11dc>)
 8002d92:	edc3 7a00 	vstr	s15, [r3]

		 	  if (throttle_ch() > 1050 ){
 8002d96:	f7fe f857 	bl	8000e48 <throttle_ch>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f240 431a 	movw	r3, #1050	; 0x41a
 8002da2:	429a      	cmp	r2, r3
 8002da4:	bf8c      	ite	hi
 8002da6:	2301      	movhi	r3, #1
 8002da8:	2300      	movls	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d027      	beq.n	8002e00 <main+0x11f8>
		 	  Yaw_setpoint = Yaw_SP.RC_rate_manual(yaw_ch());
 8002db0:	f7fe f86e 	bl	8000e90 <yaw_ch>
 8002db4:	4603      	mov	r3, r0
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	480b      	ldr	r0, [pc, #44]	; (8002de8 <main+0x11e0>)
 8002dbc:	f7fe f93a 	bl	8001034 <_ZN7RC_rate14RC_rate_manualEs>
 8002dc0:	eef0 7a40 	vmov.f32	s15, s0
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <main+0x11e4>)
 8002dc6:	edc3 7a00 	vstr	s15, [r3]
 8002dca:	e01d      	b.n	8002e08 <main+0x1200>
 8002dcc:	200008e1 	.word	0x200008e1
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	200008d8 	.word	0x200008d8
 8002dd8:	2000031c 	.word	0x2000031c
 8002ddc:	200008f0 	.word	0x200008f0
 8002de0:	20000330 	.word	0x20000330
 8002de4:	200008f4 	.word	0x200008f4
 8002de8:	20000344 	.word	0x20000344
 8002dec:	200008f8 	.word	0x200008f8
 8002df0:	20000940 	.word	0x20000940
 8002df4:	20000948 	.word	0x20000948
 8002df8:	2000094c 	.word	0x2000094c
 8002dfc:	20000950 	.word	0x20000950
		 	  } else Yaw_setpoint = 0;
 8002e00:	4bbb      	ldr	r3, [pc, #748]	; (80030f0 <main+0x14e8>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

		     flight_mode_signal(3);
 8002e08:	2003      	movs	r0, #3
 8002e0a:	f7fe f9fd 	bl	8001208 <flight_mode_signal>
	 	 }


	      Roll_PID_out  = Roll_PID.updatePID( filter_RC_roll.Biquad_filter(Roll_setpoint),   filter_X.Pt1_filter(gyro_X()), filter_Dterm_X.Biquad_filter(gyro_X()), Loop_time, flight_mode);
 8002e0e:	4bb9      	ldr	r3, [pc, #740]	; (80030f4 <main+0x14ec>)
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	48b7      	ldr	r0, [pc, #732]	; (80030f8 <main+0x14f0>)
 8002e1a:	f7fe fe81 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002e1e:	eeb0 8a40 	vmov.f32	s16, s0
 8002e22:	f001 fb03 	bl	800442c <gyro_X>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
 8002e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2e:	48b3      	ldr	r0, [pc, #716]	; (80030fc <main+0x14f4>)
 8002e30:	f7fe fec3 	bl	8001bba <_ZN6filter10Pt1_filterEf>
 8002e34:	eef0 8a40 	vmov.f32	s17, s0
 8002e38:	f001 faf8 	bl	800442c <gyro_X>
 8002e3c:	eef0 7a40 	vmov.f32	s15, s0
 8002e40:	eeb0 0a67 	vmov.f32	s0, s15
 8002e44:	48ae      	ldr	r0, [pc, #696]	; (8003100 <main+0x14f8>)
 8002e46:	f7fe fe6b 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002e4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e4e:	4bad      	ldr	r3, [pc, #692]	; (8003104 <main+0x14fc>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	4bac      	ldr	r3, [pc, #688]	; (8003108 <main+0x1500>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	eef0 1a67 	vmov.f32	s3, s15
 8002e5e:	eeb0 1a47 	vmov.f32	s2, s14
 8002e62:	eef0 0a68 	vmov.f32	s1, s17
 8002e66:	eeb0 0a48 	vmov.f32	s0, s16
 8002e6a:	48a8      	ldr	r0, [pc, #672]	; (800310c <main+0x1504>)
 8002e6c:	f001 fb7e 	bl	800456c <_ZN3Pid9updatePIDEffffh>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	4ba6      	ldr	r3, [pc, #664]	; (8003110 <main+0x1508>)
 8002e76:	edc3 7a00 	vstr	s15, [r3]
	      Pitch_PID_out = Pitch_PID.updatePID(filter_RC_pitch.Biquad_filter(Pitch_setpoint), filter_Y.Pt1_filter(gyro_Y()), filter_Dterm_Y.Biquad_filter(gyro_Y()), Loop_time, flight_mode);
 8002e7a:	4ba6      	ldr	r3, [pc, #664]	; (8003114 <main+0x150c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	48a4      	ldr	r0, [pc, #656]	; (8003118 <main+0x1510>)
 8002e86:	f7fe fe4b 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8002e8e:	f001 fadb 	bl	8004448 <gyro_Y>
 8002e92:	eef0 7a40 	vmov.f32	s15, s0
 8002e96:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9a:	48a0      	ldr	r0, [pc, #640]	; (800311c <main+0x1514>)
 8002e9c:	f7fe fe8d 	bl	8001bba <_ZN6filter10Pt1_filterEf>
 8002ea0:	eef0 8a40 	vmov.f32	s17, s0
 8002ea4:	f001 fad0 	bl	8004448 <gyro_Y>
 8002ea8:	eef0 7a40 	vmov.f32	s15, s0
 8002eac:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb0:	489b      	ldr	r0, [pc, #620]	; (8003120 <main+0x1518>)
 8002eb2:	f7fe fe35 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002eb6:	eeb0 7a40 	vmov.f32	s14, s0
 8002eba:	4b92      	ldr	r3, [pc, #584]	; (8003104 <main+0x14fc>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	4b91      	ldr	r3, [pc, #580]	; (8003108 <main+0x1500>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	eef0 1a67 	vmov.f32	s3, s15
 8002eca:	eeb0 1a47 	vmov.f32	s2, s14
 8002ece:	eef0 0a68 	vmov.f32	s1, s17
 8002ed2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ed6:	4893      	ldr	r0, [pc, #588]	; (8003124 <main+0x151c>)
 8002ed8:	f001 fb48 	bl	800456c <_ZN3Pid9updatePIDEffffh>
 8002edc:	eef0 7a40 	vmov.f32	s15, s0
 8002ee0:	4b91      	ldr	r3, [pc, #580]	; (8003128 <main+0x1520>)
 8002ee2:	edc3 7a00 	vstr	s15, [r3]
		  Yaw_PID_out   = Yaw_PID.updatePID(  filter_RC_yaw.Biquad_filter(Yaw_setpoint),     filter_Z.Pt1_filter(-gyro_Z()),filter_Dterm_Z.Biquad_filter(-gyro_Z()),Loop_time, flight_mode);
 8002ee6:	4b82      	ldr	r3, [pc, #520]	; (80030f0 <main+0x14e8>)
 8002ee8:	edd3 7a00 	vldr	s15, [r3]
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	488e      	ldr	r0, [pc, #568]	; (800312c <main+0x1524>)
 8002ef2:	f7fe fe15 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8002efa:	f001 fab3 	bl	8004464 <gyro_Z>
 8002efe:	eef0 7a40 	vmov.f32	s15, s0
 8002f02:	eef1 7a67 	vneg.f32	s15, s15
 8002f06:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0a:	4889      	ldr	r0, [pc, #548]	; (8003130 <main+0x1528>)
 8002f0c:	f7fe fe55 	bl	8001bba <_ZN6filter10Pt1_filterEf>
 8002f10:	eef0 8a40 	vmov.f32	s17, s0
 8002f14:	f001 faa6 	bl	8004464 <gyro_Z>
 8002f18:	eef0 7a40 	vmov.f32	s15, s0
 8002f1c:	eef1 7a67 	vneg.f32	s15, s15
 8002f20:	eeb0 0a67 	vmov.f32	s0, s15
 8002f24:	4883      	ldr	r0, [pc, #524]	; (8003134 <main+0x152c>)
 8002f26:	f7fe fdfb 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8002f2a:	eeb0 7a40 	vmov.f32	s14, s0
 8002f2e:	4b75      	ldr	r3, [pc, #468]	; (8003104 <main+0x14fc>)
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	4b74      	ldr	r3, [pc, #464]	; (8003108 <main+0x1500>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	eef0 1a67 	vmov.f32	s3, s15
 8002f3e:	eeb0 1a47 	vmov.f32	s2, s14
 8002f42:	eef0 0a68 	vmov.f32	s1, s17
 8002f46:	eeb0 0a48 	vmov.f32	s0, s16
 8002f4a:	487b      	ldr	r0, [pc, #492]	; (8003138 <main+0x1530>)
 8002f4c:	f001 fb0e 	bl	800456c <_ZN3Pid9updatePIDEffffh>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	4b79      	ldr	r3, [pc, #484]	; (800313c <main+0x1534>)
 8002f56:	edc3 7a00 	vstr	s15, [r3]


// --------------------------------------------------- DEBUG --------------------------------------------------

		   	  roll_P = Roll_PID.getP();
 8002f5a:	486c      	ldr	r0, [pc, #432]	; (800310c <main+0x1504>)
 8002f5c:	f001 fc1a 	bl	8004794 <_ZN3Pid4getPEv>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
 8002f64:	4b76      	ldr	r3, [pc, #472]	; (8003140 <main+0x1538>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_I = Roll_PID.getI();
 8002f6a:	4868      	ldr	r0, [pc, #416]	; (800310c <main+0x1504>)
 8002f6c:	f001 fc21 	bl	80047b2 <_ZN3Pid4getIEv>
 8002f70:	eef0 7a40 	vmov.f32	s15, s0
 8002f74:	4b73      	ldr	r3, [pc, #460]	; (8003144 <main+0x153c>)
 8002f76:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_D = Roll_PID.getD();
 8002f7a:	4864      	ldr	r0, [pc, #400]	; (800310c <main+0x1504>)
 8002f7c:	f001 fc28 	bl	80047d0 <_ZN3Pid4getDEv>
 8002f80:	eef0 7a40 	vmov.f32	s15, s0
 8002f84:	4b70      	ldr	r3, [pc, #448]	; (8003148 <main+0x1540>)
 8002f86:	edc3 7a00 	vstr	s15, [r3]

		   	  pitch_P = Pitch_PID.getP();
 8002f8a:	4866      	ldr	r0, [pc, #408]	; (8003124 <main+0x151c>)
 8002f8c:	f001 fc02 	bl	8004794 <_ZN3Pid4getPEv>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b6d      	ldr	r3, [pc, #436]	; (800314c <main+0x1544>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
		   	  pitch_I = Pitch_PID.getI();
 8002f9a:	4862      	ldr	r0, [pc, #392]	; (8003124 <main+0x151c>)
 8002f9c:	f001 fc09 	bl	80047b2 <_ZN3Pid4getIEv>
 8002fa0:	eef0 7a40 	vmov.f32	s15, s0
 8002fa4:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <main+0x1548>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
		      pitch_D = Pitch_PID.getD();
 8002faa:	485e      	ldr	r0, [pc, #376]	; (8003124 <main+0x151c>)
 8002fac:	f001 fc10 	bl	80047d0 <_ZN3Pid4getDEv>
 8002fb0:	eef0 7a40 	vmov.f32	s15, s0
 8002fb4:	4b67      	ldr	r3, [pc, #412]	; (8003154 <main+0x154c>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]

		   	  yaw_P = Yaw_PID.getP();
 8002fba:	485f      	ldr	r0, [pc, #380]	; (8003138 <main+0x1530>)
 8002fbc:	f001 fbea 	bl	8004794 <_ZN3Pid4getPEv>
 8002fc0:	eef0 7a40 	vmov.f32	s15, s0
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <main+0x1550>)
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
		   	  yaw_I = Yaw_PID.getI();
 8002fca:	485b      	ldr	r0, [pc, #364]	; (8003138 <main+0x1530>)
 8002fcc:	f001 fbf1 	bl	80047b2 <_ZN3Pid4getIEv>
 8002fd0:	eef0 7a40 	vmov.f32	s15, s0
 8002fd4:	4b61      	ldr	r3, [pc, #388]	; (800315c <main+0x1554>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
//
		   	  roll_gyro   =  gyro_X();
 8002fda:	f001 fa27 	bl	800442c <gyro_X>
 8002fde:	eef0 7a40 	vmov.f32	s15, s0
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <main+0x1558>)
 8002fe4:	edc3 7a00 	vstr	s15, [r3]
		      roll_gyro_f =  filter_X.Pt1_filter(gyro_X());
 8002fe8:	f001 fa20 	bl	800442c <gyro_X>
 8002fec:	eef0 7a40 	vmov.f32	s15, s0
 8002ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff4:	4841      	ldr	r0, [pc, #260]	; (80030fc <main+0x14f4>)
 8002ff6:	f7fe fde0 	bl	8001bba <_ZN6filter10Pt1_filterEf>
 8002ffa:	eef0 7a40 	vmov.f32	s15, s0
 8002ffe:	4b59      	ldr	r3, [pc, #356]	; (8003164 <main+0x155c>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
		      roll_Dgyro_f = filter_Dterm_X.Biquad_filter(gyro_X());
 8003004:	f001 fa12 	bl	800442c <gyro_X>
 8003008:	eef0 7a40 	vmov.f32	s15, s0
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	483b      	ldr	r0, [pc, #236]	; (8003100 <main+0x14f8>)
 8003012:	f7fe fd85 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <main+0x1560>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_RC_f   =  filter_RC_roll.Biquad_filter(Roll_setpoint);
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <main+0x14ec>)
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	4833      	ldr	r0, [pc, #204]	; (80030f8 <main+0x14f0>)
 800302c:	f7fe fd78 	bl	8001b20 <_ZN6filter13Biquad_filterEf>
 8003030:	eef0 7a40 	vmov.f32	s15, s0
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <main+0x1564>)
 8003036:	edc3 7a00 	vstr	s15, [r3]

		   	  roll_error  =  Roll_PID.getError();
 800303a:	4834      	ldr	r0, [pc, #208]	; (800310c <main+0x1504>)
 800303c:	f001 fb9b 	bl	8004776 <_ZN3Pid8getErrorEv>
 8003040:	eef0 7a40 	vmov.f32	s15, s0
 8003044:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <main+0x1568>)
 8003046:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_P_part =  Roll_PID.getP_part();
 800304a:	4830      	ldr	r0, [pc, #192]	; (800310c <main+0x1504>)
 800304c:	f001 fbcf 	bl	80047ee <_ZN3Pid9getP_partEv>
 8003050:	eef0 7a40 	vmov.f32	s15, s0
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <main+0x156c>)
 8003056:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_I_part =  Roll_PID.getI_part();
 800305a:	482c      	ldr	r0, [pc, #176]	; (800310c <main+0x1504>)
 800305c:	f001 fbd6 	bl	800480c <_ZN3Pid9getI_partEv>
 8003060:	eef0 7a40 	vmov.f32	s15, s0
 8003064:	4b44      	ldr	r3, [pc, #272]	; (8003178 <main+0x1570>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_D_part =  Roll_PID.getD_part();
 800306a:	4828      	ldr	r0, [pc, #160]	; (800310c <main+0x1504>)
 800306c:	f001 fbdd 	bl	800482a <_ZN3Pid9getD_partEv>
 8003070:	eef0 7a40 	vmov.f32	s15, s0
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <main+0x1574>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_Dterm  =  Roll_PID.getDterm();
 800307a:	4824      	ldr	r0, [pc, #144]	; (800310c <main+0x1504>)
 800307c:	f001 fbf3 	bl	8004866 <_ZN3Pid8getDtermEv>
 8003080:	eef0 7a40 	vmov.f32	s15, s0
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <main+0x1578>)
 8003086:	edc3 7a00 	vstr	s15, [r3]
		   	  roll_PID_sum = Roll_PID.get_PIDsum();
 800308a:	4820      	ldr	r0, [pc, #128]	; (800310c <main+0x1504>)
 800308c:	f001 fbdc 	bl	8004848 <_ZN3Pid10get_PIDsumEv>
 8003090:	eef0 7a40 	vmov.f32	s15, s0
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <main+0x157c>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
//
		   	  Level_P         = ROLL_SP.get_Level_P();
 800309a:	483b      	ldr	r0, [pc, #236]	; (8003188 <main+0x1580>)
 800309c:	f7fe f811 	bl	80010c2 <_ZN7RC_rate11get_Level_PEv>
 80030a0:	eef0 7a40 	vmov.f32	s15, s0
 80030a4:	4b39      	ldr	r3, [pc, #228]	; (800318c <main+0x1584>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]
		   	  max_level_angle = ROLL_SP.get_MaxAngle();
 80030aa:	4837      	ldr	r0, [pc, #220]	; (8003188 <main+0x1580>)
 80030ac:	f7fe f827 	bl	80010fe <_ZN7RC_rate12get_MaxAngleEv>
 80030b0:	eef0 7a40 	vmov.f32	s15, s0
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <main+0x1588>)
 80030b6:	edc3 7a00 	vstr	s15, [r3]
		   	  RC_rate_scale   = ROLL_SP.get_RC_rate();
 80030ba:	4833      	ldr	r0, [pc, #204]	; (8003188 <main+0x1580>)
 80030bc:	f7fe f83d 	bl	800113a <_ZN7RC_rate11get_RC_rateEv>
 80030c0:	eef0 7a40 	vmov.f32	s15, s0
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <main+0x158c>)
 80030c6:	edc3 7a00 	vstr	s15, [r3]


// --------------------------------------------------- BATTERY WARRNING --------------------------------------------------

	         if (Batt_av < 1440 && Batt_av > 1200)
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <main+0x1590>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80030d2:	d263      	bcs.n	800319c <main+0x1594>
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <main+0x1590>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80030dc:	d95e      	bls.n	800319c <main+0x1594>
	        	 {
	        	 error_signal(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f7fe f83a 	bl	8001158 <error_signal>
	    	 	 buzzer_signal(1, 500);
 80030e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7fe f8e5 	bl	80012b8 <buzzer_signal>
 80030ee:	e05d      	b.n	80031ac <main+0x15a4>
 80030f0:	200008f8 	.word	0x200008f8
 80030f4:	200008f0 	.word	0x200008f0
 80030f8:	20000598 	.word	0x20000598
 80030fc:	20000358 	.word	0x20000358
 8003100:	20000478 	.word	0x20000478
 8003104:	200008d8 	.word	0x200008d8
 8003108:	20000000 	.word	0x20000000
 800310c:	2000028c 	.word	0x2000028c
 8003110:	200008e4 	.word	0x200008e4
 8003114:	200008f4 	.word	0x200008f4
 8003118:	200005f8 	.word	0x200005f8
 800311c:	200003b8 	.word	0x200003b8
 8003120:	200004d8 	.word	0x200004d8
 8003124:	200002bc 	.word	0x200002bc
 8003128:	200008e8 	.word	0x200008e8
 800312c:	20000658 	.word	0x20000658
 8003130:	20000418 	.word	0x20000418
 8003134:	20000538 	.word	0x20000538
 8003138:	200002ec 	.word	0x200002ec
 800313c:	200008ec 	.word	0x200008ec
 8003140:	200008fc 	.word	0x200008fc
 8003144:	20000900 	.word	0x20000900
 8003148:	20000904 	.word	0x20000904
 800314c:	20000908 	.word	0x20000908
 8003150:	2000090c 	.word	0x2000090c
 8003154:	20000910 	.word	0x20000910
 8003158:	20000914 	.word	0x20000914
 800315c:	20000918 	.word	0x20000918
 8003160:	20000928 	.word	0x20000928
 8003164:	20000930 	.word	0x20000930
 8003168:	20000934 	.word	0x20000934
 800316c:	20000944 	.word	0x20000944
 8003170:	2000092c 	.word	0x2000092c
 8003174:	2000091c 	.word	0x2000091c
 8003178:	20000920 	.word	0x20000920
 800317c:	20000924 	.word	0x20000924
 8003180:	20000938 	.word	0x20000938
 8003184:	2000093c 	.word	0x2000093c
 8003188:	2000031c 	.word	0x2000031c
 800318c:	20000954 	.word	0x20000954
 8003190:	2000095c 	.word	0x2000095c
 8003194:	20000958 	.word	0x20000958
 8003198:	2000096e 	.word	0x2000096e
	        	 }
	         else {
	        	 error_signal(0);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fd ffdb 	bl	8001158 <error_signal>
	    	 	 buzzer_signal(0, 500);
 80031a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fe f886 	bl	80012b8 <buzzer_signal>


// --------------------------------------------------- MOTOR and ESC control --------------------------------------------------


	 	     control_motors(idle_speed);
 80031ac:	f240 401a 	movw	r0, #1050	; 0x41a
 80031b0:	f7fe fb06 	bl	80017c0 <control_motors>


	         if (armed_s() == 1){
 80031b4:	f7fe fb66 	bl	8001884 <armed_s>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 815f 	beq.w	8003488 <main+0x1880>

	 	        throttle = throttle_ch() + start_speed();
 80031ca:	f7fd fe3d 	bl	8000e48 <throttle_ch>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461c      	mov	r4, r3
 80031d2:	f7fe fb4b 	bl	800186c <start_speed>
 80031d6:	4603      	mov	r3, r0
 80031d8:	b29b      	uxth	r3, r3
 80031da:	4423      	add	r3, r4
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4ba0      	ldr	r3, [pc, #640]	; (8003460 <main+0x1858>)
 80031e0:	801a      	strh	r2, [r3, #0]

		 	    if (throttle > 1860)throttle = 1860;
 80031e2:	4b9f      	ldr	r3, [pc, #636]	; (8003460 <main+0x1858>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	f240 7244 	movw	r2, #1860	; 0x744
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d903      	bls.n	80031f6 <main+0x15ee>
 80031ee:	4b9c      	ldr	r3, [pc, #624]	; (8003460 <main+0x1858>)
 80031f0:	f240 7244 	movw	r2, #1860	; 0x744
 80031f4:	801a      	strh	r2, [r3, #0]

		 	      esc_1 = throttle - Pitch_PID_out + Roll_PID_out - Yaw_PID_out;        //L_F
 80031f6:	4b9a      	ldr	r3, [pc, #616]	; (8003460 <main+0x1858>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003202:	4b98      	ldr	r3, [pc, #608]	; (8003464 <main+0x185c>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800320c:	4b96      	ldr	r3, [pc, #600]	; (8003468 <main+0x1860>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003216:	4b95      	ldr	r3, [pc, #596]	; (800346c <main+0x1864>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003224:	ee17 3a90 	vmov	r3, s15
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b91      	ldr	r3, [pc, #580]	; (8003470 <main+0x1868>)
 800322c:	801a      	strh	r2, [r3, #0]
		 	      esc_2 = throttle + Pitch_PID_out + Roll_PID_out + Yaw_PID_out;        //L_B
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <main+0x1858>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800323a:	4b8a      	ldr	r3, [pc, #552]	; (8003464 <main+0x185c>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003244:	4b88      	ldr	r3, [pc, #544]	; (8003468 <main+0x1860>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800324e:	4b87      	ldr	r3, [pc, #540]	; (800346c <main+0x1864>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b84      	ldr	r3, [pc, #528]	; (8003474 <main+0x186c>)
 8003264:	801a      	strh	r2, [r3, #0]
		 	      esc_3 = throttle + Pitch_PID_out - Roll_PID_out - Yaw_PID_out;        //R_B
 8003266:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <main+0x1858>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003272:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <main+0x185c>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800327c:	4b7a      	ldr	r3, [pc, #488]	; (8003468 <main+0x1860>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003286:	4b79      	ldr	r3, [pc, #484]	; (800346c <main+0x1864>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003294:	ee17 3a90 	vmov	r3, s15
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b77      	ldr	r3, [pc, #476]	; (8003478 <main+0x1870>)
 800329c:	801a      	strh	r2, [r3, #0]
		 	      esc_4 = throttle - Pitch_PID_out - Roll_PID_out + Yaw_PID_out;        //R_F
 800329e:	4b70      	ldr	r3, [pc, #448]	; (8003460 <main+0x1858>)
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032aa:	4b6e      	ldr	r3, [pc, #440]	; (8003464 <main+0x185c>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032b4:	4b6c      	ldr	r3, [pc, #432]	; (8003468 <main+0x1860>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032be:	4b6b      	ldr	r3, [pc, #428]	; (800346c <main+0x1864>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032cc:	ee17 3a90 	vmov	r3, s15
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <main+0x1874>)
 80032d4:	801a      	strh	r2, [r3, #0]

			 	if (Batt_av < 1700 && Batt_av > 1200) {
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <main+0x1878>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80032de:	4293      	cmp	r3, r2
 80032e0:	d870      	bhi.n	80033c4 <main+0x17bc>
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <main+0x1878>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80032ea:	d96b      	bls.n	80033c4 <main+0x17bc>
			 	  esc_1 += (1600 - Batt_av) * battery_compensation;
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <main+0x1868>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032f8:	4b61      	ldr	r3, [pc, #388]	; (8003480 <main+0x1878>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003300:	ee07 3a90 	vmov	s15, r3
 8003304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003308:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003484 <main+0x187c>
 800330c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003318:	ee17 3a90 	vmov	r3, s15
 800331c:	b29a      	uxth	r2, r3
 800331e:	4b54      	ldr	r3, [pc, #336]	; (8003470 <main+0x1868>)
 8003320:	801a      	strh	r2, [r3, #0]
			 	  esc_2 += (1600 - Batt_av) * battery_compensation;
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <main+0x186c>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800332e:	4b54      	ldr	r3, [pc, #336]	; (8003480 <main+0x1878>)
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800333e:	eddf 6a51 	vldr	s13, [pc, #324]	; 8003484 <main+0x187c>
 8003342:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334e:	ee17 3a90 	vmov	r3, s15
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b47      	ldr	r3, [pc, #284]	; (8003474 <main+0x186c>)
 8003356:	801a      	strh	r2, [r3, #0]
			 	  esc_3 += (1600 - Batt_av) * battery_compensation;
 8003358:	4b47      	ldr	r3, [pc, #284]	; (8003478 <main+0x1870>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <main+0x1878>)
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003374:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003484 <main+0x187c>
 8003378:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003384:	ee17 3a90 	vmov	r3, s15
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <main+0x1870>)
 800338c:	801a      	strh	r2, [r3, #0]
			 	  esc_4 += (1600 - Batt_av) * battery_compensation;
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <main+0x1874>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <main+0x1878>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033aa:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003484 <main+0x187c>
 80033ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ba:	ee17 3a90 	vmov	r3, s15
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b2e      	ldr	r3, [pc, #184]	; (800347c <main+0x1874>)
 80033c2:	801a      	strh	r2, [r3, #0]
			 	     }

		 	    if (esc_1 > 2000)esc_1 = 2000;
 80033c4:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <main+0x1868>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033cc:	d903      	bls.n	80033d6 <main+0x17ce>
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <main+0x1868>)
 80033d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033d4:	801a      	strh	r2, [r3, #0]
		 	    if (esc_2 > 2000)esc_2 = 2000;
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <main+0x186c>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033de:	d903      	bls.n	80033e8 <main+0x17e0>
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <main+0x186c>)
 80033e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033e6:	801a      	strh	r2, [r3, #0]
		 	    if (esc_3 > 2000)esc_3 = 2000;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <main+0x1870>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033f0:	d903      	bls.n	80033fa <main+0x17f2>
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <main+0x1870>)
 80033f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033f8:	801a      	strh	r2, [r3, #0]
		 	    if (esc_4 > 2000)esc_4 = 2000;
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <main+0x1874>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003402:	d903      	bls.n	800340c <main+0x1804>
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <main+0x1874>)
 8003406:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800340a:	801a      	strh	r2, [r3, #0]

		 	    if (esc_1 < idle_speed)esc_1 = idle_speed;
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <main+0x1868>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	f240 4219 	movw	r2, #1049	; 0x419
 8003414:	4293      	cmp	r3, r2
 8003416:	d803      	bhi.n	8003420 <main+0x1818>
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <main+0x1868>)
 800341a:	f240 421a 	movw	r2, #1050	; 0x41a
 800341e:	801a      	strh	r2, [r3, #0]
		 	    if (esc_2 < idle_speed)esc_2 = idle_speed;
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <main+0x186c>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f240 4219 	movw	r2, #1049	; 0x419
 8003428:	4293      	cmp	r3, r2
 800342a:	d803      	bhi.n	8003434 <main+0x182c>
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <main+0x186c>)
 800342e:	f240 421a 	movw	r2, #1050	; 0x41a
 8003432:	801a      	strh	r2, [r3, #0]
		 	    if (esc_3 < idle_speed)esc_3 = idle_speed;
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <main+0x1870>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	f240 4219 	movw	r2, #1049	; 0x419
 800343c:	4293      	cmp	r3, r2
 800343e:	d803      	bhi.n	8003448 <main+0x1840>
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <main+0x1870>)
 8003442:	f240 421a 	movw	r2, #1050	; 0x41a
 8003446:	801a      	strh	r2, [r3, #0]
		 	    if (esc_4 < idle_speed)esc_4 = idle_speed;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <main+0x1874>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f240 4219 	movw	r2, #1049	; 0x419
 8003450:	4293      	cmp	r3, r2
 8003452:	d832      	bhi.n	80034ba <main+0x18b2>
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <main+0x1874>)
 8003456:	f240 421a 	movw	r2, #1050	; 0x41a
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	e02d      	b.n	80034ba <main+0x18b2>
 800345e:	bf00      	nop
 8003460:	20000960 	.word	0x20000960
 8003464:	200008e8 	.word	0x200008e8
 8003468:	200008e4 	.word	0x200008e4
 800346c:	200008ec 	.word	0x200008ec
 8003470:	20000002 	.word	0x20000002
 8003474:	20000004 	.word	0x20000004
 8003478:	20000006 	.word	0x20000006
 800347c:	20000008 	.word	0x20000008
 8003480:	2000096e 	.word	0x2000096e
 8003484:	3e19999a 	.word	0x3e19999a

	         }
	         else {

	         	Roll_PID.resetPID();
 8003488:	4832      	ldr	r0, [pc, #200]	; (8003554 <main+0x194c>)
 800348a:	f001 f92d 	bl	80046e8 <_ZN3Pid8resetPIDEv>
	         	Pitch_PID.resetPID();
 800348e:	4832      	ldr	r0, [pc, #200]	; (8003558 <main+0x1950>)
 8003490:	f001 f92a 	bl	80046e8 <_ZN3Pid8resetPIDEv>
	         	Yaw_PID.resetPID();
 8003494:	4831      	ldr	r0, [pc, #196]	; (800355c <main+0x1954>)
 8003496:	f001 f927 	bl	80046e8 <_ZN3Pid8resetPIDEv>

		 	      esc_1 = 1000;
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <main+0x1958>)
 800349c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a0:	801a      	strh	r2, [r3, #0]
		 	      esc_2 = 1000;
 80034a2:	4b30      	ldr	r3, [pc, #192]	; (8003564 <main+0x195c>)
 80034a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034a8:	801a      	strh	r2, [r3, #0]
		 	      esc_3 = 1000;
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <main+0x1960>)
 80034ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b0:	801a      	strh	r2, [r3, #0]
		 	      esc_4 = 1000;
 80034b2:	4b2e      	ldr	r3, [pc, #184]	; (800356c <main+0x1964>)
 80034b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b8:	801a      	strh	r2, [r3, #0]
	         }

//	 		  esc_counter++;
//	 		  if (esc_counter == 2){

	           TIM16->CCR1 = esc_1;  // modulating the pulse width
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <main+0x1958>)
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <main+0x1968>)
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
	           TIM17->CCR1 = esc_2;
 80034c2:	4b28      	ldr	r3, [pc, #160]	; (8003564 <main+0x195c>)
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <main+0x196c>)
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
	           TIM4->CCR1  = esc_3;  // modulating the pulse width
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <main+0x1960>)
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <main+0x1970>)
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
	           TIM4->CCR2  = esc_4;
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <main+0x1964>)
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <main+0x1970>)
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
//	           TIM4->CCR3 = esc_3;
//	           TIM4->CCR4 = esc_4;
	           TIM4->CNT  = 5000 - 1; // ARR   // 400 Hz 2 ms pulse high and 0.5ms pulse low*/
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <main+0x1970>)
 80034dc:	f241 3287 	movw	r2, #4999	; 0x1387
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
	           TIM16->CNT = 5000 - 1;
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <main+0x1968>)
 80034e4:	f241 3287 	movw	r2, #4999	; 0x1387
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
	           TIM17->CNT = 5000 - 1;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <main+0x196c>)
 80034ec:	f241 3287 	movw	r2, #4999	; 0x1387
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

//	          esc_counter = 0;
//	        	  }


      Elapsed_time = (float) (DWT->CYCCNT - S_cycle) / 72000000.0;
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <main+0x1974>)
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <main+0x1978>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003504:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003584 <main+0x197c>
 8003508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <main+0x1980>)
 800350e:	edc3 7a00 	vstr	s15, [r3]
      while((DWT->CYCCNT - S_cycle) < 150000); // 150.000  480 Hz   - for 1khz = 1.045ms
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <main+0x1974>)
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <main+0x1978>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <main+0x1984>)
 800351e:	4293      	cmp	r3, r2
 8003520:	bf94      	ite	ls
 8003522:	2301      	movls	r3, #1
 8003524:	2300      	movhi	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d000      	beq.n	800352e <main+0x1926>
 800352c:	e7f1      	b.n	8003512 <main+0x190a>
      Loop_time = (float) (DWT->CYCCNT - S_cycle ) / 72000000.0;
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <main+0x1974>)
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <main+0x1978>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003540:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003584 <main+0x197c>
 8003544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <main+0x1988>)
 800354a:	edc3 7a00 	vstr	s15, [r3]
	  S_cycle = DWT->CYCCNT;
 800354e:	f7fe bc68 	b.w	8001e22 <main+0x21a>
 8003552:	bf00      	nop
 8003554:	2000028c 	.word	0x2000028c
 8003558:	200002bc 	.word	0x200002bc
 800355c:	200002ec 	.word	0x200002ec
 8003560:	20000002 	.word	0x20000002
 8003564:	20000004 	.word	0x20000004
 8003568:	20000006 	.word	0x20000006
 800356c:	20000008 	.word	0x20000008
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	40000800 	.word	0x40000800
 800357c:	e0001000 	.word	0xe0001000
 8003580:	200008d4 	.word	0x200008d4
 8003584:	4c895440 	.word	0x4c895440
 8003588:	200008dc 	.word	0x200008dc
 800358c:	000249ef 	.word	0x000249ef
 8003590:	200008d8 	.word	0x200008d8

08003594 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b09e      	sub	sp, #120	; 0x78
 8003598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800359e:	2228      	movs	r2, #40	; 0x28
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f009 f9bc 	bl	800c920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035b8:	463b      	mov	r3, r7
 80035ba:	223c      	movs	r2, #60	; 0x3c
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f009 f9ae 	bl	800c920 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80035c4:	2303      	movs	r3, #3
 80035c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035ce:	2300      	movs	r3, #0
 80035d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035d2:	2301      	movs	r3, #1
 80035d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035d6:	2310      	movs	r3, #16
 80035d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035da:	2302      	movs	r3, #2
 80035dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035e2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80035e8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 ff32 	bl	8007458 <HAL_RCC_OscConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8003604:	f000 fc32 	bl	8003e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003608:	230f      	movs	r3, #15
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800360c:	2302      	movs	r3, #2
 800360e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003610:	2300      	movs	r3, #0
 8003612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003618:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800361a:	2300      	movs	r3, #0
 800361c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800361e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f004 fe1f 	bl	8008268 <HAL_RCC_ClockConfig>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800363a:	f000 fc17 	bl	8003e6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800363e:	2322      	movs	r3, #34	; 0x22
 8003640:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800364a:	463b      	mov	r3, r7
 800364c:	4618      	mov	r0, r3
 800364e:	f005 f841 	bl	80086d4 <HAL_RCCEx_PeriphCLKConfig>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003662:	f000 fc03 	bl	8003e6c <Error_Handler>
  }
}
 8003666:	bf00      	nop
 8003668:	3778      	adds	r7, #120	; 0x78
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003676:	463b      	mov	r3, r7
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
 8003684:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 8003688:	4a2c      	ldr	r2, [pc, #176]	; (800373c <_ZL12MX_ADC2_Initv+0xcc>)
 800368a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800368c:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 800368e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003692:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ce:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036d0:	2204      	movs	r2, #4
 80036d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036e0:	4815      	ldr	r0, [pc, #84]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 80036e2:	f001 fcf5 	bl	80050d0 <HAL_ADC_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <_ZL12MX_ADC2_Initv+0x8a>
  {
    Error_Handler();
 80036f6:	f000 fbb9 	bl	8003e6c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80036fa:	2301      	movs	r3, #1
 80036fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036fe:	2301      	movs	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003712:	463b      	mov	r3, r7
 8003714:	4619      	mov	r1, r3
 8003716:	4808      	ldr	r0, [pc, #32]	; (8003738 <_ZL12MX_ADC2_Initv+0xc8>)
 8003718:	f002 f90e 	bl	8005938 <HAL_ADC_ConfigChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <_ZL12MX_ADC2_Initv+0xc0>
  {
    Error_Handler();
 800372c:	f000 fb9e 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200006b8 	.word	0x200006b8
 800373c:	50000100 	.word	0x50000100

08003740 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <_ZL12MX_I2C1_Initv+0x98>)
 8003748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 800374c:	f240 220b 	movw	r2, #523	; 0x20b
 8003750:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 800375a:	2201      	movs	r2, #1
 800375c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800377c:	4815      	ldr	r0, [pc, #84]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 800377e:	f002 fff1 	bl	8006764 <HAL_I2C_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8003792:	f000 fb6b 	bl	8003e6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003796:	2100      	movs	r1, #0
 8003798:	480e      	ldr	r0, [pc, #56]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 800379a:	f003 fdc5 	bl	8007328 <HAL_I2CEx_ConfigAnalogFilter>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <_ZL12MX_I2C1_Initv+0x72>
  {
    Error_Handler();
 80037ae:	f000 fb5d 	bl	8003e6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037b2:	2100      	movs	r1, #0
 80037b4:	4807      	ldr	r0, [pc, #28]	; (80037d4 <_ZL12MX_I2C1_Initv+0x94>)
 80037b6:	f003 fe02 	bl	80073be <HAL_I2CEx_ConfigDigitalFilter>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <_ZL12MX_I2C1_Initv+0x8e>
  {
    Error_Handler();
 80037ca:	f000 fb4f 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000708 	.word	0x20000708
 80037d8:	40005400 	.word	0x40005400

080037dc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <_ZL12MX_SPI2_Initv+0x80>)
 80037e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 80037e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 80037f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003812:	2200      	movs	r2, #0
 8003814:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003818:	2200      	movs	r2, #0
 800381a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 800381e:	2200      	movs	r2, #0
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003824:	2200      	movs	r2, #0
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 800382a:	2207      	movs	r2, #7
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 8003836:	2200      	movs	r2, #0
 8003838:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800383a:	4807      	ldr	r0, [pc, #28]	; (8003858 <_ZL12MX_SPI2_Initv+0x7c>)
 800383c:	f005 f8fa 	bl	8008a34 <HAL_SPI_Init>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8003850:	f000 fb0c 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000228 	.word	0x20000228
 800385c:	40003800 	.word	0x40003800

08003860 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 8003880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 8003888:	2247      	movs	r2, #71	; 0x47
 800388a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 8003894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003898:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800389a:	4b21      	ldr	r3, [pc, #132]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80038a6:	481e      	ldr	r0, [pc, #120]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 80038a8:	f005 fa04 	bl	8008cb4 <HAL_TIM_IC_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80038bc:	f000 fad6 	bl	8003e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	4814      	ldr	r0, [pc, #80]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 80038d0:	f006 f9da 	bl	8009c88 <HAL_TIMEx_MasterConfigSynchronization>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80038e4:	f000 fac2 	bl	8003e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038e8:	2300      	movs	r3, #0
 80038ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038ec:	2301      	movs	r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 10;
 80038f4:	230a      	movs	r3, #10
 80038f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2200      	movs	r2, #0
 80038fc:	4619      	mov	r1, r3
 80038fe:	4808      	ldr	r0, [pc, #32]	; (8003920 <_ZL12MX_TIM2_Initv+0xc0>)
 8003900:	f005 fc10 	bl	8009124 <HAL_TIM_IC_ConfigChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8003914:	f000 faaa 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003918:	bf00      	nop
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000754 	.word	0x20000754

08003924 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800392a:	f107 031c 	add.w	r3, r7, #28
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003936:	463b      	mov	r3, r7
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	611a      	str	r2, [r3, #16]
 8003944:	615a      	str	r2, [r3, #20]
 8003946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003948:	4b51      	ldr	r3, [pc, #324]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 800394a:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <_ZL12MX_TIM4_Initv+0x170>)
 800394c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800394e:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003950:	2247      	movs	r2, #71	; 0x47
 8003952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003954:	4b4e      	ldr	r3, [pc, #312]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 800395a:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 800395c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003962:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003968:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800396e:	4848      	ldr	r0, [pc, #288]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003970:	f005 f91d 	bl	8008bae <HAL_TIM_OC_Init>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <_ZL12MX_TIM4_Initv+0x64>
  {
    Error_Handler();
 8003984:	f000 fa72 	bl	8003e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4619      	mov	r1, r3
 8003996:	483e      	ldr	r0, [pc, #248]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003998:	f006 f976 	bl	8009c88 <HAL_TIMEx_MasterConfigSynchronization>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <_ZL12MX_TIM4_Initv+0x8c>
  {
    Error_Handler();
 80039ac:	f000 fa5e 	bl	8003e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80039b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039c2:	463b      	mov	r3, r7
 80039c4:	2200      	movs	r2, #0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4831      	ldr	r0, [pc, #196]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 80039ca:	f005 fb2d 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <_ZL12MX_TIM4_Initv+0xbe>
  {
    Error_Handler();
 80039de:	f000 fa45 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0208 	orr.w	r2, r2, #8
 80039f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039f2:	463b      	mov	r3, r7
 80039f4:	2204      	movs	r2, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4825      	ldr	r0, [pc, #148]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 80039fa:	f005 fb15 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <_ZL12MX_TIM4_Initv+0xee>
  {
    Error_Handler();
 8003a0e:	f000 fa2d 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 8003a12:	4b1f      	ldr	r3, [pc, #124]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a22:	463b      	mov	r3, r7
 8003a24:	2208      	movs	r2, #8
 8003a26:	4619      	mov	r1, r3
 8003a28:	4819      	ldr	r0, [pc, #100]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a2a:	f005 fafd 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <_ZL12MX_TIM4_Initv+0x11e>
  {
    Error_Handler();
 8003a3e:	f000 fa15 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_3);
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	61da      	str	r2, [r3, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a52:	463b      	mov	r3, r7
 8003a54:	220c      	movs	r2, #12
 8003a56:	4619      	mov	r1, r3
 8003a58:	480d      	ldr	r0, [pc, #52]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a5a:	f005 fae5 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <_ZL12MX_TIM4_Initv+0x14e>
  {
    Error_Handler();
 8003a6e:	f000 f9fd 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a80:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a82:	4803      	ldr	r0, [pc, #12]	; (8003a90 <_ZL12MX_TIM4_Initv+0x16c>)
 8003a84:	f001 f884 	bl	8004b90 <HAL_TIM_MspPostInit>

}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000794 	.word	0x20000794
 8003a94:	40000800 	.word	0x40000800

08003a98 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b092      	sub	sp, #72	; 0x48
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	615a      	str	r2, [r3, #20]
 8003ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab2:	463b      	mov	r3, r7
 8003ab4:	222c      	movs	r2, #44	; 0x2c
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 ff31 	bl	800c920 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003abe:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ac0:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <_ZL13MX_TIM16_Initv+0x128>)
 8003ac2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8003ac4:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ac6:	2247      	movs	r2, #71	; 0x47
 8003ac8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aca:	4b3c      	ldr	r3, [pc, #240]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 5000-1;
 8003ad0:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ad2:	f241 3287 	movw	r2, #4999	; 0x1387
 8003ad6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad8:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ade:	4b37      	ldr	r3, [pc, #220]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ae4:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003aea:	4834      	ldr	r0, [pc, #208]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003aec:	f005 f834 	bl	8008b58 <HAL_TIM_Base_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf14      	ite	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	2300      	moveq	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <_ZL13MX_TIM16_Initv+0x6c>
  {
    Error_Handler();
 8003b00:	f000 f9b4 	bl	8003e6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8003b04:	482d      	ldr	r0, [pc, #180]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003b06:	f005 f852 	bl	8008bae <HAL_TIM_OC_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <_ZL13MX_TIM16_Initv+0x86>
  {
    Error_Handler();
 8003b1a:	f000 f9a7 	bl	8003e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 8003b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b40:	2200      	movs	r2, #0
 8003b42:	4619      	mov	r1, r3
 8003b44:	481d      	ldr	r0, [pc, #116]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003b46:	f005 fa6f 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <_ZL13MX_TIM16_Initv+0xc6>
  {
    Error_Handler();
 8003b5a:	f000 f987 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8003b5e:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003b90:	463b      	mov	r3, r7
 8003b92:	4619      	mov	r1, r3
 8003b94:	4809      	ldr	r0, [pc, #36]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003b96:	f006 f8f7 	bl	8009d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <_ZL13MX_TIM16_Initv+0x116>
  {
    Error_Handler();
 8003baa:	f000 f95f 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003bae:	4803      	ldr	r0, [pc, #12]	; (8003bbc <_ZL13MX_TIM16_Initv+0x124>)
 8003bb0:	f000 ffee 	bl	8004b90 <HAL_TIM_MspPostInit>

}
 8003bb4:	bf00      	nop
 8003bb6:	3748      	adds	r7, #72	; 0x48
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	200007d4 	.word	0x200007d4
 8003bc0:	40014400 	.word	0x40014400

08003bc4 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b092      	sub	sp, #72	; 0x48
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	615a      	str	r2, [r3, #20]
 8003bdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003bde:	463b      	mov	r3, r7
 8003be0:	222c      	movs	r2, #44	; 0x2c
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 fe9b 	bl	800c920 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003bec:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <_ZL13MX_TIM17_Initv+0x128>)
 8003bee:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72-1;
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003bf2:	2247      	movs	r2, #71	; 0x47
 8003bf4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 8003bfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003bfe:	f241 3287 	movw	r2, #4999	; 0x1387
 8003c02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c04:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c10:	4b35      	ldr	r3, [pc, #212]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003c16:	4834      	ldr	r0, [pc, #208]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c18:	f004 ff9e 	bl	8008b58 <HAL_TIM_Base_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <_ZL13MX_TIM17_Initv+0x6c>
  {
    Error_Handler();
 8003c2c:	f000 f91e 	bl	8003e6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8003c30:	482d      	ldr	r0, [pc, #180]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c32:	f004 ffbc 	bl	8008bae <HAL_TIM_OC_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <_ZL13MX_TIM17_Initv+0x86>
  {
    Error_Handler();
 8003c46:	f000 f911 	bl	8003e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 8003c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c54:	2300      	movs	r3, #0
 8003c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	4619      	mov	r1, r3
 8003c70:	481d      	ldr	r0, [pc, #116]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c72:	f005 f9d9 	bl	8009028 <HAL_TIM_OC_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <_ZL13MX_TIM17_Initv+0xc6>
  {
    Error_Handler();
 8003c86:	f000 f8f1 	bl	8003e6c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0208 	orr.w	r2, r2, #8
 8003c98:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4809      	ldr	r0, [pc, #36]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003cc2:	f006 f861 	bl	8009d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <_ZL13MX_TIM17_Initv+0x116>
  {
    Error_Handler();
 8003cd6:	f000 f8c9 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003cda:	4803      	ldr	r0, [pc, #12]	; (8003ce8 <_ZL13MX_TIM17_Initv+0x124>)
 8003cdc:	f000 ff58 	bl	8004b90 <HAL_TIM_MspPostInit>

}
 8003ce0:	bf00      	nop
 8003ce2:	3748      	adds	r7, #72	; 0x48
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000814 	.word	0x20000814
 8003cec:	40014800 	.word	0x40014800

08003cf0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cf4:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <_ZL19MX_USART2_UART_Initv+0x64>)
 8003cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003cfc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d16:	220c      	movs	r2, #12
 8003d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d32:	4807      	ldr	r0, [pc, #28]	; (8003d50 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003d34:	f006 f8c4 	bl	8009ec0 <HAL_UART_Init>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8003d48:	f000 f890 	bl	8003e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000854 	.word	0x20000854
 8003d54:	40004400 	.word	0x40004400

08003d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5e:	f107 0314 	add.w	r3, r7, #20
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d78:	6153      	str	r3, [r2, #20]
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d86:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d90:	6153      	str	r3, [r2, #20]
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	6153      	str	r3, [r2, #20]
 8003daa:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db6:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6153      	str	r3, [r2, #20]
 8003dc2:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <_ZL12MX_GPIO_Initv+0x108>)
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|zzub_Pin, GPIO_PIN_RESET);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003dd4:	4823      	ldr	r0, [pc, #140]	; (8003e64 <_ZL12MX_GPIO_Initv+0x10c>)
 8003dd6:	f002 fc93 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2102      	movs	r1, #2
 8003dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003de2:	f002 fc8d 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Green_Pin|Blue_Pin, GPIO_PIN_RESET);
 8003de6:	2200      	movs	r2, #0
 8003de8:	f241 0130 	movw	r1, #4144	; 0x1030
 8003dec:	481e      	ldr	r0, [pc, #120]	; (8003e68 <_ZL12MX_GPIO_Initv+0x110>)
 8003dee:	f002 fc87 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003df2:	2201      	movs	r2, #1
 8003df4:	2108      	movs	r1, #8
 8003df6:	481c      	ldr	r0, [pc, #112]	; (8003e68 <_ZL12MX_GPIO_Initv+0x110>)
 8003df8:	f002 fc82 	bl	8006700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 zzub_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|zzub_Pin;
 8003dfc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	4813      	ldr	r0, [pc, #76]	; (8003e64 <_ZL12MX_GPIO_Initv+0x10c>)
 8003e16:	f002 faf9 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : Red_Pin */
  GPIO_InitStruct.Pin = Red_Pin;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Red_GPIO_Port, &GPIO_InitStruct);
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e34:	f002 faea 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 Green_Pin Blue_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|Green_Pin|Blue_Pin;
 8003e38:	f241 0338 	movw	r3, #4152	; 0x1038
 8003e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <_ZL12MX_GPIO_Initv+0x110>)
 8003e52:	f002 fadb 	bl	800640c <HAL_GPIO_Init>

}
 8003e56:	bf00      	nop
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	48000800 	.word	0x48000800
 8003e68:	48000400 	.word	0x48000400

08003e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <_Z41__static_initialization_and_destruction_0ii>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d17f      	bne.n	8003f8c <_Z41__static_initialization_and_destruction_0ii+0x110>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d17a      	bne.n	8003f8c <_Z41__static_initialization_and_destruction_0ii+0x110>
Pid Roll_PID (Roll_P, Roll_I, Roll_D, Max_roll);
 8003e96:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8004000 <_Z41__static_initialization_and_destruction_0ii+0x184>
 8003e9a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8004004 <_Z41__static_initialization_and_destruction_0ii+0x188>
 8003e9e:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8004008 <_Z41__static_initialization_and_destruction_0ii+0x18c>
 8003ea2:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 800400c <_Z41__static_initialization_and_destruction_0ii+0x190>
 8003ea6:	485a      	ldr	r0, [pc, #360]	; (8004010 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003ea8:	f000 fb34 	bl	8004514 <_ZN3PidC1Effff>
Pid Pitch_PID (Pitch_P, Pitch_I, Pitch_D, Max_pitch);
 8003eac:	eddf 1a54 	vldr	s3, [pc, #336]	; 8004000 <_Z41__static_initialization_and_destruction_0ii+0x184>
 8003eb0:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8004014 <_Z41__static_initialization_and_destruction_0ii+0x198>
 8003eb4:	eddf 0a58 	vldr	s1, [pc, #352]	; 8004018 <_Z41__static_initialization_and_destruction_0ii+0x19c>
 8003eb8:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800401c <_Z41__static_initialization_and_destruction_0ii+0x1a0>
 8003ebc:	4858      	ldr	r0, [pc, #352]	; (8004020 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8003ebe:	f000 fb29 	bl	8004514 <_ZN3PidC1Effff>
Pid Yaw_PID (Yaw_P, Yaw_I, Yaw_D, Max_yaw);
 8003ec2:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8004000 <_Z41__static_initialization_and_destruction_0ii+0x184>
 8003ec6:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8004024 <_Z41__static_initialization_and_destruction_0ii+0x1a8>
 8003eca:	eddf 0a57 	vldr	s1, [pc, #348]	; 8004028 <_Z41__static_initialization_and_destruction_0ii+0x1ac>
 8003ece:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800402c <_Z41__static_initialization_and_destruction_0ii+0x1b0>
 8003ed2:	4857      	ldr	r0, [pc, #348]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003ed4:	f000 fb1e 	bl	8004514 <_ZN3PidC1Effff>
RC_rate ROLL_SP(LEVEL_ROLL_P, MAX_ANGLE, RC_RATE);
 8003ed8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003edc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003ee0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8004034 <_Z41__static_initialization_and_destruction_0ii+0x1b8>
 8003ee4:	4854      	ldr	r0, [pc, #336]	; (8004038 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003ee6:	f7fd f885 	bl	8000ff4 <_ZN7RC_rateC1Efff>
RC_rate Pitch_SP(LEVEL_PITCH_P, MAX_ANGLE, RC_RATE);
 8003eea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003eee:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003ef2:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800403c <_Z41__static_initialization_and_destruction_0ii+0x1c0>
 8003ef6:	4852      	ldr	r0, [pc, #328]	; (8004040 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8003ef8:	f7fd f87c 	bl	8000ff4 <_ZN7RC_rateC1Efff>
RC_rate Yaw_SP(LEVEL_PITCH_P, MAX_ANGLE, RC_RATE);
 8003efc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f00:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003f04:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800403c <_Z41__static_initialization_and_destruction_0ii+0x1c0>
 8003f08:	484e      	ldr	r0, [pc, #312]	; (8004044 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003f0a:	f7fd f873 	bl	8000ff4 <_ZN7RC_rateC1Efff>
filter filter_X(Gyro_cutoff_freq, 0.002);
 8003f0e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f12:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f16:	484e      	ldr	r0, [pc, #312]	; (8004050 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003f18:	f7fd fd02 	bl	8001920 <_ZN6filterC1Eff>
filter filter_Y(Gyro_cutoff_freq, 0.002);
 8003f1c:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f20:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f24:	484b      	ldr	r0, [pc, #300]	; (8004054 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003f26:	f7fd fcfb 	bl	8001920 <_ZN6filterC1Eff>
filter filter_Z(Gyro_cutoff_freq, 0.002);
 8003f2a:	eddf 0a47 	vldr	s1, [pc, #284]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f2e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f32:	4849      	ldr	r0, [pc, #292]	; (8004058 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003f34:	f7fd fcf4 	bl	8001920 <_ZN6filterC1Eff>
filter filter_Dterm_X(Dterm_cutoff_freq, 0.002);
 8003f38:	eddf 0a43 	vldr	s1, [pc, #268]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f3c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003f40:	4846      	ldr	r0, [pc, #280]	; (800405c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003f42:	f7fd fced 	bl	8001920 <_ZN6filterC1Eff>
filter filter_Dterm_Y(Dterm_cutoff_freq, 0.002);
 8003f46:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f4a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003f4e:	4844      	ldr	r0, [pc, #272]	; (8004060 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003f50:	f7fd fce6 	bl	8001920 <_ZN6filterC1Eff>
filter filter_Dterm_Z(Dterm_cutoff_freq, 0.002);
 8003f54:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f58:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003f5c:	4841      	ldr	r0, [pc, #260]	; (8004064 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003f5e:	f7fd fcdf 	bl	8001920 <_ZN6filterC1Eff>
filter filter_RC_roll(RC_cutoff_freq, 0.002);
 8003f62:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f66:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f6a:	483f      	ldr	r0, [pc, #252]	; (8004068 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003f6c:	f7fd fcd8 	bl	8001920 <_ZN6filterC1Eff>
filter filter_RC_pitch(RC_cutoff_freq, 0.002);
 8003f70:	eddf 0a35 	vldr	s1, [pc, #212]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f74:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f78:	483c      	ldr	r0, [pc, #240]	; (800406c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003f7a:	f7fd fcd1 	bl	8001920 <_ZN6filterC1Eff>
filter filter_RC_yaw(RC_cutoff_freq, 0.002);
 8003f7e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8004048 <_Z41__static_initialization_and_destruction_0ii+0x1cc>
 8003f82:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800404c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003f86:	483a      	ldr	r0, [pc, #232]	; (8004070 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003f88:	f7fd fcca 	bl	8001920 <_ZN6filterC1Eff>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d131      	bne.n	8003ff6 <_Z41__static_initialization_and_destruction_0ii+0x17a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d12c      	bne.n	8003ff6 <_Z41__static_initialization_and_destruction_0ii+0x17a>
 8003f9c:	4834      	ldr	r0, [pc, #208]	; (8004070 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003f9e:	f7fd fc9d 	bl	80018dc <_ZN6filterD1Ev>
filter filter_RC_pitch(RC_cutoff_freq, 0.002);
 8003fa2:	4832      	ldr	r0, [pc, #200]	; (800406c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003fa4:	f7fd fc9a 	bl	80018dc <_ZN6filterD1Ev>
filter filter_RC_roll(RC_cutoff_freq, 0.002);
 8003fa8:	482f      	ldr	r0, [pc, #188]	; (8004068 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003faa:	f7fd fc97 	bl	80018dc <_ZN6filterD1Ev>
filter filter_Dterm_Z(Dterm_cutoff_freq, 0.002);
 8003fae:	482d      	ldr	r0, [pc, #180]	; (8004064 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003fb0:	f7fd fc94 	bl	80018dc <_ZN6filterD1Ev>
filter filter_Dterm_Y(Dterm_cutoff_freq, 0.002);
 8003fb4:	482a      	ldr	r0, [pc, #168]	; (8004060 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003fb6:	f7fd fc91 	bl	80018dc <_ZN6filterD1Ev>
filter filter_Dterm_X(Dterm_cutoff_freq, 0.002);
 8003fba:	4828      	ldr	r0, [pc, #160]	; (800405c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003fbc:	f7fd fc8e 	bl	80018dc <_ZN6filterD1Ev>
filter filter_Z(Gyro_cutoff_freq, 0.002);
 8003fc0:	4825      	ldr	r0, [pc, #148]	; (8004058 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003fc2:	f7fd fc8b 	bl	80018dc <_ZN6filterD1Ev>
filter filter_Y(Gyro_cutoff_freq, 0.002);
 8003fc6:	4823      	ldr	r0, [pc, #140]	; (8004054 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003fc8:	f7fd fc88 	bl	80018dc <_ZN6filterD1Ev>
filter filter_X(Gyro_cutoff_freq, 0.002);
 8003fcc:	4820      	ldr	r0, [pc, #128]	; (8004050 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003fce:	f7fd fc85 	bl	80018dc <_ZN6filterD1Ev>
RC_rate Yaw_SP(LEVEL_PITCH_P, MAX_ANGLE, RC_RATE);
 8003fd2:	481c      	ldr	r0, [pc, #112]	; (8004044 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003fd4:	f7fc ffee 	bl	8000fb4 <_ZN7RC_rateD1Ev>
RC_rate Pitch_SP(LEVEL_PITCH_P, MAX_ANGLE, RC_RATE);
 8003fd8:	4819      	ldr	r0, [pc, #100]	; (8004040 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8003fda:	f7fc ffeb 	bl	8000fb4 <_ZN7RC_rateD1Ev>
RC_rate ROLL_SP(LEVEL_ROLL_P, MAX_ANGLE, RC_RATE);
 8003fde:	4816      	ldr	r0, [pc, #88]	; (8004038 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003fe0:	f7fc ffe8 	bl	8000fb4 <_ZN7RC_rateD1Ev>
Pid Yaw_PID (Yaw_P, Yaw_I, Yaw_D, Max_yaw);
 8003fe4:	4812      	ldr	r0, [pc, #72]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003fe6:	f000 fa75 	bl	80044d4 <_ZN3PidD1Ev>
Pid Pitch_PID (Pitch_P, Pitch_I, Pitch_D, Max_pitch);
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8003fec:	f000 fa72 	bl	80044d4 <_ZN3PidD1Ev>
Pid Roll_PID (Roll_P, Roll_I, Roll_D, Max_roll);
 8003ff0:	4807      	ldr	r0, [pc, #28]	; (8004010 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8003ff2:	f000 fa6f 	bl	80044d4 <_ZN3PidD1Ev>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	43c80000 	.word	0x43c80000
 8004004:	40a33333 	.word	0x40a33333
 8004008:	3f19999a 	.word	0x3f19999a
 800400c:	3f68f5c3 	.word	0x3f68f5c3
 8004010:	2000028c 	.word	0x2000028c
 8004014:	40b66666 	.word	0x40b66666
 8004018:	3f666666 	.word	0x3f666666
 800401c:	3f7d70a4 	.word	0x3f7d70a4
 8004020:	200002bc 	.word	0x200002bc
 8004024:	00000000 	.word	0x00000000
 8004028:	40666666 	.word	0x40666666
 800402c:	3f70a3d7 	.word	0x3f70a3d7
 8004030:	200002ec 	.word	0x200002ec
 8004034:	3f0a3d71 	.word	0x3f0a3d71
 8004038:	2000031c 	.word	0x2000031c
 800403c:	3f1eb852 	.word	0x3f1eb852
 8004040:	20000330 	.word	0x20000330
 8004044:	20000344 	.word	0x20000344
 8004048:	3b03126f 	.word	0x3b03126f
 800404c:	42200000 	.word	0x42200000
 8004050:	20000358 	.word	0x20000358
 8004054:	200003b8 	.word	0x200003b8
 8004058:	20000418 	.word	0x20000418
 800405c:	20000478 	.word	0x20000478
 8004060:	200004d8 	.word	0x200004d8
 8004064:	20000538 	.word	0x20000538
 8004068:	20000598 	.word	0x20000598
 800406c:	200005f8 	.word	0x200005f8
 8004070:	20000658 	.word	0x20000658

08004074 <_GLOBAL__sub_I_hspi2>:
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
 8004078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800407c:	2001      	movs	r0, #1
 800407e:	f7ff fefd 	bl	8003e7c <_Z41__static_initialization_and_destruction_0ii>
 8004082:	bd80      	pop	{r7, pc}

08004084 <_GLOBAL__sub_D_hspi2>:
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
 8004088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800408c:	2000      	movs	r0, #0
 800408e:	f7ff fef5 	bl	8003e7c <_Z41__static_initialization_and_destruction_0ii>
 8004092:	bd80      	pop	{r7, pc}

08004094 <MPU6050_Init>:
	   }
}


void MPU6050_Init (void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800409a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800409e:	9302      	str	r3, [sp, #8]
 80040a0:	2301      	movs	r3, #1
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2301      	movs	r3, #1
 80040aa:	2275      	movs	r2, #117	; 0x75
 80040ac:	21d0      	movs	r1, #208	; 0xd0
 80040ae:	4824      	ldr	r0, [pc, #144]	; (8004140 <MPU6050_Init+0xac>)
 80040b0:	f002 fcfc 	bl	8006aac <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b68      	cmp	r3, #104	; 0x68
 80040b8:	d13e      	bne.n	8004138 <MPU6050_Init+0xa4>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	2301      	movs	r3, #1
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	1dbb      	adds	r3, r7, #6
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2301      	movs	r3, #1
 80040ce:	226b      	movs	r2, #107	; 0x6b
 80040d0:	21d0      	movs	r1, #208	; 0xd0
 80040d2:	481b      	ldr	r0, [pc, #108]	; (8004140 <MPU6050_Init+0xac>)
 80040d4:	f002 fbd6 	bl	8006884 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 80040d8:	2032      	movs	r0, #50	; 0x32
 80040da:	f000 ffd5 	bl	8005088 <HAL_Delay>
		//Data = 0x07;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, AFS_SEL=2 -> � 8g
		Data = 0x10; // ACCEL_CONFIG REGISTER = 0001 0000
 80040de:	2310      	movs	r3, #16
 80040e0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80040e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e6:	9302      	str	r3, [sp, #8]
 80040e8:	2301      	movs	r3, #1
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	1dbb      	adds	r3, r7, #6
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2301      	movs	r3, #1
 80040f2:	221c      	movs	r2, #28
 80040f4:	21d0      	movs	r1, #208	; 0xd0
 80040f6:	4812      	ldr	r0, [pc, #72]	; (8004140 <MPU6050_Init+0xac>)
 80040f8:	f002 fbc4 	bl	8006884 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=2 -> � 1000 deg/s
		// 0x08 = 500, 0x18 = 2000, 0x10 =1000,
		Data = 0x10; // GYRO_CONFIG REGISTER = 0001 0000
 80040fc:	2310      	movs	r3, #16
 80040fe:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8004100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	2301      	movs	r3, #1
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	1dbb      	adds	r3, r7, #6
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2301      	movs	r3, #1
 8004110:	221b      	movs	r2, #27
 8004112:	21d0      	movs	r1, #208	; 0xd0
 8004114:	480a      	ldr	r0, [pc, #40]	; (8004140 <MPU6050_Init+0xac>)
 8004116:	f002 fbb5 	bl	8006884 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// Filter 44Hz  GYRO_CONFIG REGISTER = 00000011
		Data = 0x03;
 800411a:	2303      	movs	r3, #3
 800411c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, DLPF_CFG, 1, &Data, 1, 1000);
 800411e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	2301      	movs	r3, #1
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	1dbb      	adds	r3, r7, #6
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2301      	movs	r3, #1
 800412e:	221a      	movs	r2, #26
 8004130:	21d0      	movs	r1, #208	; 0xd0
 8004132:	4803      	ldr	r0, [pc, #12]	; (8004140 <MPU6050_Init+0xac>)
 8004134:	f002 fba6 	bl	8006884 <HAL_I2C_Mem_Write>
	}

}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000708 	.word	0x20000708

08004144 <MPU6050_calib_Gyro>:


void MPU6050_calib_Gyro (void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0

	for (int16_t cal_int = 0; cal_int < 500 ; cal_int ++) {
 800414a:	2300      	movs	r3, #0
 800414c:	80fb      	strh	r3, [r7, #6]
 800414e:	e046      	b.n	80041de <MPU6050_calib_Gyro+0x9a>
	    if (cal_int % 25 == 0){
 8004150:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004154:	4b38      	ldr	r3, [pc, #224]	; (8004238 <MPU6050_calib_Gyro+0xf4>)
 8004156:	fb83 1302 	smull	r1, r3, r3, r2
 800415a:	10d9      	asrs	r1, r3, #3
 800415c:	17d3      	asrs	r3, r2, #31
 800415e:	1ac9      	subs	r1, r1, r3
 8004160:	460b      	mov	r3, r1
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	0099      	lsls	r1, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b21b      	sxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <MPU6050_calib_Gyro+0x36>

	    HAL_GPIO_TogglePin(GPIOB, Green_Pin);
 8004172:	2110      	movs	r1, #16
 8004174:	4831      	ldr	r0, [pc, #196]	; (800423c <MPU6050_calib_Gyro+0xf8>)
 8004176:	f002 fadb 	bl	8006730 <HAL_GPIO_TogglePin>


	    	// GPIOA->BSRR = ((GPIOB->ODR ^ GPIO_PIN_8) & GPIO_PIN_8) | GPIO_PIN_8 << 16;
	    }

	    MPU6050_Read_Gyro();
 800417a:	f000 f86f 	bl	800425c <MPU6050_Read_Gyro>

	    gyro_x_cal  += Gyro_X_RAW;
 800417e:	4b30      	ldr	r3, [pc, #192]	; (8004240 <MPU6050_calib_Gyro+0xfc>)
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	b29a      	uxth	r2, r3
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <MPU6050_calib_Gyro+0x100>)
 8004188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418c:	b29b      	uxth	r3, r3
 800418e:	4413      	add	r3, r2
 8004190:	b29b      	uxth	r3, r3
 8004192:	b21a      	sxth	r2, r3
 8004194:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <MPU6050_calib_Gyro+0xfc>)
 8004196:	801a      	strh	r2, [r3, #0]
	    gyro_y_cal  += Gyro_Y_RAW;
 8004198:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <MPU6050_calib_Gyro+0x104>)
 800419a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	4b2a      	ldr	r3, [pc, #168]	; (800424c <MPU6050_calib_Gyro+0x108>)
 80041a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	b21a      	sxth	r2, r3
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <MPU6050_calib_Gyro+0x104>)
 80041b0:	801a      	strh	r2, [r3, #0]
	    gyro_z_cal  += Gyro_Z_RAW;
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <MPU6050_calib_Gyro+0x10c>)
 80041b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <MPU6050_calib_Gyro+0x110>)
 80041bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <MPU6050_calib_Gyro+0x10c>)
 80041ca:	801a      	strh	r2, [r3, #0]

		HAL_Delay(2);
 80041cc:	2002      	movs	r0, #2
 80041ce:	f000 ff5b 	bl	8005088 <HAL_Delay>
	for (int16_t cal_int = 0; cal_int < 500 ; cal_int ++) {
 80041d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041e6:	dbb3      	blt.n	8004150 <MPU6050_calib_Gyro+0xc>

	}

    gyro_x_cal  /= 500;
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <MPU6050_calib_Gyro+0xfc>)
 80041ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <MPU6050_calib_Gyro+0x114>)
 80041f0:	fb82 1203 	smull	r1, r2, r2, r3
 80041f4:	1152      	asrs	r2, r2, #5
 80041f6:	17db      	asrs	r3, r3, #31
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <MPU6050_calib_Gyro+0xfc>)
 80041fe:	801a      	strh	r2, [r3, #0]
    gyro_y_cal  /= 500;
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <MPU6050_calib_Gyro+0x104>)
 8004202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004206:	4a14      	ldr	r2, [pc, #80]	; (8004258 <MPU6050_calib_Gyro+0x114>)
 8004208:	fb82 1203 	smull	r1, r2, r2, r3
 800420c:	1152      	asrs	r2, r2, #5
 800420e:	17db      	asrs	r3, r3, #31
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	b21a      	sxth	r2, r3
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <MPU6050_calib_Gyro+0x104>)
 8004216:	801a      	strh	r2, [r3, #0]
    gyro_z_cal  /= 500;
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <MPU6050_calib_Gyro+0x10c>)
 800421a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <MPU6050_calib_Gyro+0x114>)
 8004220:	fb82 1203 	smull	r1, r2, r2, r3
 8004224:	1152      	asrs	r2, r2, #5
 8004226:	17db      	asrs	r3, r3, #31
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b21a      	sxth	r2, r3
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <MPU6050_calib_Gyro+0x10c>)
 800422e:	801a      	strh	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	51eb851f 	.word	0x51eb851f
 800423c:	48000400 	.word	0x48000400
 8004240:	20000980 	.word	0x20000980
 8004244:	20000974 	.word	0x20000974
 8004248:	20000982 	.word	0x20000982
 800424c:	20000976 	.word	0x20000976
 8004250:	20000984 	.word	0x20000984
 8004254:	20000978 	.word	0x20000978
 8004258:	10624dd3 	.word	0x10624dd3

0800425c <MPU6050_Read_Gyro>:
	 acc_y_cal  /= 500;
}


void MPU6050_Read_Gyro (void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8004262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	2306      	movs	r3, #6
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	463b      	mov	r3, r7
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2301      	movs	r3, #1
 8004272:	2243      	movs	r2, #67	; 0x43
 8004274:	21d0      	movs	r1, #208	; 0xd0
 8004276:	482d      	ldr	r0, [pc, #180]	; (800432c <MPU6050_Read_Gyro+0xd0>)
 8004278:	f002 fc18 	bl	8006aac <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6);

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800427c:	783b      	ldrb	r3, [r7, #0]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	b21a      	sxth	r2, r3
 8004282:	787b      	ldrb	r3, [r7, #1]
 8004284:	b21b      	sxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b21a      	sxth	r2, r3
 800428a:	4b29      	ldr	r3, [pc, #164]	; (8004330 <MPU6050_Read_Gyro+0xd4>)
 800428c:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800428e:	78bb      	ldrb	r3, [r7, #2]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	b21a      	sxth	r2, r3
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	b21b      	sxth	r3, r3
 8004298:	4313      	orrs	r3, r2
 800429a:	b21a      	sxth	r2, r3
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <MPU6050_Read_Gyro+0xd8>)
 800429e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80042a0:	793b      	ldrb	r3, [r7, #4]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	b21a      	sxth	r2, r3
 80042a6:	797b      	ldrb	r3, [r7, #5]
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	4313      	orrs	r3, r2
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <MPU6050_Read_Gyro+0xdc>)
 80042b0:	801a      	strh	r2, [r3, #0]

    Gx = (float)(Gyro_X_RAW - gyro_x_cal) / GYRO_SCALE;
 80042b2:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <MPU6050_Read_Gyro+0xd4>)
 80042b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <MPU6050_Read_Gyro+0xe0>)
 80042bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ca:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004340 <MPU6050_Read_Gyro+0xe4>
 80042ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042d2:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <MPU6050_Read_Gyro+0xe8>)
 80042d4:	edc3 7a00 	vstr	s15, [r3]
	Gy = (float)(Gyro_Y_RAW - gyro_y_cal) / GYRO_SCALE;
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <MPU6050_Read_Gyro+0xd8>)
 80042da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042de:	461a      	mov	r2, r3
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <MPU6050_Read_Gyro+0xec>)
 80042e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042f0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004340 <MPU6050_Read_Gyro+0xe4>
 80042f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <MPU6050_Read_Gyro+0xf0>)
 80042fa:	edc3 7a00 	vstr	s15, [r3]
	Gz = (float)(Gyro_Z_RAW - gyro_z_cal) / GYRO_SCALE;
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <MPU6050_Read_Gyro+0xdc>)
 8004300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004304:	461a      	mov	r2, r3
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <MPU6050_Read_Gyro+0xf4>)
 8004308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004316:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004340 <MPU6050_Read_Gyro+0xe4>
 800431a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <MPU6050_Read_Gyro+0xf8>)
 8004320:	edc3 7a00 	vstr	s15, [r3]

}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000708 	.word	0x20000708
 8004330:	20000974 	.word	0x20000974
 8004334:	20000976 	.word	0x20000976
 8004338:	20000978 	.word	0x20000978
 800433c:	20000980 	.word	0x20000980
 8004340:	42033333 	.word	0x42033333
 8004344:	200009dc 	.word	0x200009dc
 8004348:	20000982 	.word	0x20000982
 800434c:	200009e4 	.word	0x200009e4
 8004350:	20000984 	.word	0x20000984
 8004354:	200009f0 	.word	0x200009f0

08004358 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800435e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	2306      	movs	r3, #6
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	463b      	mov	r3, r7
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2301      	movs	r3, #1
 800436e:	223b      	movs	r2, #59	; 0x3b
 8004370:	21d0      	movs	r1, #208	; 0xd0
 8004372:	4825      	ldr	r0, [pc, #148]	; (8004408 <MPU6050_Read_Accel+0xb0>)
 8004374:	f002 fb9a 	bl	8006aac <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6);


	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8004378:	783b      	ldrb	r3, [r7, #0]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	b21a      	sxth	r2, r3
 800437e:	787b      	ldrb	r3, [r7, #1]
 8004380:	b21b      	sxth	r3, r3
 8004382:	4313      	orrs	r3, r2
 8004384:	b21a      	sxth	r2, r3
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <MPU6050_Read_Accel+0xb4>)
 8004388:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800438a:	78bb      	ldrb	r3, [r7, #2]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	b21a      	sxth	r2, r3
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	b21b      	sxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	b21a      	sxth	r2, r3
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <MPU6050_Read_Accel+0xb8>)
 800439a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800439c:	793b      	ldrb	r3, [r7, #4]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	b21a      	sxth	r2, r3
 80043a2:	797b      	ldrb	r3, [r7, #5]
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b21a      	sxth	r2, r3
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <MPU6050_Read_Accel+0xbc>)
 80043ac:	801a      	strh	r2, [r3, #0]

	Ax = (Accel_X_RAW - acc_x_cal);// / 4096; // 8g   +9
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <MPU6050_Read_Accel+0xb4>)
 80043b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MPU6050_Read_Accel+0xc0>)
 80043b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <MPU6050_Read_Accel+0xc4>)
 80043c8:	edc3 7a00 	vstr	s15, [r3]
	Ay = (Accel_Y_RAW - acc_y_cal);// / 4096;     -10
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <MPU6050_Read_Accel+0xb8>)
 80043ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <MPU6050_Read_Accel+0xc8>)
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <MPU6050_Read_Accel+0xcc>)
 80043e6:	edc3 7a00 	vstr	s15, [r3]
	Az = (Accel_Z_RAW );// / 16384.0;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <MPU6050_Read_Accel+0xbc>)
 80043ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <MPU6050_Read_Accel+0xd0>)
 80043fa:	edc3 7a00 	vstr	s15, [r3]

}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000708 	.word	0x20000708
 800440c:	2000097a 	.word	0x2000097a
 8004410:	2000097c 	.word	0x2000097c
 8004414:	2000097e 	.word	0x2000097e
 8004418:	2000000c 	.word	0x2000000c
 800441c:	200009e8 	.word	0x200009e8
 8004420:	2000000e 	.word	0x2000000e
 8004424:	200009e0 	.word	0x200009e0
 8004428:	200009ec 	.word	0x200009ec

0800442c <gyro_X>:


float gyro_X (void) { return Gx; }
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <gyro_X+0x18>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb0 0a67 	vmov.f32	s0, s15
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	200009dc 	.word	0x200009dc

08004448 <gyro_Y>:
float gyro_Y (void) { return Gy; }
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <gyro_Y+0x18>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	200009e4 	.word	0x200009e4

08004464 <gyro_Z>:
float gyro_Z (void) { return Gz; }
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <gyro_Z+0x18>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eeb0 0a67 	vmov.f32	s0, s15
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	200009f0 	.word	0x200009f0

08004480 <accel_X>:

float accel_X (void) { return Ax; }
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <accel_X+0x18>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	200009e8 	.word	0x200009e8

0800449c <accel_Y>:
float accel_Y (void) { return Ay; }
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <accel_Y+0x18>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eeb0 0a67 	vmov.f32	s0, s15
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	200009e0 	.word	0x200009e0

080044b8 <accel_Z>:
float accel_Z (void) { return Az; }
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <accel_Z+0x18>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eeb0 0a67 	vmov.f32	s0, s15
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200009ec 	.word	0x200009ec

080044d4 <_ZN3PidD1Ev>:


Pid::Pid() {
	// TODO Auto-generated constructor stub
}
Pid::~Pid() {
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <_ZN3PidD1Ev+0x1c>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	0800f300 	.word	0x0800f300

080044f4 <_ZN3PidD0Ev>:
Pid::~Pid() {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
}
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ffe9 	bl	80044d4 <_ZN3PidD1Ev>
 8004502:	2130      	movs	r1, #48	; 0x30
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f006 f8a9 	bl	800a65c <_ZdlPvj>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_ZN3PidC1Effff>:


Pid::Pid(float p, float i, float d, float iLimit)
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6178      	str	r0, [r7, #20]
 800451c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004520:	edc7 0a03 	vstr	s1, [r7, #12]
 8004524:	ed87 1a02 	vstr	s2, [r7, #8]
 8004528:	edc7 1a01 	vstr	s3, [r7, #4]
 800452c:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <_ZN3PidC1Effff+0x54>)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	601a      	str	r2, [r3, #0]
{
  _P = p;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]
  _I = i;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	609a      	str	r2, [r3, #8]
  _D = d;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	60da      	str	r2, [r3, #12]
  _I_limit = iLimit;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	615a      	str	r2, [r3, #20]
  _lastError = 0;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	619a      	str	r2, [r3, #24]
  iPart = 0;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

}
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	0800f300 	.word	0x0800f300

0800456c <_ZN3Pid9updatePIDEffffh>:

float Pid::updatePID(float target, float current, float Dgyro, float deltaTime, uint8_t flight_mode)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6178      	str	r0, [r7, #20]
 8004574:	ed87 0a04 	vstr	s0, [r7, #16]
 8004578:	edc7 0a03 	vstr	s1, [r7, #12]
 800457c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004580:	edc7 1a01 	vstr	s3, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
   error = (target - current); // * deltaTime;
 8004588:	ed97 7a04 	vldr	s14, [r7, #16]
 800458c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	edc3 7a07 	vstr	s15, [r3, #28]

   pPart = _P * error;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	ed93 7a01 	vldr	s14, [r3, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	edc3 7a08 	vstr	s15, [r3, #32]

   iPart += error *_I * deltaTime;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	edd3 6a07 	vldr	s13, [r3, #28]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	edd3 7a02 	vldr	s15, [r3, #8]
 80045c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
   if (iPart >  _I_limit) iPart = _I_limit;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80045e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	dd04      	ble.n	80045f8 <_ZN3Pid9updatePIDEffffh+0x8c>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
 80045f6:	e014      	b.n	8004622 <_ZN3Pid9updatePIDEffffh+0xb6>
   else if (iPart <  -_I_limit) iPart = -_I_limit;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	edd3 7a05 	vldr	s15, [r3, #20]
 8004604:	eef1 7a67 	vneg.f32	s15, s15
 8004608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d507      	bpl.n	8004622 <_ZN3Pid9updatePIDEffffh+0xb6>
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	edd3 7a05 	vldr	s15, [r3, #20]
 8004618:	eef1 7a67 	vneg.f32	s15, s15
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


   if (flight_mode == 1 || flight_mode == 2 || flight_mode == 3){
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d005      	beq.n	8004634 <_ZN3Pid9updatePIDEffffh+0xc8>
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d002      	beq.n	8004634 <_ZN3Pid9updatePIDEffffh+0xc8>
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d119      	bne.n	8004668 <_ZN3Pid9updatePIDEffffh+0xfc>
   dterm =  - (Dgyro - _lastError); // minus so that Dpart works as a break
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	edd3 7a06 	vldr	s15, [r3, #24]
 800463a:	ed97 7a02 	vldr	s14, [r7, #8]
 800463e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004642:	eef1 7a67 	vneg.f32	s15, s15
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
   dPart = _D * dterm;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
   _lastError = Dgyro;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	619a      	str	r2, [r3, #24]
//	dterm =   error - _lastError;
//	dPart = _D * dterm;
//	_lastError = error;
//   }

  _PID_sum = pPart + iPart + dPart;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	ed93 7a08 	vldr	s14, [r3, #32]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800467e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	edc3 7a04 	vstr	s15, [r3, #16]
  if (_PID_sum >  _I_limit) _PID_sum = _I_limit;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	ed93 7a04 	vldr	s14, [r3, #16]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	edd3 7a05 	vldr	s15, [r3, #20]
 8004694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	dd04      	ble.n	80046a8 <_ZN3Pid9updatePIDEffffh+0x13c>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	e014      	b.n	80046d2 <_ZN3Pid9updatePIDEffffh+0x166>
  else if (_PID_sum <  -_I_limit) _PID_sum = -_I_limit;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80046b4:	eef1 7a67 	vneg.f32	s15, s15
 80046b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c0:	d507      	bpl.n	80046d2 <_ZN3Pid9updatePIDEffffh+0x166>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80046c8:	eef1 7a67 	vneg.f32	s15, s15
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	edc3 7a04 	vstr	s15, [r3, #16]

  return (_PID_sum);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	ee07 3a90 	vmov	s15, r3
}
 80046da:	eeb0 0a67 	vmov.f32	s0, s15
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <_ZN3Pid8resetPIDEv>:

void Pid::resetPID()
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
   error = 0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	61da      	str	r2, [r3, #28]
   iPart = 0;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24
   dPart = 0;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
  _PID_sum = 0;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	611a      	str	r2, [r3, #16]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_ZN3Pid4setPEf>:

void Pid::setP(float p) {  _P = p; }
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	ed87 0a00 	vstr	s0, [r7]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_ZN3Pid4setIEf>:
void Pid::setI(float i) {  _I = i; }
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	ed87 0a00 	vstr	s0, [r7]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <_ZN3Pid4setDEf>:
void Pid::setD(float d) {  _D = d; }
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	ed87 0a00 	vstr	s0, [r7]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <_ZN3Pid8getErrorEv>:

void Pid::setIlimit(float limit) { _I_limit = limit; }


float Pid::getError() {  return error; }
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eeb0 0a67 	vmov.f32	s0, s15
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_ZN3Pid4getPEv>:

float Pid::getP() {  return _P; }
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eeb0 0a67 	vmov.f32	s0, s15
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <_ZN3Pid4getIEv>:
float Pid::getI() {  return _I; }
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eeb0 0a67 	vmov.f32	s0, s15
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZN3Pid4getDEv>:
float Pid::getD() {  return _D; }
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <_ZN3Pid9getP_partEv>:

float Pid::getP_part() {  return pPart; }
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_ZN3Pid9getI_partEv>:
float Pid::getI_part() {  return iPart; }
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eeb0 0a67 	vmov.f32	s0, s15
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <_ZN3Pid9getD_partEv>:
float Pid::getD_part() {  return dPart; }
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eeb0 0a67 	vmov.f32	s0, s15
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <_ZN3Pid10get_PIDsumEv>:
float Pid::get_PIDsum() {  return _PID_sum; }
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb0 0a67 	vmov.f32	s0, s15
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <_ZN3Pid8getDtermEv>:



float Pid::getDterm()   {  return dterm; }
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eeb0 0a67 	vmov.f32	s0, s15
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_MspInit+0x44>)
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_MspInit+0x44>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6193      	str	r3, [r2, #24]
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_MspInit+0x44>)
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_MspInit+0x44>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <HAL_MspInit+0x44>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	61d3      	str	r3, [r2, #28]
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <HAL_MspInit+0x44>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000

080048cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08a      	sub	sp, #40	; 0x28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a15      	ldr	r2, [pc, #84]	; (8004940 <HAL_ADC_MspInit+0x74>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d124      	bne.n	8004938 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HAL_ADC_MspInit+0x78>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4a14      	ldr	r2, [pc, #80]	; (8004944 <HAL_ADC_MspInit+0x78>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6153      	str	r3, [r2, #20]
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <HAL_ADC_MspInit+0x78>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_ADC_MspInit+0x78>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <HAL_ADC_MspInit+0x78>)
 800490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004910:	6153      	str	r3, [r2, #20]
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_ADC_MspInit+0x78>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PA4     ------> ADC2_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800491e:	2310      	movs	r3, #16
 8004920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004922:	2303      	movs	r3, #3
 8004924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004934:	f001 fd6a 	bl	800640c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004938:	bf00      	nop
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	50000100 	.word	0x50000100
 8004944:	40021000 	.word	0x40021000

08004948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 0314 	add.w	r3, r7, #20
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
 800495e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_I2C_MspInit+0x7c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d127      	bne.n	80049ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 8004970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004974:	6153      	str	r3, [r2, #20]
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004982:	23c0      	movs	r3, #192	; 0xc0
 8004984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004986:	2312      	movs	r3, #18
 8004988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800498e:	2303      	movs	r3, #3
 8004990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004992:	2304      	movs	r3, #4
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004996:	f107 0314 	add.w	r3, r7, #20
 800499a:	4619      	mov	r1, r3
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <HAL_I2C_MspInit+0x84>)
 800499e:	f001 fd35 	bl	800640c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 80049a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ac:	61d3      	str	r3, [r2, #28]
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_I2C_MspInit+0x80>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049ba:	bf00      	nop
 80049bc:	3728      	adds	r7, #40	; 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40005400 	.word	0x40005400
 80049c8:	40021000 	.word	0x40021000
 80049cc:	48000400 	.word	0x48000400

080049d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <HAL_SPI_MspInit+0x7c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d128      	bne.n	8004a44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 80049f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049fc:	61d3      	str	r3, [r2, #28]
 80049fe:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 8004a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a14:	6153      	str	r3, [r2, #20]
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <HAL_SPI_MspInit+0x80>)
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004a22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a30:	2303      	movs	r3, #3
 8004a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a34:	2305      	movs	r3, #5
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <HAL_SPI_MspInit+0x84>)
 8004a40:	f001 fce4 	bl	800640c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a44:	bf00      	nop
 8004a46:	3728      	adds	r7, #40	; 0x28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40003800 	.word	0x40003800
 8004a50:	40021000 	.word	0x40021000
 8004a54:	48000400 	.word	0x48000400

08004a58 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d130      	bne.n	8004adc <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	61d3      	str	r3, [r2, #28]
 8004a86:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9c:	6153      	str	r3, [r2, #20]
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004aba:	2301      	movs	r3, #1
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ac8:	f001 fca0 	bl	800640c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	201c      	movs	r0, #28
 8004ad2:	f001 fc64 	bl	800639e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ad6:	201c      	movs	r0, #28
 8004ad8:	f001 fc7d 	bl	80063d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004adc:	bf00      	nop
 8004ade:	3728      	adds	r7, #40	; 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <HAL_TIM_OC_MspInit+0x38>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d10b      	bne.n	8004b12 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_TIM_OC_MspInit+0x3c>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <HAL_TIM_OC_MspInit+0x3c>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	61d3      	str	r3, [r2, #28]
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <HAL_TIM_OC_MspInit+0x3c>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40021000 	.word	0x40021000

08004b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a13      	ldr	r2, [pc, #76]	; (8004b84 <HAL_TIM_Base_MspInit+0x5c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10c      	bne.n	8004b54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b44:	6193      	str	r3, [r2, #24]
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004b52:	e010      	b.n	8004b76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <HAL_TIM_Base_MspInit+0x64>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10b      	bne.n	8004b76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6193      	str	r3, [r2, #24]
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <HAL_TIM_Base_MspInit+0x60>)
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40014400 	.word	0x40014400
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40014800 	.word	0x40014800

08004b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	; 0x30
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b98:	f107 031c 	add.w	r3, r7, #28
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	60da      	str	r2, [r3, #12]
 8004ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a43      	ldr	r2, [pc, #268]	; (8004cbc <HAL_TIM_MspPostInit+0x12c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d13b      	bne.n	8004c2a <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb2:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	4a42      	ldr	r2, [pc, #264]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbc:	6153      	str	r3, [r2, #20]
 8004bbe:	4b40      	ldr	r3, [pc, #256]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bca:	4b3d      	ldr	r3, [pc, #244]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd4:	6153      	str	r3, [r2, #20]
 8004bd6:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	697b      	ldr	r3, [r7, #20]
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004be2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 031c 	add.w	r3, r7, #28
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c02:	f001 fc03 	bl	800640c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1c:	f107 031c 	add.w	r3, r7, #28
 8004c20:	4619      	mov	r1, r3
 8004c22:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <HAL_TIM_MspPostInit+0x134>)
 8004c24:	f001 fbf2 	bl	800640c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004c28:	e044      	b.n	8004cb4 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM16)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a26      	ldr	r2, [pc, #152]	; (8004cc8 <HAL_TIM_MspPostInit+0x138>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d11d      	bne.n	8004c70 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c34:	4b22      	ldr	r3, [pc, #136]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c3e:	6153      	str	r3, [r2, #20]
 8004c40:	4b1f      	ldr	r3, [pc, #124]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c50:	2302      	movs	r3, #2
 8004c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c60:	f107 031c 	add.w	r3, r7, #28
 8004c64:	4619      	mov	r1, r3
 8004c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c6a:	f001 fbcf 	bl	800640c <HAL_GPIO_Init>
}
 8004c6e:	e021      	b.n	8004cb4 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM17)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_TIM_MspPostInit+0x13c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d11c      	bne.n	8004cb4 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c84:	6153      	str	r3, [r2, #20]
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <HAL_TIM_MspPostInit+0x130>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	2302      	movs	r3, #2
 8004c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	4619      	mov	r1, r3
 8004cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cb0:	f001 fbac 	bl	800640c <HAL_GPIO_Init>
}
 8004cb4:	bf00      	nop
 8004cb6:	3730      	adds	r7, #48	; 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	48000400 	.word	0x48000400
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800

08004cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <HAL_UART_MspInit+0x7c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d128      	bne.n	8004d44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	61d3      	str	r3, [r2, #28]
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4a10      	ldr	r2, [pc, #64]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d14:	6153      	str	r3, [r2, #20]
 8004d16:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_UART_MspInit+0x80>)
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d22:	230c      	movs	r3, #12
 8004d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d26:	2302      	movs	r3, #2
 8004d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d32:	2307      	movs	r3, #7
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d36:	f107 0314 	add.w	r3, r7, #20
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d40:	f001 fb64 	bl	800640c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d44:	bf00      	nop
 8004d46:	3728      	adds	r7, #40	; 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	40021000 	.word	0x40021000

08004d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d62:	b480      	push	{r7}
 8004d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d66:	e7fe      	b.n	8004d66 <HardFault_Handler+0x4>

08004d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <MemManage_Handler+0x4>

08004d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d72:	e7fe      	b.n	8004d72 <BusFault_Handler+0x4>

08004d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d78:	e7fe      	b.n	8004d78 <UsageFault_Handler+0x4>

08004d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d9a:	bf00      	nop
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004da8:	f000 f94e 	bl	8005048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004db4:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <TIM2_IRQHandler+0x10>)
 8004db6:	f004 f817 	bl	8008de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000754 	.word	0x20000754

08004dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
	return 1;
 8004dc8:	2301      	movs	r3, #1
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <_kill>:

int _kill(int pid, int sig)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004dde:	f007 fd65 	bl	800c8ac <__errno>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2216      	movs	r2, #22
 8004de6:	601a      	str	r2, [r3, #0]
	return -1;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_exit>:

void _exit (int status)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ffe7 	bl	8004dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e06:	e7fe      	b.n	8004e06 <_exit+0x12>

08004e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e00a      	b.n	8004e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e1a:	f3af 8000 	nop.w
 8004e1e:	4601      	mov	r1, r0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	60ba      	str	r2, [r7, #8]
 8004e26:	b2ca      	uxtb	r2, r1
 8004e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbf0      	blt.n	8004e1a <_read+0x12>
	}

return len;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e009      	b.n	8004e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	60ba      	str	r2, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dbf1      	blt.n	8004e54 <_write+0x12>
	}
	return len;
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_close>:

int _close(int file)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
	return -1;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <_isatty>:

int _isatty(int file)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8004eba:	2301      	movs	r3, #1
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <_sbrk+0x50>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <_sbrk+0x16>
		heap_end = &end;
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <_sbrk+0x50>)
 8004ef6:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <_sbrk+0x54>)
 8004ef8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <_sbrk+0x50>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <_sbrk+0x50>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	466a      	mov	r2, sp
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d907      	bls.n	8004f1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004f0e:	f007 fccd 	bl	800c8ac <__errno>
 8004f12:	4603      	mov	r3, r0
 8004f14:	220c      	movs	r2, #12
 8004f16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	e006      	b.n	8004f2c <_sbrk+0x48>
	}

	heap_end += incr;
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <_sbrk+0x50>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <_sbrk+0x50>)
 8004f28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20000988 	.word	0x20000988
 8004f38:	20000a08 	.word	0x20000a08

08004f3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <SystemInit+0x28>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <SystemInit+0x28>)
 8004f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <SystemInit+0x28>)
 8004f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f56:	609a      	str	r2, [r3, #8]
#endif
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fa0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004f6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004f6e:	e003      	b.n	8004f78 <LoopCopyDataInit>

08004f70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004f72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004f74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004f76:	3104      	adds	r1, #4

08004f78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004f78:	480b      	ldr	r0, [pc, #44]	; (8004fa8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <LoopForever+0xe>)
	adds	r2, r0, r1
 8004f7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004f7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004f80:	d3f6      	bcc.n	8004f70 <CopyDataInit>
	ldr	r2, =_sbss
 8004f82:	4a0b      	ldr	r2, [pc, #44]	; (8004fb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004f84:	e002      	b.n	8004f8c <LoopFillZerobss>

08004f86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004f86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004f88:	f842 3b04 	str.w	r3, [r2], #4

08004f8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004f8c:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <LoopForever+0x16>)
	cmp	r2, r3
 8004f8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004f90:	d3f9      	bcc.n	8004f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f92:	f7ff ffd3 	bl	8004f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f96:	f007 fc8f 	bl	800c8b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f9a:	f7fc fe35 	bl	8001c08 <main>

08004f9e <LoopForever>:

LoopForever:
    b LoopForever
 8004f9e:	e7fe      	b.n	8004f9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004fa0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004fa4:	0800fcdc 	.word	0x0800fcdc
	ldr	r0, =_sdata
 8004fa8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004fac:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8004fb0:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8004fb4:	20000a08 	.word	0x20000a08

08004fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fb8:	e7fe      	b.n	8004fb8 <ADC1_2_IRQHandler>
	...

08004fbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_Init+0x28>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a07      	ldr	r2, [pc, #28]	; (8004fe4 <HAL_Init+0x28>)
 8004fc6:	f043 0310 	orr.w	r3, r3, #16
 8004fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fcc:	2003      	movs	r0, #3
 8004fce:	f001 f9db 	bl	8006388 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f000 f808 	bl	8004fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fd8:	f7ff fc54 	bl	8004884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40022000 	.word	0x40022000

08004fe8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <HAL_InitTick+0x54>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <HAL_InitTick+0x58>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	4618      	mov	r0, r3
 8005008:	f001 f9f3 	bl	80063f2 <HAL_SYSTICK_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e00e      	b.n	8005034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b0f      	cmp	r3, #15
 800501a:	d80a      	bhi.n	8005032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800501c:	2200      	movs	r2, #0
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	f001 f9bb 	bl	800639e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005028:	4a06      	ldr	r2, [pc, #24]	; (8005044 <HAL_InitTick+0x5c>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000010 	.word	0x20000010
 8005040:	20000018 	.word	0x20000018
 8005044:	20000014 	.word	0x20000014

08005048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_IncTick+0x20>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_IncTick+0x24>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4413      	add	r3, r2
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_IncTick+0x24>)
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20000018 	.word	0x20000018
 800506c:	200009f4 	.word	0x200009f4

08005070 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return uwTick;  
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <HAL_GetTick+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	200009f4 	.word	0x200009f4

08005088 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005090:	f7ff ffee 	bl	8005070 <HAL_GetTick>
 8005094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d005      	beq.n	80050ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_Delay+0x44>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80050ae:	bf00      	nop
 80050b0:	f7ff ffde 	bl	8005070 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d8f7      	bhi.n	80050b0 <HAL_Delay+0x28>
  {
  }
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000018 	.word	0x20000018

080050d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b09a      	sub	sp, #104	; 0x68
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e1c9      	b.n	8005484 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d176      	bne.n	80051f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d152      	bne.n	80051b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fbd1 	bl	80048cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d13b      	bne.n	80051b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 ff47 	bl	8005fcc <ADC_Disable>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d12f      	bne.n	80051b0 <HAL_ADC_Init+0xe0>
 8005150:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005154:	2b00      	cmp	r3, #0
 8005156:	d12b      	bne.n	80051b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005160:	f023 0302 	bic.w	r3, r3, #2
 8005164:	f043 0202 	orr.w	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800517a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800518a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800518c:	4b86      	ldr	r3, [pc, #536]	; (80053a8 <HAL_ADC_Init+0x2d8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a86      	ldr	r2, [pc, #536]	; (80053ac <HAL_ADC_Init+0x2dc>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0c9a      	lsrs	r2, r3, #18
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051a2:	e002      	b.n	80051aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f9      	bne.n	80051a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80051c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051cc:	d110      	bne.n	80051f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f023 0312 	bic.w	r3, r3, #18
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8136 	bne.w	800546a <HAL_ADC_Init+0x39a>
 80051fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005202:	2b00      	cmp	r3, #0
 8005204:	f040 8131 	bne.w	800546a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 8129 	bne.w	800546a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005220:	f043 0202 	orr.w	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005230:	d004      	beq.n	800523c <HAL_ADC_Init+0x16c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5e      	ldr	r2, [pc, #376]	; (80053b0 <HAL_ADC_Init+0x2e0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_ADC_Init+0x170>
 800523c:	4b5d      	ldr	r3, [pc, #372]	; (80053b4 <HAL_ADC_Init+0x2e4>)
 800523e:	e000      	b.n	8005242 <HAL_ADC_Init+0x172>
 8005240:	4b5d      	ldr	r3, [pc, #372]	; (80053b8 <HAL_ADC_Init+0x2e8>)
 8005242:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800524c:	d102      	bne.n	8005254 <HAL_ADC_Init+0x184>
 800524e:	4b58      	ldr	r3, [pc, #352]	; (80053b0 <HAL_ADC_Init+0x2e0>)
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e01a      	b.n	800528a <HAL_ADC_Init+0x1ba>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a55      	ldr	r2, [pc, #340]	; (80053b0 <HAL_ADC_Init+0x2e0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d103      	bne.n	8005266 <HAL_ADC_Init+0x196>
 800525e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e011      	b.n	800528a <HAL_ADC_Init+0x1ba>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a54      	ldr	r2, [pc, #336]	; (80053bc <HAL_ADC_Init+0x2ec>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d102      	bne.n	8005276 <HAL_ADC_Init+0x1a6>
 8005270:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <HAL_ADC_Init+0x2f0>)
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e009      	b.n	800528a <HAL_ADC_Init+0x1ba>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_ADC_Init+0x2f0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d102      	bne.n	8005286 <HAL_ADC_Init+0x1b6>
 8005280:	4b4e      	ldr	r3, [pc, #312]	; (80053bc <HAL_ADC_Init+0x2ec>)
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	e001      	b.n	800528a <HAL_ADC_Init+0x1ba>
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d108      	bne.n	80052aa <HAL_ADC_Init+0x1da>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_ADC_Init+0x1da>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_ADC_Init+0x1dc>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11c      	bne.n	80052ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_ADC_Init+0x202>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_ADC_Init+0x202>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_ADC_Init+0x204>
 80052d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d108      	bne.n	80052ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80052d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	7e5b      	ldrb	r3, [r3, #25]
 80052ee:	035b      	lsls	r3, r3, #13
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052f4:	2a01      	cmp	r2, #1
 80052f6:	d002      	beq.n	80052fe <HAL_ADC_Init+0x22e>
 80052f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052fc:	e000      	b.n	8005300 <HAL_ADC_Init+0x230>
 80052fe:	2200      	movs	r2, #0
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4313      	orrs	r3, r2
 800530e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005310:	4313      	orrs	r3, r2
 8005312:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d11b      	bne.n	8005356 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7e5b      	ldrb	r3, [r3, #25]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	3b01      	subs	r3, #1
 800532c:	045a      	lsls	r2, r3, #17
 800532e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005330:	4313      	orrs	r3, r2
 8005332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005336:	663b      	str	r3, [r7, #96]	; 0x60
 8005338:	e00d      	b.n	8005356 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	2b01      	cmp	r3, #1
 800535c:	d03a      	beq.n	80053d4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a16      	ldr	r2, [pc, #88]	; (80053bc <HAL_ADC_Init+0x2ec>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <HAL_ADC_Init+0x2a2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <HAL_ADC_Init+0x2f0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d128      	bne.n	80053c4 <HAL_ADC_Init+0x2f4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800537a:	d012      	beq.n	80053a2 <HAL_ADC_Init+0x2d2>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005384:	d00a      	beq.n	800539c <HAL_ADC_Init+0x2cc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800538e:	d002      	beq.n	8005396 <HAL_ADC_Init+0x2c6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	e018      	b.n	80053c8 <HAL_ADC_Init+0x2f8>
 8005396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800539a:	e015      	b.n	80053c8 <HAL_ADC_Init+0x2f8>
 800539c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80053a0:	e012      	b.n	80053c8 <HAL_ADC_Init+0x2f8>
 80053a2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80053a6:	e00f      	b.n	80053c8 <HAL_ADC_Init+0x2f8>
 80053a8:	20000010 	.word	0x20000010
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	50000100 	.word	0x50000100
 80053b4:	50000300 	.word	0x50000300
 80053b8:	50000700 	.word	0x50000700
 80053bc:	50000400 	.word	0x50000400
 80053c0:	50000500 	.word	0x50000500
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053cc:	4313      	orrs	r3, r2
 80053ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d0:	4313      	orrs	r3, r2
 80053d2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d114      	bne.n	800540c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f0:	f023 0302 	bic.w	r3, r3, #2
 80053f4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	7e1b      	ldrb	r3, [r3, #24]
 80053fa:	039a      	lsls	r2, r3, #14
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4313      	orrs	r3, r2
 8005406:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005408:	4313      	orrs	r3, r2
 800540a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_ADC_Init+0x3bc>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800541c:	430b      	orrs	r3, r1
 800541e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d10c      	bne.n	8005442 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f023 010f 	bic.w	r1, r3, #15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
 8005440:	e007      	b.n	8005452 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 020f 	bic.w	r2, r2, #15
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f023 0303 	bic.w	r3, r3, #3
 8005460:	f043 0201 	orr.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
 8005468:	e00a      	b.n	8005480 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f023 0312 	bic.w	r3, r3, #18
 8005472:	f043 0210 	orr.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005484:	4618      	mov	r0, r3
 8005486:	3768      	adds	r7, #104	; 0x68
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	fff0c007 	.word	0xfff0c007

08005490 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 80f9 	bne.w	800569e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_ADC_Start+0x2a>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e0f4      	b.n	80056a4 <HAL_ADC_Start+0x214>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fd24 	bl	8005f10 <ADC_Enable>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 80e0 	bne.w	8005694 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054f0:	d004      	beq.n	80054fc <HAL_ADC_Start+0x6c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6d      	ldr	r2, [pc, #436]	; (80056ac <HAL_ADC_Start+0x21c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d106      	bne.n	800550a <HAL_ADC_Start+0x7a>
 80054fc:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <HAL_ADC_Start+0x220>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_ADC_Start+0x9a>
 8005508:	e005      	b.n	8005516 <HAL_ADC_Start+0x86>
 800550a:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_ADC_Start+0x224>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 031f 	and.w	r3, r3, #31
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <HAL_ADC_Start+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800551e:	d004      	beq.n	800552a <HAL_ADC_Start+0x9a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a64      	ldr	r2, [pc, #400]	; (80056b8 <HAL_ADC_Start+0x228>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d115      	bne.n	8005556 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d036      	beq.n	80055b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800554c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005554:	e02d      	b.n	80055b2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800556a:	d004      	beq.n	8005576 <HAL_ADC_Start+0xe6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4e      	ldr	r2, [pc, #312]	; (80056ac <HAL_ADC_Start+0x21c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10a      	bne.n	800558c <HAL_ADC_Start+0xfc>
 8005576:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e008      	b.n	800559e <HAL_ADC_Start+0x10e>
 800558c:	4b4a      	ldr	r3, [pc, #296]	; (80056b8 <HAL_ADC_Start+0x228>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d106      	bne.n	80055ce <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c4:	f023 0206 	bic.w	r2, r3, #6
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
 80055cc:	e002      	b.n	80055d4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	221c      	movs	r2, #28
 80055e2:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ec:	d004      	beq.n	80055f8 <HAL_ADC_Start+0x168>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <HAL_ADC_Start+0x21c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d106      	bne.n	8005606 <HAL_ADC_Start+0x176>
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_ADC_Start+0x220>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2b00      	cmp	r3, #0
 8005602:	d03e      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005604:	e005      	b.n	8005612 <HAL_ADC_Start+0x182>
 8005606:	4b2b      	ldr	r3, [pc, #172]	; (80056b4 <HAL_ADC_Start+0x224>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b00      	cmp	r3, #0
 8005610:	d037      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800561a:	d004      	beq.n	8005626 <HAL_ADC_Start+0x196>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_ADC_Start+0x21c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d106      	bne.n	8005634 <HAL_ADC_Start+0x1a4>
 8005626:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <HAL_ADC_Start+0x220>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	2b05      	cmp	r3, #5
 8005630:	d027      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005632:	e005      	b.n	8005640 <HAL_ADC_Start+0x1b0>
 8005634:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <HAL_ADC_Start+0x224>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2b05      	cmp	r3, #5
 800563e:	d020      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005648:	d004      	beq.n	8005654 <HAL_ADC_Start+0x1c4>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a17      	ldr	r2, [pc, #92]	; (80056ac <HAL_ADC_Start+0x21c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d106      	bne.n	8005662 <HAL_ADC_Start+0x1d2>
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_ADC_Start+0x220>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2b09      	cmp	r3, #9
 800565e:	d010      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005660:	e005      	b.n	800566e <HAL_ADC_Start+0x1de>
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <HAL_ADC_Start+0x224>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2b09      	cmp	r3, #9
 800566c:	d009      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005676:	d004      	beq.n	8005682 <HAL_ADC_Start+0x1f2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a0e      	ldr	r2, [pc, #56]	; (80056b8 <HAL_ADC_Start+0x228>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d10f      	bne.n	80056a2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	e006      	b.n	80056a2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800569c:	e001      	b.n	80056a2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800569e:	2302      	movs	r3, #2
 80056a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	50000100 	.word	0x50000100
 80056b0:	50000300 	.word	0x50000300
 80056b4:	50000700 	.word	0x50000700
 80056b8:	50000400 	.word	0x50000400

080056bc <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_ADC_Stop+0x1a>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e023      	b.n	800571e <HAL_ADC_Stop+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80056de:	216c      	movs	r1, #108	; 0x6c
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fcd3 	bl	800608c <ADC_ConversionStop>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fc6b 	bl	8005fcc <ADC_Disable>
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	2b08      	cmp	r3, #8
 800573c:	d102      	bne.n	8005744 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800573e:	2308      	movs	r3, #8
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e03a      	b.n	80057ba <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800574c:	d004      	beq.n	8005758 <HAL_ADC_PollForConversion+0x30>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6e      	ldr	r2, [pc, #440]	; (800590c <HAL_ADC_PollForConversion+0x1e4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_ADC_PollForConversion+0x34>
 8005758:	4b6d      	ldr	r3, [pc, #436]	; (8005910 <HAL_ADC_PollForConversion+0x1e8>)
 800575a:	e000      	b.n	800575e <HAL_ADC_PollForConversion+0x36>
 800575c:	4b6d      	ldr	r3, [pc, #436]	; (8005914 <HAL_ADC_PollForConversion+0x1ec>)
 800575e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2b00      	cmp	r3, #0
 800576a:	d112      	bne.n	8005792 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d11d      	bne.n	80057b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0b8      	b.n	8005904 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00b      	beq.n	80057b6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0a6      	b.n	8005904 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80057b6:	230c      	movs	r3, #12
 80057b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057c2:	d004      	beq.n	80057ce <HAL_ADC_PollForConversion+0xa6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a50      	ldr	r2, [pc, #320]	; (800590c <HAL_ADC_PollForConversion+0x1e4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d106      	bne.n	80057dc <HAL_ADC_PollForConversion+0xb4>
 80057ce:	4b50      	ldr	r3, [pc, #320]	; (8005910 <HAL_ADC_PollForConversion+0x1e8>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 031f 	and.w	r3, r3, #31
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_ADC_PollForConversion+0xd4>
 80057da:	e005      	b.n	80057e8 <HAL_ADC_PollForConversion+0xc0>
 80057dc:	4b4d      	ldr	r3, [pc, #308]	; (8005914 <HAL_ADC_PollForConversion+0x1ec>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_ADC_PollForConversion+0xd4>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057f0:	d004      	beq.n	80057fc <HAL_ADC_PollForConversion+0xd4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a48      	ldr	r2, [pc, #288]	; (8005918 <HAL_ADC_PollForConversion+0x1f0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d104      	bne.n	8005806 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e00f      	b.n	8005826 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800580e:	d004      	beq.n	800581a <HAL_ADC_PollForConversion+0xf2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3d      	ldr	r2, [pc, #244]	; (800590c <HAL_ADC_PollForConversion+0x1e4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d102      	bne.n	8005820 <HAL_ADC_PollForConversion+0xf8>
 800581a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800581e:	e000      	b.n	8005822 <HAL_ADC_PollForConversion+0xfa>
 8005820:	4b3d      	ldr	r3, [pc, #244]	; (8005918 <HAL_ADC_PollForConversion+0x1f0>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8005826:	f7ff fc23 	bl	8005070 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800582c:	e01a      	b.n	8005864 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d016      	beq.n	8005864 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_ADC_PollForConversion+0x124>
 800583c:	f7ff fc18 	bl	8005070 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d20b      	bcs.n	8005864 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f043 0204 	orr.w	r2, r3, #4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e04f      	b.n	8005904 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0dd      	beq.n	800582e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005888:	2b00      	cmp	r3, #0
 800588a:	d131      	bne.n	80058f0 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8005892:	2b00      	cmp	r3, #0
 8005894:	d12c      	bne.n	80058f0 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d125      	bne.n	80058f0 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d112      	bne.n	80058d8 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d112      	bne.n	80058f0 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
 80058d6:	e00b      	b.n	80058f0 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f043 0220 	orr.w	r2, r3, #32
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	f043 0201 	orr.w	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	50000100 	.word	0x50000100
 8005910:	50000300 	.word	0x50000300
 8005914:	50000700 	.word	0x50000700
 8005918:	50000400 	.word	0x50000400

0800591c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b09b      	sub	sp, #108	; 0x6c
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_ADC_ConfigChannel+0x22>
 8005956:	2302      	movs	r3, #2
 8005958:	e2cb      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x5ba>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 82af 	bne.w	8005ed0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d81c      	bhi.n	80059b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4413      	add	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	461a      	mov	r2, r3
 800598e:	231f      	movs	r3, #31
 8005990:	4093      	lsls	r3, r2
 8005992:	43db      	mvns	r3, r3
 8005994:	4019      	ands	r1, r3
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	fa00 f203 	lsl.w	r2, r0, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
 80059b2:	e063      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b09      	cmp	r3, #9
 80059ba:	d81e      	bhi.n	80059fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	3b1e      	subs	r3, #30
 80059d0:	221f      	movs	r2, #31
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	4019      	ands	r1, r3
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	3b1e      	subs	r3, #30
 80059ec:	fa00 f203 	lsl.w	r2, r0, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	635a      	str	r2, [r3, #52]	; 0x34
 80059f8:	e040      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b0e      	cmp	r3, #14
 8005a00:	d81e      	bhi.n	8005a40 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	3b3c      	subs	r3, #60	; 0x3c
 8005a16:	221f      	movs	r2, #31
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	4019      	ands	r1, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	4413      	add	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	3b3c      	subs	r3, #60	; 0x3c
 8005a32:	fa00 f203 	lsl.w	r2, r0, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a3e:	e01d      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	3b5a      	subs	r3, #90	; 0x5a
 8005a54:	221f      	movs	r2, #31
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	4019      	ands	r1, r3
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	3b5a      	subs	r3, #90	; 0x5a
 8005a70:	fa00 f203 	lsl.w	r2, r0, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f040 80e5 	bne.w	8005c56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d91c      	bls.n	8005ace <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6999      	ldr	r1, [r3, #24]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3b1e      	subs	r3, #30
 8005aa6:	2207      	movs	r2, #7
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	4019      	ands	r1, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6898      	ldr	r0, [r3, #8]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	3b1e      	subs	r3, #30
 8005ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]
 8005acc:	e019      	b.n	8005b02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6959      	ldr	r1, [r3, #20]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	2207      	movs	r2, #7
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	4019      	ands	r1, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6898      	ldr	r0, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	fa00 f203 	lsl.w	r2, r0, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	695a      	ldr	r2, [r3, #20]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	08db      	lsrs	r3, r3, #3
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d84f      	bhi.n	8005bc4 <HAL_ADC_ConfigChannel+0x28c>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_ADC_ConfigChannel+0x1f4>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b5f 	.word	0x08005b5f
 8005b34:	08005b81 	.word	0x08005b81
 8005b38:	08005ba3 	.word	0x08005ba3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b42:	4b9f      	ldr	r3, [pc, #636]	; (8005dc0 <HAL_ADC_ConfigChannel+0x488>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	0691      	lsls	r1, r2, #26
 8005b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005b5c:	e07e      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b64:	4b96      	ldr	r3, [pc, #600]	; (8005dc0 <HAL_ADC_ConfigChannel+0x488>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	0691      	lsls	r1, r2, #26
 8005b6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b70:	430a      	orrs	r2, r1
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005b7e:	e06d      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b86:	4b8e      	ldr	r3, [pc, #568]	; (8005dc0 <HAL_ADC_ConfigChannel+0x488>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	0691      	lsls	r1, r2, #26
 8005b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b92:	430a      	orrs	r2, r1
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005b9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005ba0:	e05c      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005ba8:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <HAL_ADC_ConfigChannel+0x488>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	0691      	lsls	r1, r2, #26
 8005bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005bc0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005bc2:	e04b      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	069b      	lsls	r3, r3, #26
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d107      	bne.n	8005be8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	069b      	lsls	r3, r3, #26
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d107      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	069b      	lsls	r3, r3, #26
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d107      	bne.n	8005c30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	069b      	lsls	r3, r3, #26
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d10a      	bne.n	8005c5a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005c52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005c54:	e001      	b.n	8005c5a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x324>
      break;
 8005c5a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d108      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x344>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x344>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x346>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f040 8131 	bne.w	8005ee6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d00f      	beq.n	8005cac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43da      	mvns	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005caa:	e049      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b09      	cmp	r3, #9
 8005ccc:	d91c      	bls.n	8005d08 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6999      	ldr	r1, [r3, #24]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	3b1b      	subs	r3, #27
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	4019      	ands	r1, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6898      	ldr	r0, [r3, #8]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3b1b      	subs	r3, #27
 8005cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	619a      	str	r2, [r3, #24]
 8005d06:	e01b      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	4613      	mov	r3, r2
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	4413      	add	r3, r2
 8005d1a:	2207      	movs	r2, #7
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	43db      	mvns	r3, r3
 8005d22:	4019      	ands	r1, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6898      	ldr	r0, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	fa00 f203 	lsl.w	r2, r0, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d48:	d004      	beq.n	8005d54 <HAL_ADC_ConfigChannel+0x41c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <HAL_ADC_ConfigChannel+0x48c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x420>
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <HAL_ADC_ConfigChannel+0x490>)
 8005d56:	e000      	b.n	8005d5a <HAL_ADC_ConfigChannel+0x422>
 8005d58:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <HAL_ADC_ConfigChannel+0x494>)
 8005d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d105      	bne.n	8005d70 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d015      	beq.n	8005d9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005d74:	2b11      	cmp	r3, #17
 8005d76:	d105      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005d88:	2b12      	cmp	r3, #18
 8005d8a:	f040 80ac 	bne.w	8005ee6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 80a5 	bne.w	8005ee6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005da4:	d102      	bne.n	8005dac <HAL_ADC_ConfigChannel+0x474>
 8005da6:	4b07      	ldr	r3, [pc, #28]	; (8005dc4 <HAL_ADC_ConfigChannel+0x48c>)
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e023      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x4bc>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a04      	ldr	r2, [pc, #16]	; (8005dc4 <HAL_ADC_ConfigChannel+0x48c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d10c      	bne.n	8005dd0 <HAL_ADC_ConfigChannel+0x498>
 8005db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e01a      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x4bc>
 8005dbe:	bf00      	nop
 8005dc0:	83fff000 	.word	0x83fff000
 8005dc4:	50000100 	.word	0x50000100
 8005dc8:	50000300 	.word	0x50000300
 8005dcc:	50000700 	.word	0x50000700
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	; (8005f00 <HAL_ADC_ConfigChannel+0x5c8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d102      	bne.n	8005de0 <HAL_ADC_ConfigChannel+0x4a8>
 8005dda:	4b4a      	ldr	r3, [pc, #296]	; (8005f04 <HAL_ADC_ConfigChannel+0x5cc>)
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e009      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x4bc>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a47      	ldr	r2, [pc, #284]	; (8005f04 <HAL_ADC_ConfigChannel+0x5cc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d102      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x4b8>
 8005dea:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <HAL_ADC_ConfigChannel+0x5c8>)
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e001      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x4bc>
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d108      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x4dc>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x4dc>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x4de>
 8005e14:	2300      	movs	r3, #0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d150      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005e1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d010      	beq.n	8005e42 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d107      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x504>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x504>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_ADC_ConfigChannel+0x506>
 8005e3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d13c      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b10      	cmp	r3, #16
 8005e48:	d11d      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x54e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e52:	d118      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e60:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <HAL_ADC_ConfigChannel+0x5d0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_ADC_ConfigChannel+0x5d4>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0c9a      	lsrs	r2, r3, #18
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e76:	e002      	b.n	8005e7e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f9      	bne.n	8005e78 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005e84:	e02e      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b11      	cmp	r3, #17
 8005e8c:	d10b      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x56e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e96:	d106      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ea4:	e01e      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b12      	cmp	r3, #18
 8005eac:	d11a      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005eba:	e013      	b.n	8005ee4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ece:	e00a      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005ee2:	e000      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ee4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005eee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	376c      	adds	r7, #108	; 0x6c
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	50000400 	.word	0x50000400
 8005f04:	50000500 	.word	0x50000500
 8005f08:	20000010 	.word	0x20000010
 8005f0c:	431bde83 	.word	0x431bde83

08005f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d108      	bne.n	8005f3c <ADC_Enable+0x2c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <ADC_Enable+0x2c>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <ADC_Enable+0x2e>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d13c      	bne.n	8005fbc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <ADC_Enable+0xb8>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00d      	beq.n	8005f6c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f043 0210 	orr.w	r2, r3, #16
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	f043 0201 	orr.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e028      	b.n	8005fbe <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8005f7c:	f7ff f878 	bl	8005070 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005f82:	e014      	b.n	8005fae <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f84:	f7ff f874 	bl	8005070 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d90d      	bls.n	8005fae <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e007      	b.n	8005fbe <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d1e3      	bne.n	8005f84 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	8000003f 	.word	0x8000003f

08005fcc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d108      	bne.n	8005ff8 <ADC_Disable+0x2c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <ADC_Disable+0x2c>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <ADC_Disable+0x2e>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d040      	beq.n	8006080 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 030d 	and.w	r3, r3, #13
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10f      	bne.n	800602c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0202 	orr.w	r2, r2, #2
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2203      	movs	r2, #3
 8006022:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006024:	f7ff f824 	bl	8005070 <HAL_GetTick>
 8006028:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800602a:	e022      	b.n	8006072 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0210 	orr.w	r2, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	f043 0201 	orr.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e01c      	b.n	8006082 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006048:	f7ff f812 	bl	8005070 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d90d      	bls.n	8006072 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f043 0210 	orr.w	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e007      	b.n	8006082 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d0e3      	beq.n	8006048 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 030c 	and.w	r3, r3, #12
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8094 	beq.w	80061da <ADC_ConversionStop+0x14e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c0:	d12a      	bne.n	8006118 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d126      	bne.n	8006118 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d122      	bne.n	8006118 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80060d2:	230c      	movs	r3, #12
 80060d4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80060d6:	e014      	b.n	8006102 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4a42      	ldr	r2, [pc, #264]	; (80061e4 <ADC_ConversionStop+0x158>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d90d      	bls.n	80060fc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f043 0210 	orr.w	r2, r3, #16
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f0:	f043 0201 	orr.w	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e06f      	b.n	80061dc <ADC_ConversionStop+0x150>
        }
        Conversion_Timeout_CPU_cycles ++;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3301      	adds	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d1e3      	bne.n	80060d8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2240      	movs	r2, #64	; 0x40
 8006116:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b60      	cmp	r3, #96	; 0x60
 800611c:	d015      	beq.n	800614a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d10e      	bne.n	800614a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0210 	orr.w	r2, r2, #16
 8006148:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d015      	beq.n	800617c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b08      	cmp	r3, #8
 800615c:	d10e      	bne.n	800617c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8006168:	2b00      	cmp	r3, #0
 800616a:	d107      	bne.n	800617c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0220 	orr.w	r2, r2, #32
 800617a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b60      	cmp	r3, #96	; 0x60
 8006180:	d005      	beq.n	800618e <ADC_ConversionStop+0x102>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b6c      	cmp	r3, #108	; 0x6c
 8006186:	d105      	bne.n	8006194 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006188:	230c      	movs	r3, #12
 800618a:	617b      	str	r3, [r7, #20]
        break;
 800618c:	e005      	b.n	800619a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800618e:	2308      	movs	r3, #8
 8006190:	617b      	str	r3, [r7, #20]
        break;
 8006192:	e002      	b.n	800619a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006194:	2304      	movs	r3, #4
 8006196:	617b      	str	r3, [r7, #20]
        break;
 8006198:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800619a:	f7fe ff69 	bl	8005070 <HAL_GetTick>
 800619e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80061a0:	e014      	b.n	80061cc <ADC_ConversionStop+0x140>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80061a2:	f7fe ff65 	bl	8005070 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d90d      	bls.n	80061cc <ADC_ConversionStop+0x140>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f043 0210 	orr.w	r2, r3, #16
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e007      	b.n	80061dc <ADC_ConversionStop+0x150>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4013      	ands	r3, r2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <ADC_ConversionStop+0x116>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	000993ff 	.word	0x000993ff

080061e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <__NVIC_SetPriorityGrouping+0x44>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006204:	4013      	ands	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800621a:	4a04      	ldr	r2, [pc, #16]	; (800622c <__NVIC_SetPriorityGrouping+0x44>)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	60d3      	str	r3, [r2, #12]
}
 8006220:	bf00      	nop
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	e000ed00 	.word	0xe000ed00

08006230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006234:	4b04      	ldr	r3, [pc, #16]	; (8006248 <__NVIC_GetPriorityGrouping+0x18>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	0a1b      	lsrs	r3, r3, #8
 800623a:	f003 0307 	and.w	r3, r3, #7
}
 800623e:	4618      	mov	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	db0b      	blt.n	8006276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	f003 021f 	and.w	r2, r3, #31
 8006264:	4907      	ldr	r1, [pc, #28]	; (8006284 <__NVIC_EnableIRQ+0x38>)
 8006266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	2001      	movs	r0, #1
 800626e:	fa00 f202 	lsl.w	r2, r0, r2
 8006272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	e000e100 	.word	0xe000e100

08006288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006298:	2b00      	cmp	r3, #0
 800629a:	db0a      	blt.n	80062b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	490c      	ldr	r1, [pc, #48]	; (80062d4 <__NVIC_SetPriority+0x4c>)
 80062a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a6:	0112      	lsls	r2, r2, #4
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	440b      	add	r3, r1
 80062ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062b0:	e00a      	b.n	80062c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	4908      	ldr	r1, [pc, #32]	; (80062d8 <__NVIC_SetPriority+0x50>)
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	3b04      	subs	r3, #4
 80062c0:	0112      	lsls	r2, r2, #4
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	440b      	add	r3, r1
 80062c6:	761a      	strb	r2, [r3, #24]
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	e000e100 	.word	0xe000e100
 80062d8:	e000ed00 	.word	0xe000ed00

080062dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062dc:	b480      	push	{r7}
 80062de:	b089      	sub	sp, #36	; 0x24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f1c3 0307 	rsb	r3, r3, #7
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	bf28      	it	cs
 80062fa:	2304      	movcs	r3, #4
 80062fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	3304      	adds	r3, #4
 8006302:	2b06      	cmp	r3, #6
 8006304:	d902      	bls.n	800630c <NVIC_EncodePriority+0x30>
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3b03      	subs	r3, #3
 800630a:	e000      	b.n	800630e <NVIC_EncodePriority+0x32>
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006310:	f04f 32ff 	mov.w	r2, #4294967295
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	43da      	mvns	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	401a      	ands	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006324:	f04f 31ff 	mov.w	r1, #4294967295
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	fa01 f303 	lsl.w	r3, r1, r3
 800632e:	43d9      	mvns	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006334:	4313      	orrs	r3, r2
         );
}
 8006336:	4618      	mov	r0, r3
 8006338:	3724      	adds	r7, #36	; 0x24
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
	...

08006344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3b01      	subs	r3, #1
 8006350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006354:	d301      	bcc.n	800635a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006356:	2301      	movs	r3, #1
 8006358:	e00f      	b.n	800637a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800635a:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <SysTick_Config+0x40>)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3b01      	subs	r3, #1
 8006360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006362:	210f      	movs	r1, #15
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	f7ff ff8e 	bl	8006288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <SysTick_Config+0x40>)
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006372:	4b04      	ldr	r3, [pc, #16]	; (8006384 <SysTick_Config+0x40>)
 8006374:	2207      	movs	r2, #7
 8006376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000e010 	.word	0xe000e010

08006388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff29 	bl	80061e8 <__NVIC_SetPriorityGrouping>
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	4603      	mov	r3, r0
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
 80063aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063b0:	f7ff ff3e 	bl	8006230 <__NVIC_GetPriorityGrouping>
 80063b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff8e 	bl	80062dc <NVIC_EncodePriority>
 80063c0:	4602      	mov	r2, r0
 80063c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff ff5d 	bl	8006288 <__NVIC_SetPriority>
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff ff31 	bl	800624c <__NVIC_EnableIRQ>
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ffa2 	bl	8006344 <SysTick_Config>
 8006400:	4603      	mov	r3, r0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800641a:	e154      	b.n	80066c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8146 	beq.w	80066c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d003      	beq.n	8006444 <HAL_GPIO_Init+0x38>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b12      	cmp	r3, #18
 8006442:	d123      	bne.n	800648c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	08da      	lsrs	r2, r3, #3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3208      	adds	r2, #8
 800644c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	220f      	movs	r2, #15
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	08da      	lsrs	r2, r3, #3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3208      	adds	r2, #8
 8006486:	6939      	ldr	r1, [r7, #16]
 8006488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	2203      	movs	r2, #3
 8006498:	fa02 f303 	lsl.w	r3, r2, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4013      	ands	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 0203 	and.w	r2, r3, #3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d00b      	beq.n	80064e0 <HAL_GPIO_Init+0xd4>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d007      	beq.n	80064e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80064d4:	2b11      	cmp	r3, #17
 80064d6:	d003      	beq.n	80064e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b12      	cmp	r3, #18
 80064de:	d130      	bne.n	8006542 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	2203      	movs	r2, #3
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	43db      	mvns	r3, r3
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4013      	ands	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006516:	2201      	movs	r2, #1
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4013      	ands	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	f003 0201 	and.w	r2, r3, #1
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	2203      	movs	r2, #3
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	43db      	mvns	r3, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 80a0 	beq.w	80066c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006580:	4b58      	ldr	r3, [pc, #352]	; (80066e4 <HAL_GPIO_Init+0x2d8>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	4a57      	ldr	r2, [pc, #348]	; (80066e4 <HAL_GPIO_Init+0x2d8>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6193      	str	r3, [r2, #24]
 800658c:	4b55      	ldr	r3, [pc, #340]	; (80066e4 <HAL_GPIO_Init+0x2d8>)
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006598:	4a53      	ldr	r2, [pc, #332]	; (80066e8 <HAL_GPIO_Init+0x2dc>)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	3302      	adds	r3, #2
 80065a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	220f      	movs	r2, #15
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4013      	ands	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065c2:	d019      	beq.n	80065f8 <HAL_GPIO_Init+0x1ec>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a49      	ldr	r2, [pc, #292]	; (80066ec <HAL_GPIO_Init+0x2e0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_GPIO_Init+0x1e8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a48      	ldr	r2, [pc, #288]	; (80066f0 <HAL_GPIO_Init+0x2e4>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00d      	beq.n	80065f0 <HAL_GPIO_Init+0x1e4>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a47      	ldr	r2, [pc, #284]	; (80066f4 <HAL_GPIO_Init+0x2e8>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <HAL_GPIO_Init+0x1e0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a46      	ldr	r2, [pc, #280]	; (80066f8 <HAL_GPIO_Init+0x2ec>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_GPIO_Init+0x1dc>
 80065e4:	2304      	movs	r3, #4
 80065e6:	e008      	b.n	80065fa <HAL_GPIO_Init+0x1ee>
 80065e8:	2305      	movs	r3, #5
 80065ea:	e006      	b.n	80065fa <HAL_GPIO_Init+0x1ee>
 80065ec:	2303      	movs	r3, #3
 80065ee:	e004      	b.n	80065fa <HAL_GPIO_Init+0x1ee>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e002      	b.n	80065fa <HAL_GPIO_Init+0x1ee>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <HAL_GPIO_Init+0x1ee>
 80065f8:	2300      	movs	r3, #0
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	f002 0203 	and.w	r2, r2, #3
 8006600:	0092      	lsls	r2, r2, #2
 8006602:	4093      	lsls	r3, r2
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800660a:	4937      	ldr	r1, [pc, #220]	; (80066e8 <HAL_GPIO_Init+0x2dc>)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	3302      	adds	r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006618:	4b38      	ldr	r3, [pc, #224]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	43db      	mvns	r3, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4013      	ands	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800663c:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	43db      	mvns	r3, r3
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4013      	ands	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006666:	4a25      	ldr	r2, [pc, #148]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800666c:	4b23      	ldr	r3, [pc, #140]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	43db      	mvns	r3, r3
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	43db      	mvns	r3, r3
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4013      	ands	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80066ba:	4a10      	ldr	r2, [pc, #64]	; (80066fc <HAL_GPIO_Init+0x2f0>)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3301      	adds	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f aea3 	bne.w	800641c <HAL_GPIO_Init+0x10>
  }
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40010000 	.word	0x40010000
 80066ec:	48000400 	.word	0x48000400
 80066f0:	48000800 	.word	0x48000800
 80066f4:	48000c00 	.word	0x48000c00
 80066f8:	48001000 	.word	0x48001000
 80066fc:	40010400 	.word	0x40010400

08006700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	807b      	strh	r3, [r7, #2]
 800670c:	4613      	mov	r3, r2
 800670e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006710:	787b      	ldrb	r3, [r7, #1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006716:	887a      	ldrh	r2, [r7, #2]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800671c:	e002      	b.n	8006724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	887b      	ldrh	r3, [r7, #2]
 8006742:	4013      	ands	r3, r2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006748:	887b      	ldrh	r3, [r7, #2]
 800674a:	041a      	lsls	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006750:	e002      	b.n	8006758 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006752:	887a      	ldrh	r2, [r7, #2]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	619a      	str	r2, [r3, #24]
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e081      	b.n	800687a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fe f8dc 	bl	8004948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	; 0x24
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d107      	bne.n	80067de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	e006      	b.n	80067ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d104      	bne.n	80067fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	ea42 0103 	orr.w	r1, r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69d9      	ldr	r1, [r3, #28]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1a      	ldr	r2, [r3, #32]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	4608      	mov	r0, r1
 800688e:	4611      	mov	r1, r2
 8006890:	461a      	mov	r2, r3
 8006892:	4603      	mov	r3, r0
 8006894:	817b      	strh	r3, [r7, #10]
 8006896:	460b      	mov	r3, r1
 8006898:	813b      	strh	r3, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	f040 80f9 	bne.w	8006a9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_I2C_Mem_Write+0x34>
 80068b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0ed      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_I2C_Mem_Write+0x4e>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0e6      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068da:	f7fe fbc9 	bl	8005070 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2319      	movs	r3, #25
 80068e6:	2201      	movs	r2, #1
 80068e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fbcb 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0d1      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2221      	movs	r2, #33	; 0x21
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800691c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006924:	88f8      	ldrh	r0, [r7, #6]
 8006926:	893a      	ldrh	r2, [r7, #8]
 8006928:	8979      	ldrh	r1, [r7, #10]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fadb 	bl	8006ef0 <I2C_RequestMemoryWrite>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0a9      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d90e      	bls.n	8006974 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006960:	b2da      	uxtb	r2, r3
 8006962:	8979      	ldrh	r1, [r7, #10]
 8006964:	2300      	movs	r3, #0
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fcad 	bl	80072cc <I2C_TransferConfig>
 8006972:	e00f      	b.n	8006994 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006982:	b2da      	uxtb	r2, r3
 8006984:	8979      	ldrh	r1, [r7, #10]
 8006986:	2300      	movs	r3, #0
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fc9c 	bl	80072cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fbb5 	bl	8007108 <I2C_WaitOnTXISFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e07b      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d034      	beq.n	8006a4c <HAL_I2C_Mem_Write+0x1c8>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d130      	bne.n	8006a4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fb47 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e04d      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2bff      	cmp	r3, #255	; 0xff
 8006a0c:	d90e      	bls.n	8006a2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	8979      	ldrh	r1, [r7, #10]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fc51 	bl	80072cc <I2C_TransferConfig>
 8006a2a:	e00f      	b.n	8006a4c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	8979      	ldrh	r1, [r7, #10]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fc40 	bl	80072cc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d19e      	bne.n	8006994 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fb94 	bl	8007188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e01a      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <HAL_I2C_Mem_Write+0x224>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	fe00e800 	.word	0xfe00e800

08006aac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	817b      	strh	r3, [r7, #10]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	813b      	strh	r3, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	f040 80fd 	bne.w	8006cce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_I2C_Mem_Read+0x34>
 8006ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0f1      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_I2C_Mem_Read+0x4e>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e0ea      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b02:	f7fe fab5 	bl	8005070 <HAL_GetTick>
 8006b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2319      	movs	r3, #25
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fab7 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0d5      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2222      	movs	r2, #34	; 0x22
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2240      	movs	r2, #64	; 0x40
 8006b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b4c:	88f8      	ldrh	r0, [r7, #6]
 8006b4e:	893a      	ldrh	r2, [r7, #8]
 8006b50:	8979      	ldrh	r1, [r7, #10]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fa1b 	bl	8006f98 <I2C_RequestMemoryRead>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0ad      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d90e      	bls.n	8006b9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	8979      	ldrh	r1, [r7, #10]
 8006b8c:	4b52      	ldr	r3, [pc, #328]	; (8006cd8 <HAL_I2C_Mem_Read+0x22c>)
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fb99 	bl	80072cc <I2C_TransferConfig>
 8006b9a:	e00f      	b.n	8006bbc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	8979      	ldrh	r1, [r7, #10]
 8006bae:	4b4a      	ldr	r3, [pc, #296]	; (8006cd8 <HAL_I2C_Mem_Read+0x22c>)
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fb88 	bl	80072cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa5e 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e07c      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d034      	beq.n	8006c7c <HAL_I2C_Mem_Read+0x1d0>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d130      	bne.n	8006c7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	2200      	movs	r2, #0
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fa2f 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e04d      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2bff      	cmp	r3, #255	; 0xff
 8006c3c:	d90e      	bls.n	8006c5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	8979      	ldrh	r1, [r7, #10]
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fb39 	bl	80072cc <I2C_TransferConfig>
 8006c5a:	e00f      	b.n	8006c7c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	8979      	ldrh	r1, [r7, #10]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fb28 	bl	80072cc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d19a      	bne.n	8006bbc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 fa7c 	bl	8007188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01a      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6859      	ldr	r1, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_I2C_Mem_Read+0x230>)
 8006cae:	400b      	ands	r3, r1
 8006cb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
  }
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	80002400 	.word	0x80002400
 8006cdc:	fe00e800 	.word	0xfe00e800

08006ce0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	460b      	mov	r3, r1
 8006cee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	f040 80f1 	bne.w	8006ee4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d10:	d101      	bne.n	8006d16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8006d12:	2302      	movs	r3, #2
 8006d14:	e0e7      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_I2C_IsDeviceReady+0x44>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e0e0      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2224      	movs	r2, #36	; 0x24
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <HAL_I2C_IsDeviceReady+0x72>
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d50:	e004      	b.n	8006d5c <HAL_I2C_IsDeviceReady+0x7c>
 8006d52:	897b      	ldrh	r3, [r7, #10]
 8006d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d58:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006d62:	f7fe f985 	bl	8005070 <HAL_GetTick>
 8006d66:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	bf0c      	ite	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	2300      	movne	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b10      	cmp	r3, #16
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006d94:	e034      	b.n	8006e00 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d01a      	beq.n	8006dd4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fe f967 	bl	8005070 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <HAL_I2C_IsDeviceReady+0xd4>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10f      	bne.n	8006dd4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e088      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006e00:	7ffb      	ldrb	r3, [r7, #31]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <HAL_I2C_IsDeviceReady+0x12c>
 8006e06:	7fbb      	ldrb	r3, [r7, #30]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0c4      	beq.n	8006d96 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d01a      	beq.n	8006e50 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2120      	movs	r1, #32
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f92f 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e058      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e04a      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2120      	movs	r1, #32
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f914 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e03d      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2210      	movs	r2, #16
 8006e70:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2220      	movs	r2, #32
 8006e78:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d118      	bne.n	8006eb4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e90:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2120      	movs	r1, #32
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f8f3 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e01c      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	f63f af3b 	bhi.w	8006d3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	4608      	mov	r0, r1
 8006efa:	4611      	mov	r1, r2
 8006efc:	461a      	mov	r2, r3
 8006efe:	4603      	mov	r3, r0
 8006f00:	817b      	strh	r3, [r7, #10]
 8006f02:	460b      	mov	r3, r1
 8006f04:	813b      	strh	r3, [r7, #8]
 8006f06:	4613      	mov	r3, r2
 8006f08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	8979      	ldrh	r1, [r7, #10]
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <I2C_RequestMemoryWrite+0xa4>)
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f9d7 	bl	80072cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	69b9      	ldr	r1, [r7, #24]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f8f0 	bl	8007108 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e02c      	b.n	8006f8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d105      	bne.n	8006f44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f38:	893b      	ldrh	r3, [r7, #8]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	629a      	str	r2, [r3, #40]	; 0x28
 8006f42:	e015      	b.n	8006f70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f44:	893b      	ldrh	r3, [r7, #8]
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f8d6 	bl	8007108 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e012      	b.n	8006f8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2200      	movs	r2, #0
 8006f78:	2180      	movs	r1, #128	; 0x80
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f884 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	80002000 	.word	0x80002000

08006f98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	817b      	strh	r3, [r7, #10]
 8006faa:	460b      	mov	r3, r1
 8006fac:	813b      	strh	r3, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	8979      	ldrh	r1, [r7, #10]
 8006fb8:	4b20      	ldr	r3, [pc, #128]	; (800703c <I2C_RequestMemoryRead+0xa4>)
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f984 	bl	80072cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	69b9      	ldr	r1, [r7, #24]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f89d 	bl	8007108 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e02c      	b.n	8007032 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d105      	bne.n	8006fea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fde:	893b      	ldrh	r3, [r7, #8]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fe8:	e015      	b.n	8007016 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	69b9      	ldr	r1, [r7, #24]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f883 	bl	8007108 <I2C_WaitOnTXISFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e012      	b.n	8007032 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800700c:	893b      	ldrh	r3, [r7, #8]
 800700e:	b2da      	uxtb	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2200      	movs	r2, #0
 800701e:	2140      	movs	r1, #64	; 0x40
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f831 	bl	8007088 <I2C_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	80002000 	.word	0x80002000

08007040 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d103      	bne.n	800705e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b01      	cmp	r3, #1
 800706a:	d007      	beq.n	800707c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	699a      	ldr	r2, [r3, #24]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	619a      	str	r2, [r3, #24]
  }
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007098:	e022      	b.n	80070e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d01e      	beq.n	80070e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a2:	f7fd ffe5 	bl	8005070 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d302      	bcc.n	80070b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d113      	bne.n	80070e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e00f      	b.n	8007100 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4013      	ands	r3, r2
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d0cd      	beq.n	800709a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007114:	e02c      	b.n	8007170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f870 	bl	8007200 <I2C_IsAcknowledgeFailed>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e02a      	b.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d01e      	beq.n	8007170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007132:	f7fd ff9d 	bl	8005070 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d113      	bne.n	8007170 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714c:	f043 0220 	orr.w	r2, r3, #32
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e007      	b.n	8007180 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b02      	cmp	r3, #2
 800717c:	d1cb      	bne.n	8007116 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007194:	e028      	b.n	80071e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f830 	bl	8007200 <I2C_IsAcknowledgeFailed>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e026      	b.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fd ff61 	bl	8005070 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d113      	bne.n	80071e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e007      	b.n	80071f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d1cf      	bne.n	8007196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d151      	bne.n	80072be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800721a:	e022      	b.n	8007262 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d01e      	beq.n	8007262 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007224:	f7fd ff24 	bl	8005070 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <I2C_IsAcknowledgeFailed+0x3a>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d113      	bne.n	8007262 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e02e      	b.n	80072c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b20      	cmp	r3, #32
 800726e:	d1d5      	bne.n	800721c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2210      	movs	r2, #16
 8007276:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2220      	movs	r2, #32
 800727e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fedd 	bl	8007040 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6859      	ldr	r1, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8007292:	400b      	ands	r3, r1
 8007294:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	f043 0204 	orr.w	r2, r3, #4
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	fe00e800 	.word	0xfe00e800

080072cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	817b      	strh	r3, [r7, #10]
 80072da:	4613      	mov	r3, r2
 80072dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	0d5b      	lsrs	r3, r3, #21
 80072e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <I2C_TransferConfig+0x58>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	43db      	mvns	r3, r3
 80072f2:	ea02 0103 	and.w	r1, r2, r3
 80072f6:	897b      	ldrh	r3, [r7, #10]
 80072f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072fc:	7a7b      	ldrb	r3, [r7, #9]
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	431a      	orrs	r2, r3
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	431a      	orrs	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	03ff63ff 	.word	0x03ff63ff

08007328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b20      	cmp	r3, #32
 800733c:	d138      	bne.n	80073b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007348:	2302      	movs	r3, #2
 800734a:	e032      	b.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2224      	movs	r2, #36	; 0x24
 8007358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0201 	bic.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800737a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6819      	ldr	r1, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2220      	movs	r2, #32
 80073a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e000      	b.n	80073b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073b0:	2302      	movs	r3, #2
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d139      	bne.n	8007448 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073de:	2302      	movs	r3, #2
 80073e0:	e033      	b.n	800744a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2224      	movs	r2, #36	; 0x24
 80073ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 0201 	bic.w	r2, r2, #1
 8007400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007410:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800745e:	af00      	add	r7, sp, #0
 8007460:	1d3b      	adds	r3, r7, #4
 8007462:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007464:	1d3b      	adds	r3, r7, #4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f000 bef4 	b.w	800825a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007472:	1d3b      	adds	r3, r7, #4
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 816a 	beq.w	8007756 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007482:	4bb3      	ldr	r3, [pc, #716]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	2b04      	cmp	r3, #4
 800748c:	d00c      	beq.n	80074a8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800748e:	4bb0      	ldr	r3, [pc, #704]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f003 030c 	and.w	r3, r3, #12
 8007496:	2b08      	cmp	r3, #8
 8007498:	d159      	bne.n	800754e <HAL_RCC_OscConfig+0xf6>
 800749a:	4bad      	ldr	r3, [pc, #692]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a6:	d152      	bne.n	800754e <HAL_RCC_OscConfig+0xf6>
 80074a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074ac:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80074b4:	fa93 f3a3 	rbit	r3, r3
 80074b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80074bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c0:	fab3 f383 	clz	r3, r3
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d102      	bne.n	80074da <HAL_RCC_OscConfig+0x82>
 80074d4:	4b9e      	ldr	r3, [pc, #632]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	e015      	b.n	8007506 <HAL_RCC_OscConfig+0xae>
 80074da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074de:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80074e6:	fa93 f3a3 	rbit	r3, r3
 80074ea:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80074ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074f2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80074f6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80074fa:	fa93 f3a3 	rbit	r3, r3
 80074fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007502:	4b93      	ldr	r3, [pc, #588]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800750a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800750e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007512:	fa92 f2a2 	rbit	r2, r2
 8007516:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800751a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800751e:	fab2 f282 	clz	r2, r2
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	f042 0220 	orr.w	r2, r2, #32
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	f002 021f 	and.w	r2, r2, #31
 800752e:	2101      	movs	r1, #1
 8007530:	fa01 f202 	lsl.w	r2, r1, r2
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 810c 	beq.w	8007754 <HAL_RCC_OscConfig+0x2fc>
 800753c:	1d3b      	adds	r3, r7, #4
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f040 8106 	bne.w	8007754 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f000 be86 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d106      	bne.n	8007568 <HAL_RCC_OscConfig+0x110>
 800755a:	4b7d      	ldr	r3, [pc, #500]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a7c      	ldr	r2, [pc, #496]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e030      	b.n	80075ca <HAL_RCC_OscConfig+0x172>
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10c      	bne.n	800758c <HAL_RCC_OscConfig+0x134>
 8007572:	4b77      	ldr	r3, [pc, #476]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a76      	ldr	r2, [pc, #472]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	4b74      	ldr	r3, [pc, #464]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a73      	ldr	r2, [pc, #460]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e01e      	b.n	80075ca <HAL_RCC_OscConfig+0x172>
 800758c:	1d3b      	adds	r3, r7, #4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007596:	d10c      	bne.n	80075b2 <HAL_RCC_OscConfig+0x15a>
 8007598:	4b6d      	ldr	r3, [pc, #436]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a6c      	ldr	r2, [pc, #432]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 800759e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	4b6a      	ldr	r3, [pc, #424]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a69      	ldr	r2, [pc, #420]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e00b      	b.n	80075ca <HAL_RCC_OscConfig+0x172>
 80075b2:	4b67      	ldr	r3, [pc, #412]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a66      	ldr	r2, [pc, #408]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	4b64      	ldr	r3, [pc, #400]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a63      	ldr	r2, [pc, #396]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80075ca:	4b61      	ldr	r3, [pc, #388]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f023 020f 	bic.w	r2, r3, #15
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	495d      	ldr	r1, [pc, #372]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075de:	1d3b      	adds	r3, r7, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d059      	beq.n	800769c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e8:	f7fd fd42 	bl	8005070 <HAL_GetTick>
 80075ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f0:	e00a      	b.n	8007608 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075f2:	f7fd fd3d 	bl	8005070 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b64      	cmp	r3, #100	; 0x64
 8007600:	d902      	bls.n	8007608 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	f000 be29 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
 8007608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800760c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007610:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007614:	fa93 f3a3 	rbit	r3, r3
 8007618:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800761c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007620:	fab3 f383 	clz	r3, r3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	095b      	lsrs	r3, r3, #5
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d102      	bne.n	800763a <HAL_RCC_OscConfig+0x1e2>
 8007634:	4b46      	ldr	r3, [pc, #280]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	e015      	b.n	8007666 <HAL_RCC_OscConfig+0x20e>
 800763a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800763e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007642:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007646:	fa93 f3a3 	rbit	r3, r3
 800764a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800764e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007652:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007656:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800765a:	fa93 f3a3 	rbit	r3, r3
 800765e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007662:	4b3b      	ldr	r3, [pc, #236]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800766a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800766e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007672:	fa92 f2a2 	rbit	r2, r2
 8007676:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800767a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800767e:	fab2 f282 	clz	r2, r2
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	f042 0220 	orr.w	r2, r2, #32
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	f002 021f 	and.w	r2, r2, #31
 800768e:	2101      	movs	r1, #1
 8007690:	fa01 f202 	lsl.w	r2, r1, r2
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0ab      	beq.n	80075f2 <HAL_RCC_OscConfig+0x19a>
 800769a:	e05c      	b.n	8007756 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769c:	f7fd fce8 	bl	8005070 <HAL_GetTick>
 80076a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076a4:	e00a      	b.n	80076bc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076a6:	f7fd fce3 	bl	8005070 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b64      	cmp	r3, #100	; 0x64
 80076b4:	d902      	bls.n	80076bc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	f000 bdcf 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
 80076bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80076c8:	fa93 f3a3 	rbit	r3, r3
 80076cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80076d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076d4:	fab3 f383 	clz	r3, r3
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f043 0301 	orr.w	r3, r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d102      	bne.n	80076ee <HAL_RCC_OscConfig+0x296>
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	e015      	b.n	800771a <HAL_RCC_OscConfig+0x2c2>
 80076ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80076fa:	fa93 f3a3 	rbit	r3, r3
 80076fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007706:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800770a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800770e:	fa93 f3a3 	rbit	r3, r3
 8007712:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <HAL_RCC_OscConfig+0x2f8>)
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800771e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007722:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007726:	fa92 f2a2 	rbit	r2, r2
 800772a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800772e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007732:	fab2 f282 	clz	r2, r2
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	f042 0220 	orr.w	r2, r2, #32
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	f002 021f 	and.w	r2, r2, #31
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f202 	lsl.w	r2, r1, r2
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ab      	bne.n	80076a6 <HAL_RCC_OscConfig+0x24e>
 800774e:	e002      	b.n	8007756 <HAL_RCC_OscConfig+0x2fe>
 8007750:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 816f 	beq.w	8007a44 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007766:	4bd0      	ldr	r3, [pc, #832]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007772:	4bcd      	ldr	r3, [pc, #820]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b08      	cmp	r3, #8
 800777c:	d16c      	bne.n	8007858 <HAL_RCC_OscConfig+0x400>
 800777e:	4bca      	ldr	r3, [pc, #808]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d166      	bne.n	8007858 <HAL_RCC_OscConfig+0x400>
 800778a:	2302      	movs	r3, #2
 800778c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007790:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007794:	fa93 f3a3 	rbit	r3, r3
 8007798:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800779c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a0:	fab3 f383 	clz	r3, r3
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	f043 0301 	orr.w	r3, r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d102      	bne.n	80077ba <HAL_RCC_OscConfig+0x362>
 80077b4:	4bbc      	ldr	r3, [pc, #752]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	e013      	b.n	80077e2 <HAL_RCC_OscConfig+0x38a>
 80077ba:	2302      	movs	r3, #2
 80077bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80077c4:	fa93 f3a3 	rbit	r3, r3
 80077c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80077cc:	2302      	movs	r3, #2
 80077ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80077d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80077d6:	fa93 f3a3 	rbit	r3, r3
 80077da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80077de:	4bb2      	ldr	r3, [pc, #712]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	2202      	movs	r2, #2
 80077e4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80077e8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80077ec:	fa92 f2a2 	rbit	r2, r2
 80077f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80077f4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80077f8:	fab2 f282 	clz	r2, r2
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	f042 0220 	orr.w	r2, r2, #32
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	f002 021f 	and.w	r2, r2, #31
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f202 	lsl.w	r2, r1, r2
 800780e:	4013      	ands	r3, r2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <HAL_RCC_OscConfig+0x3cc>
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d002      	beq.n	8007824 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f000 bd1b 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007824:	4ba0      	ldr	r3, [pc, #640]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800782c:	1d3b      	adds	r3, r7, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	21f8      	movs	r1, #248	; 0xf8
 8007834:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007838:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800783c:	fa91 f1a1 	rbit	r1, r1
 8007840:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007844:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007848:	fab1 f181 	clz	r1, r1
 800784c:	b2c9      	uxtb	r1, r1
 800784e:	408b      	lsls	r3, r1
 8007850:	4995      	ldr	r1, [pc, #596]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007852:	4313      	orrs	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007856:	e0f5      	b.n	8007a44 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007858:	1d3b      	adds	r3, r7, #4
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8085 	beq.w	800796e <HAL_RCC_OscConfig+0x516>
 8007864:	2301      	movs	r3, #1
 8007866:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800786a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800786e:	fa93 f3a3 	rbit	r3, r3
 8007872:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007876:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800787a:	fab3 f383 	clz	r3, r3
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	461a      	mov	r2, r3
 800788c:	2301      	movs	r3, #1
 800788e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007890:	f7fd fbee 	bl	8005070 <HAL_GetTick>
 8007894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007898:	e00a      	b.n	80078b0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800789a:	f7fd fbe9 	bl	8005070 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d902      	bls.n	80078b0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	f000 bcd5 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
 80078b0:	2302      	movs	r3, #2
 80078b2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80078ba:	fa93 f3a3 	rbit	r3, r3
 80078be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80078c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c6:	fab3 f383 	clz	r3, r3
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f043 0301 	orr.w	r3, r3, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d102      	bne.n	80078e0 <HAL_RCC_OscConfig+0x488>
 80078da:	4b73      	ldr	r3, [pc, #460]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	e013      	b.n	8007908 <HAL_RCC_OscConfig+0x4b0>
 80078e0:	2302      	movs	r3, #2
 80078e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80078ea:	fa93 f3a3 	rbit	r3, r3
 80078ee:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80078f2:	2302      	movs	r3, #2
 80078f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80078f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80078fc:	fa93 f3a3 	rbit	r3, r3
 8007900:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007904:	4b68      	ldr	r3, [pc, #416]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2202      	movs	r2, #2
 800790a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800790e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007912:	fa92 f2a2 	rbit	r2, r2
 8007916:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800791a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800791e:	fab2 f282 	clz	r2, r2
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	f042 0220 	orr.w	r2, r2, #32
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	f002 021f 	and.w	r2, r2, #31
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f202 	lsl.w	r2, r1, r2
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0af      	beq.n	800789a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800793a:	4b5b      	ldr	r3, [pc, #364]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	21f8      	movs	r1, #248	; 0xf8
 800794a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007952:	fa91 f1a1 	rbit	r1, r1
 8007956:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800795a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800795e:	fab1 f181 	clz	r1, r1
 8007962:	b2c9      	uxtb	r1, r1
 8007964:	408b      	lsls	r3, r1
 8007966:	4950      	ldr	r1, [pc, #320]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007968:	4313      	orrs	r3, r2
 800796a:	600b      	str	r3, [r1, #0]
 800796c:	e06a      	b.n	8007a44 <HAL_RCC_OscConfig+0x5ec>
 800796e:	2301      	movs	r3, #1
 8007970:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007974:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007978:	fa93 f3a3 	rbit	r3, r3
 800797c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007980:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007984:	fab3 f383 	clz	r3, r3
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800798e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	461a      	mov	r2, r3
 8007996:	2300      	movs	r3, #0
 8007998:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799a:	f7fd fb69 	bl	8005070 <HAL_GetTick>
 800799e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a2:	e00a      	b.n	80079ba <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079a4:	f7fd fb64 	bl	8005070 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d902      	bls.n	80079ba <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	f000 bc50 	b.w	800825a <HAL_RCC_OscConfig+0xe02>
 80079ba:	2302      	movs	r3, #2
 80079bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079c4:	fa93 f3a3 	rbit	r3, r3
 80079c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079d0:	fab3 f383 	clz	r3, r3
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	f043 0301 	orr.w	r3, r3, #1
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d102      	bne.n	80079ea <HAL_RCC_OscConfig+0x592>
 80079e4:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	e013      	b.n	8007a12 <HAL_RCC_OscConfig+0x5ba>
 80079ea:	2302      	movs	r3, #2
 80079ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079f4:	fa93 f3a3 	rbit	r3, r3
 80079f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80079fc:	2302      	movs	r3, #2
 80079fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007a02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007a06:	fa93 f3a3 	rbit	r3, r3
 8007a0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a0e:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <HAL_RCC_OscConfig+0x650>)
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	2202      	movs	r2, #2
 8007a14:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007a18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007a1c:	fa92 f2a2 	rbit	r2, r2
 8007a20:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007a24:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007a28:	fab2 f282 	clz	r2, r2
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	f042 0220 	orr.w	r2, r2, #32
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	f002 021f 	and.w	r2, r2, #31
 8007a38:	2101      	movs	r1, #1
 8007a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1af      	bne.n	80079a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a44:	1d3b      	adds	r3, r7, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80da 	beq.w	8007c08 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a54:	1d3b      	adds	r3, r7, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d069      	beq.n	8007b32 <HAL_RCC_OscConfig+0x6da>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007a68:	fa93 f3a3 	rbit	r3, r3
 8007a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a74:	fab3 f383 	clz	r3, r3
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <HAL_RCC_OscConfig+0x654>)
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	461a      	mov	r2, r3
 8007a84:	2301      	movs	r3, #1
 8007a86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a88:	f7fd faf2 	bl	8005070 <HAL_GetTick>
 8007a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a90:	e00e      	b.n	8007ab0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a92:	f7fd faed 	bl	8005070 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d906      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e3d9      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8007aa6:	bf00      	nop
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	10908120 	.word	0x10908120
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aba:	fa93 f3a3 	rbit	r3, r3
 8007abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ac2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	fa93 f2a3 	rbit	r2, r3
 8007ad4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007ade:	2202      	movs	r2, #2
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	fa93 f2a3 	rbit	r2, r3
 8007aec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007af0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007af2:	4ba5      	ldr	r3, [pc, #660]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007af6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007afa:	2102      	movs	r1, #2
 8007afc:	6019      	str	r1, [r3, #0]
 8007afe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	fa93 f1a3 	rbit	r1, r3
 8007b08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007b0c:	6019      	str	r1, [r3, #0]
  return result;
 8007b0e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	fab3 f383 	clz	r3, r3
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f003 031f 	and.w	r3, r3, #31
 8007b24:	2101      	movs	r1, #1
 8007b26:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0b0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x63a>
 8007b30:	e06a      	b.n	8007c08 <HAL_RCC_OscConfig+0x7b0>
 8007b32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	fa93 f2a3 	rbit	r2, r3
 8007b44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007b48:	601a      	str	r2, [r3, #0]
  return result;
 8007b4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007b4e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b50:	fab3 f383 	clz	r3, r3
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b8c      	ldr	r3, [pc, #560]	; (8007d8c <HAL_RCC_OscConfig+0x934>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2300      	movs	r3, #0
 8007b62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b64:	f7fd fa84 	bl	8005070 <HAL_GetTick>
 8007b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b6c:	e009      	b.n	8007b82 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b6e:	f7fd fa7f 	bl	8005070 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e36b      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8007b82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007b86:	2202      	movs	r2, #2
 8007b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	fa93 f2a3 	rbit	r2, r3
 8007b94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	fa93 f2a3 	rbit	r2, r3
 8007bac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	fa93 f2a3 	rbit	r2, r3
 8007bc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007bc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bca:	4b6f      	ldr	r3, [pc, #444]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	6019      	str	r1, [r3, #0]
 8007bd6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	fa93 f1a3 	rbit	r1, r3
 8007be0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007be4:	6019      	str	r1, [r3, #0]
  return result;
 8007be6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	fab3 f383 	clz	r3, r3
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 031f 	and.w	r3, r3, #31
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1b2      	bne.n	8007b6e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c08:	1d3b      	adds	r3, r7, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8158 	beq.w	8007ec8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c1e:	4b5a      	ldr	r3, [pc, #360]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d112      	bne.n	8007c50 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c2a:	4b57      	ldr	r3, [pc, #348]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	4a56      	ldr	r2, [pc, #344]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c34:	61d3      	str	r3, [r2, #28]
 8007c36:	4b54      	ldr	r3, [pc, #336]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007c3e:	f107 0308 	add.w	r3, r7, #8
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c50:	4b4f      	ldr	r3, [pc, #316]	; (8007d90 <HAL_RCC_OscConfig+0x938>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11a      	bne.n	8007c92 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c5c:	4b4c      	ldr	r3, [pc, #304]	; (8007d90 <HAL_RCC_OscConfig+0x938>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a4b      	ldr	r2, [pc, #300]	; (8007d90 <HAL_RCC_OscConfig+0x938>)
 8007c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c68:	f7fd fa02 	bl	8005070 <HAL_GetTick>
 8007c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c70:	e009      	b.n	8007c86 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c72:	f7fd f9fd 	bl	8005070 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b64      	cmp	r3, #100	; 0x64
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e2e9      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c86:	4b42      	ldr	r3, [pc, #264]	; (8007d90 <HAL_RCC_OscConfig+0x938>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0ef      	beq.n	8007c72 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d106      	bne.n	8007caa <HAL_RCC_OscConfig+0x852>
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	4a39      	ldr	r2, [pc, #228]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	6213      	str	r3, [r2, #32]
 8007ca8:	e02f      	b.n	8007d0a <HAL_RCC_OscConfig+0x8b2>
 8007caa:	1d3b      	adds	r3, r7, #4
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10c      	bne.n	8007cce <HAL_RCC_OscConfig+0x876>
 8007cb4:	4b34      	ldr	r3, [pc, #208]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	6213      	str	r3, [r2, #32]
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	4a30      	ldr	r2, [pc, #192]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cc6:	f023 0304 	bic.w	r3, r3, #4
 8007cca:	6213      	str	r3, [r2, #32]
 8007ccc:	e01d      	b.n	8007d0a <HAL_RCC_OscConfig+0x8b2>
 8007cce:	1d3b      	adds	r3, r7, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d10c      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x89a>
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	4a2a      	ldr	r2, [pc, #168]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cde:	f043 0304 	orr.w	r3, r3, #4
 8007ce2:	6213      	str	r3, [r2, #32]
 8007ce4:	4b28      	ldr	r3, [pc, #160]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	4a27      	ldr	r2, [pc, #156]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6213      	str	r3, [r2, #32]
 8007cf0:	e00b      	b.n	8007d0a <HAL_RCC_OscConfig+0x8b2>
 8007cf2:	4b25      	ldr	r3, [pc, #148]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	4a24      	ldr	r2, [pc, #144]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	6213      	str	r3, [r2, #32]
 8007cfe:	4b22      	ldr	r3, [pc, #136]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	4a21      	ldr	r2, [pc, #132]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007d04:	f023 0304 	bic.w	r3, r3, #4
 8007d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d0a:	1d3b      	adds	r3, r7, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d06b      	beq.n	8007dec <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d14:	f7fd f9ac 	bl	8005070 <HAL_GetTick>
 8007d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d1c:	e00b      	b.n	8007d36 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d1e:	f7fd f9a7 	bl	8005070 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e291      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8007d36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	fa93 f2a3 	rbit	r2, r3
 8007d48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007d52:	2202      	movs	r2, #2
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	fa93 f2a3 	rbit	r2, r3
 8007d60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007d64:	601a      	str	r2, [r3, #0]
  return result;
 8007d66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007d6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d6c:	fab3 f383 	clz	r3, r3
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f043 0302 	orr.w	r3, r3, #2
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d109      	bne.n	8007d94 <HAL_RCC_OscConfig+0x93c>
 8007d80:	4b01      	ldr	r3, [pc, #4]	; (8007d88 <HAL_RCC_OscConfig+0x930>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	e014      	b.n	8007db0 <HAL_RCC_OscConfig+0x958>
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	10908120 	.word	0x10908120
 8007d90:	40007000 	.word	0x40007000
 8007d94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007d98:	2202      	movs	r2, #2
 8007d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	fa93 f2a3 	rbit	r2, r3
 8007da6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	4bbb      	ldr	r3, [pc, #748]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007db4:	2102      	movs	r1, #2
 8007db6:	6011      	str	r1, [r2, #0]
 8007db8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	fa92 f1a2 	rbit	r1, r2
 8007dc2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007dc6:	6011      	str	r1, [r2, #0]
  return result;
 8007dc8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	fab2 f282 	clz	r2, r2
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	f002 021f 	and.w	r2, r2, #31
 8007dde:	2101      	movs	r1, #1
 8007de0:	fa01 f202 	lsl.w	r2, r1, r2
 8007de4:	4013      	ands	r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d099      	beq.n	8007d1e <HAL_RCC_OscConfig+0x8c6>
 8007dea:	e063      	b.n	8007eb4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dec:	f7fd f940 	bl	8005070 <HAL_GetTick>
 8007df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df4:	e00b      	b.n	8007e0e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007df6:	f7fd f93b 	bl	8005070 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e225      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8007e0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e12:	2202      	movs	r2, #2
 8007e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	fa93 f2a3 	rbit	r2, r3
 8007e20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007e24:	601a      	str	r2, [r3, #0]
 8007e26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	fa93 f2a3 	rbit	r2, r3
 8007e38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007e3c:	601a      	str	r2, [r3, #0]
  return result;
 8007e3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007e42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e44:	fab3 f383 	clz	r3, r3
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f043 0302 	orr.w	r3, r3, #2
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d102      	bne.n	8007e5e <HAL_RCC_OscConfig+0xa06>
 8007e58:	4b90      	ldr	r3, [pc, #576]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	e00d      	b.n	8007e7a <HAL_RCC_OscConfig+0xa22>
 8007e5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007e62:	2202      	movs	r2, #2
 8007e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	fa93 f2a3 	rbit	r2, r3
 8007e70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	4b89      	ldr	r3, [pc, #548]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007e7e:	2102      	movs	r1, #2
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	fa92 f1a2 	rbit	r1, r2
 8007e8c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007e90:	6011      	str	r1, [r2, #0]
  return result;
 8007e92:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	fab2 f282 	clz	r2, r2
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	f002 021f 	and.w	r2, r2, #31
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1a0      	bne.n	8007df6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007eb4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d105      	bne.n	8007ec8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ebc:	4b77      	ldr	r3, [pc, #476]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	4a76      	ldr	r2, [pc, #472]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 81c2 	beq.w	8008258 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ed4:	4b71      	ldr	r3, [pc, #452]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f003 030c 	and.w	r3, r3, #12
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	f000 819c 	beq.w	800821a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	f040 8114 	bne.w	8008116 <HAL_RCC_OscConfig+0xcbe>
 8007eee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	fa93 f2a3 	rbit	r2, r3
 8007f02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f06:	601a      	str	r2, [r3, #0]
  return result;
 8007f08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0e:	fab3 f383 	clz	r3, r3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f24:	f7fd f8a4 	bl	8005070 <HAL_GetTick>
 8007f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f2c:	e009      	b.n	8007f42 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f2e:	f7fd f89f 	bl	8005070 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e18b      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8007f42:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	fa93 f2a3 	rbit	r2, r3
 8007f56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f5a:	601a      	str	r2, [r3, #0]
  return result;
 8007f5c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f62:	fab3 f383 	clz	r3, r3
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d102      	bne.n	8007f7c <HAL_RCC_OscConfig+0xb24>
 8007f76:	4b49      	ldr	r3, [pc, #292]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	e01b      	b.n	8007fb4 <HAL_RCC_OscConfig+0xb5c>
 8007f7c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	fa93 f2a3 	rbit	r2, r3
 8007f90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007f9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	fa93 f2a3 	rbit	r2, r3
 8007faa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007fb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007fc2:	6812      	ldr	r2, [r2, #0]
 8007fc4:	fa92 f1a2 	rbit	r1, r2
 8007fc8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007fcc:	6011      	str	r1, [r2, #0]
  return result;
 8007fce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007fd2:	6812      	ldr	r2, [r2, #0]
 8007fd4:	fab2 f282 	clz	r2, r2
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	f042 0220 	orr.w	r2, r2, #32
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	f002 021f 	and.w	r2, r2, #31
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d19e      	bne.n	8007f2e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ff8:	1d3b      	adds	r3, r7, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ffe:	1d3b      	adds	r3, r7, #4
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	430b      	orrs	r3, r1
 8008006:	4925      	ldr	r1, [pc, #148]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8008008:	4313      	orrs	r3, r2
 800800a:	604b      	str	r3, [r1, #4]
 800800c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	fa93 f2a3 	rbit	r2, r3
 8008020:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008024:	601a      	str	r2, [r3, #0]
  return result;
 8008026:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800802a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800802c:	fab3 f383 	clz	r3, r3
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008036:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	461a      	mov	r2, r3
 800803e:	2301      	movs	r3, #1
 8008040:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008042:	f7fd f815 	bl	8005070 <HAL_GetTick>
 8008046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800804a:	e009      	b.n	8008060 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800804c:	f7fd f810 	bl	8005070 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e0fc      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 8008060:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800806a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	fa93 f2a3 	rbit	r2, r3
 8008074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008078:	601a      	str	r2, [r3, #0]
  return result;
 800807a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800807e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008080:	fab3 f383 	clz	r3, r3
 8008084:	b2db      	uxtb	r3, r3
 8008086:	095b      	lsrs	r3, r3, #5
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b01      	cmp	r3, #1
 8008092:	d105      	bne.n	80080a0 <HAL_RCC_OscConfig+0xc48>
 8008094:	4b01      	ldr	r3, [pc, #4]	; (800809c <HAL_RCC_OscConfig+0xc44>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	e01e      	b.n	80080d8 <HAL_RCC_OscConfig+0xc80>
 800809a:	bf00      	nop
 800809c:	40021000 	.word	0x40021000
 80080a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	fa93 f2a3 	rbit	r2, r3
 80080b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	fa93 f2a3 	rbit	r2, r3
 80080ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	4b63      	ldr	r3, [pc, #396]	; (8008264 <HAL_RCC_OscConfig+0xe0c>)
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80080dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	fa92 f1a2 	rbit	r1, r2
 80080ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80080f0:	6011      	str	r1, [r2, #0]
  return result;
 80080f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	fab2 f282 	clz	r2, r2
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	f042 0220 	orr.w	r2, r2, #32
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	f002 021f 	and.w	r2, r2, #31
 8008108:	2101      	movs	r1, #1
 800810a:	fa01 f202 	lsl.w	r2, r1, r2
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d09b      	beq.n	800804c <HAL_RCC_OscConfig+0xbf4>
 8008114:	e0a0      	b.n	8008258 <HAL_RCC_OscConfig+0xe00>
 8008116:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800811a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800811e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008120:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	fa93 f2a3 	rbit	r2, r3
 800812a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800812e:	601a      	str	r2, [r3, #0]
  return result;
 8008130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008134:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008136:	fab3 f383 	clz	r3, r3
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	461a      	mov	r2, r3
 8008148:	2300      	movs	r3, #0
 800814a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814c:	f7fc ff90 	bl	8005070 <HAL_GetTick>
 8008150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008154:	e009      	b.n	800816a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008156:	f7fc ff8b 	bl	8005070 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e077      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
 800816a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800816e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	fa93 f2a3 	rbit	r2, r3
 800817e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008182:	601a      	str	r2, [r3, #0]
  return result;
 8008184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008188:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800818a:	fab3 f383 	clz	r3, r3
 800818e:	b2db      	uxtb	r3, r3
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b01      	cmp	r3, #1
 800819c:	d102      	bne.n	80081a4 <HAL_RCC_OscConfig+0xd4c>
 800819e:	4b31      	ldr	r3, [pc, #196]	; (8008264 <HAL_RCC_OscConfig+0xe0c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	e01b      	b.n	80081dc <HAL_RCC_OscConfig+0xd84>
 80081a4:	f107 0320 	add.w	r3, r7, #32
 80081a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ae:	f107 0320 	add.w	r3, r7, #32
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	fa93 f2a3 	rbit	r2, r3
 80081b8:	f107 031c 	add.w	r3, r7, #28
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	f107 0318 	add.w	r3, r7, #24
 80081c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f107 0318 	add.w	r3, r7, #24
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	fa93 f2a3 	rbit	r2, r3
 80081d2:	f107 0314 	add.w	r3, r7, #20
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	4b22      	ldr	r3, [pc, #136]	; (8008264 <HAL_RCC_OscConfig+0xe0c>)
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	f107 0210 	add.w	r2, r7, #16
 80081e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80081e4:	6011      	str	r1, [r2, #0]
 80081e6:	f107 0210 	add.w	r2, r7, #16
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	fa92 f1a2 	rbit	r1, r2
 80081f0:	f107 020c 	add.w	r2, r7, #12
 80081f4:	6011      	str	r1, [r2, #0]
  return result;
 80081f6:	f107 020c 	add.w	r2, r7, #12
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	fab2 f282 	clz	r2, r2
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	f042 0220 	orr.w	r2, r2, #32
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	f002 021f 	and.w	r2, r2, #31
 800820c:	2101      	movs	r1, #1
 800820e:	fa01 f202 	lsl.w	r2, r1, r2
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d19e      	bne.n	8008156 <HAL_RCC_OscConfig+0xcfe>
 8008218:	e01e      	b.n	8008258 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800821a:	1d3b      	adds	r3, r7, #4
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e018      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008228:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <HAL_RCC_OscConfig+0xe0c>)
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008230:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	429a      	cmp	r2, r3
 8008240:	d108      	bne.n	8008254 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008242:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008250:	429a      	cmp	r2, r3
 8008252:	d001      	beq.n	8008258 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40021000 	.word	0x40021000

08008268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b09e      	sub	sp, #120	; 0x78
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e162      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008280:	4b90      	ldr	r3, [pc, #576]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d910      	bls.n	80082b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800828e:	4b8d      	ldr	r3, [pc, #564]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f023 0207 	bic.w	r2, r3, #7
 8008296:	498b      	ldr	r1, [pc, #556]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	4313      	orrs	r3, r2
 800829c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829e:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e14a      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082bc:	4b82      	ldr	r3, [pc, #520]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	497f      	ldr	r1, [pc, #508]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80dc 	beq.w	8008494 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d13c      	bne.n	800835e <HAL_RCC_ClockConfig+0xf6>
 80082e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ec:	fa93 f3a3 	rbit	r3, r3
 80082f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082f4:	fab3 f383 	clz	r3, r3
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b01      	cmp	r3, #1
 8008306:	d102      	bne.n	800830e <HAL_RCC_ClockConfig+0xa6>
 8008308:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	e00f      	b.n	800832e <HAL_RCC_ClockConfig+0xc6>
 800830e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008312:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008316:	fa93 f3a3 	rbit	r3, r3
 800831a:	667b      	str	r3, [r7, #100]	; 0x64
 800831c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008320:	663b      	str	r3, [r7, #96]	; 0x60
 8008322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008324:	fa93 f3a3 	rbit	r3, r3
 8008328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008332:	65ba      	str	r2, [r7, #88]	; 0x58
 8008334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008336:	fa92 f2a2 	rbit	r2, r2
 800833a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800833c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800833e:	fab2 f282 	clz	r2, r2
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	f042 0220 	orr.w	r2, r2, #32
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	f002 021f 	and.w	r2, r2, #31
 800834e:	2101      	movs	r1, #1
 8008350:	fa01 f202 	lsl.w	r2, r1, r2
 8008354:	4013      	ands	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d17b      	bne.n	8008452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e0f3      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d13c      	bne.n	80083e0 <HAL_RCC_ClockConfig+0x178>
 8008366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800836a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800836c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836e:	fa93 f3a3 	rbit	r3, r3
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008376:	fab3 f383 	clz	r3, r3
 800837a:	b2db      	uxtb	r3, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b01      	cmp	r3, #1
 8008388:	d102      	bne.n	8008390 <HAL_RCC_ClockConfig+0x128>
 800838a:	4b4f      	ldr	r3, [pc, #316]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	e00f      	b.n	80083b0 <HAL_RCC_ClockConfig+0x148>
 8008390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008394:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008398:	fa93 f3a3 	rbit	r3, r3
 800839c:	647b      	str	r3, [r7, #68]	; 0x44
 800839e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a2:	643b      	str	r3, [r7, #64]	; 0x40
 80083a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a6:	fa93 f3a3 	rbit	r3, r3
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ac:	4b46      	ldr	r3, [pc, #280]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80083b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b8:	fa92 f2a2 	rbit	r2, r2
 80083bc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80083be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c0:	fab2 f282 	clz	r2, r2
 80083c4:	b2d2      	uxtb	r2, r2
 80083c6:	f042 0220 	orr.w	r2, r2, #32
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	f002 021f 	and.w	r2, r2, #31
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f202 	lsl.w	r2, r1, r2
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d13a      	bne.n	8008452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e0b2      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
 80083e0:	2302      	movs	r3, #2
 80083e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	fa93 f3a3 	rbit	r3, r3
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ee:	fab3 f383 	clz	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	095b      	lsrs	r3, r3, #5
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f043 0301 	orr.w	r3, r3, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d102      	bne.n	8008408 <HAL_RCC_ClockConfig+0x1a0>
 8008402:	4b31      	ldr	r3, [pc, #196]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	e00d      	b.n	8008424 <HAL_RCC_ClockConfig+0x1bc>
 8008408:	2302      	movs	r3, #2
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	fa93 f3a3 	rbit	r3, r3
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
 8008414:	2302      	movs	r3, #2
 8008416:	623b      	str	r3, [r7, #32]
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	fa93 f3a3 	rbit	r3, r3
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	4b29      	ldr	r3, [pc, #164]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	2202      	movs	r2, #2
 8008426:	61ba      	str	r2, [r7, #24]
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	fa92 f2a2 	rbit	r2, r2
 800842e:	617a      	str	r2, [r7, #20]
  return result;
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	fab2 f282 	clz	r2, r2
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	f042 0220 	orr.w	r2, r2, #32
 800843c:	b2d2      	uxtb	r2, r2
 800843e:	f002 021f 	and.w	r2, r2, #31
 8008442:	2101      	movs	r1, #1
 8008444:	fa01 f202 	lsl.w	r2, r1, r2
 8008448:	4013      	ands	r3, r2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e079      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008452:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f023 0203 	bic.w	r2, r3, #3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	491a      	ldr	r1, [pc, #104]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 8008460:	4313      	orrs	r3, r2
 8008462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008464:	f7fc fe04 	bl	8005070 <HAL_GetTick>
 8008468:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800846a:	e00a      	b.n	8008482 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800846c:	f7fc fe00 	bl	8005070 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	f241 3288 	movw	r2, #5000	; 0x1388
 800847a:	4293      	cmp	r3, r2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e061      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008482:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <HAL_RCC_ClockConfig+0x260>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f003 020c 	and.w	r2, r3, #12
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	429a      	cmp	r2, r3
 8008492:	d1eb      	bne.n	800846c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d214      	bcs.n	80084cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a2:	4b08      	ldr	r3, [pc, #32]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f023 0207 	bic.w	r2, r3, #7
 80084aa:	4906      	ldr	r1, [pc, #24]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <HAL_RCC_ClockConfig+0x25c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d005      	beq.n	80084cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e040      	b.n	8008546 <HAL_RCC_ClockConfig+0x2de>
 80084c4:	40022000 	.word	0x40022000
 80084c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <HAL_RCC_ClockConfig+0x2e8>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	491a      	ldr	r1, [pc, #104]	; (8008550 <HAL_RCC_ClockConfig+0x2e8>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <HAL_RCC_ClockConfig+0x2e8>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4912      	ldr	r1, [pc, #72]	; (8008550 <HAL_RCC_ClockConfig+0x2e8>)
 8008506:	4313      	orrs	r3, r2
 8008508:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800850a:	f000 f829 	bl	8008560 <HAL_RCC_GetSysClockFreq>
 800850e:	4601      	mov	r1, r0
 8008510:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <HAL_RCC_ClockConfig+0x2e8>)
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008518:	22f0      	movs	r2, #240	; 0xf0
 800851a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	fa92 f2a2 	rbit	r2, r2
 8008522:	60fa      	str	r2, [r7, #12]
  return result;
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	fab2 f282 	clz	r2, r2
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	40d3      	lsrs	r3, r2
 800852e:	4a09      	ldr	r2, [pc, #36]	; (8008554 <HAL_RCC_ClockConfig+0x2ec>)
 8008530:	5cd3      	ldrb	r3, [r2, r3]
 8008532:	fa21 f303 	lsr.w	r3, r1, r3
 8008536:	4a08      	ldr	r2, [pc, #32]	; (8008558 <HAL_RCC_ClockConfig+0x2f0>)
 8008538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <HAL_RCC_ClockConfig+0x2f4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7fc fd52 	bl	8004fe8 <HAL_InitTick>
  
  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3778      	adds	r7, #120	; 0x78
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40021000 	.word	0x40021000
 8008554:	0800f308 	.word	0x0800f308
 8008558:	20000010 	.word	0x20000010
 800855c:	20000014 	.word	0x20000014

08008560 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008560:	b480      	push	{r7}
 8008562:	b08b      	sub	sp, #44	; 0x2c
 8008564:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	2300      	movs	r3, #0
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	2300      	movs	r3, #0
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800857a:	4b29      	ldr	r3, [pc, #164]	; (8008620 <HAL_RCC_GetSysClockFreq+0xc0>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f003 030c 	and.w	r3, r3, #12
 8008586:	2b04      	cmp	r3, #4
 8008588:	d002      	beq.n	8008590 <HAL_RCC_GetSysClockFreq+0x30>
 800858a:	2b08      	cmp	r3, #8
 800858c:	d003      	beq.n	8008596 <HAL_RCC_GetSysClockFreq+0x36>
 800858e:	e03c      	b.n	800860a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008590:	4b24      	ldr	r3, [pc, #144]	; (8008624 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008592:	623b      	str	r3, [r7, #32]
      break;
 8008594:	e03c      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800859c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80085a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	fa92 f2a2 	rbit	r2, r2
 80085a8:	607a      	str	r2, [r7, #4]
  return result;
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	fab2 f282 	clz	r2, r2
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	40d3      	lsrs	r3, r2
 80085b4:	4a1c      	ldr	r2, [pc, #112]	; (8008628 <HAL_RCC_GetSysClockFreq+0xc8>)
 80085b6:	5cd3      	ldrb	r3, [r2, r3]
 80085b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	220f      	movs	r2, #15
 80085c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	fa92 f2a2 	rbit	r2, r2
 80085cc:	60fa      	str	r2, [r7, #12]
  return result;
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	fab2 f282 	clz	r2, r2
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	40d3      	lsrs	r3, r2
 80085d8:	4a14      	ldr	r2, [pc, #80]	; (800862c <HAL_RCC_GetSysClockFreq+0xcc>)
 80085da:	5cd3      	ldrb	r3, [r2, r3]
 80085dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80085e8:	4a0e      	ldr	r2, [pc, #56]	; (8008624 <HAL_RCC_GetSysClockFreq+0xc4>)
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
 80085f8:	e004      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <HAL_RCC_GetSysClockFreq+0xd0>)
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
 8008602:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	623b      	str	r3, [r7, #32]
      break;
 8008608:	e002      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800860a:	4b06      	ldr	r3, [pc, #24]	; (8008624 <HAL_RCC_GetSysClockFreq+0xc4>)
 800860c:	623b      	str	r3, [r7, #32]
      break;
 800860e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008610:	6a3b      	ldr	r3, [r7, #32]
}
 8008612:	4618      	mov	r0, r3
 8008614:	372c      	adds	r7, #44	; 0x2c
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40021000 	.word	0x40021000
 8008624:	007a1200 	.word	0x007a1200
 8008628:	0800f320 	.word	0x0800f320
 800862c:	0800f330 	.word	0x0800f330
 8008630:	003d0900 	.word	0x003d0900

08008634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008638:	4b03      	ldr	r3, [pc, #12]	; (8008648 <HAL_RCC_GetHCLKFreq+0x14>)
 800863a:	681b      	ldr	r3, [r3, #0]
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	20000010 	.word	0x20000010

0800864c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008652:	f7ff ffef 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8008656:	4601      	mov	r1, r0
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008660:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008664:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	fa92 f2a2 	rbit	r2, r2
 800866c:	603a      	str	r2, [r7, #0]
  return result;
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	fab2 f282 	clz	r2, r2
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	40d3      	lsrs	r3, r2
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <HAL_RCC_GetPCLK1Freq+0x40>)
 800867a:	5cd3      	ldrb	r3, [r2, r3]
 800867c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	40021000 	.word	0x40021000
 800868c:	0800f318 	.word	0x0800f318

08008690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008696:	f7ff ffcd 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 800869a:	4601      	mov	r1, r0
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80086a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80086a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	fa92 f2a2 	rbit	r2, r2
 80086b0:	603a      	str	r2, [r7, #0]
  return result;
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	fab2 f282 	clz	r2, r2
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	40d3      	lsrs	r3, r2
 80086bc:	4a04      	ldr	r2, [pc, #16]	; (80086d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80086be:	5cd3      	ldrb	r3, [r2, r3]
 80086c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	40021000 	.word	0x40021000
 80086d0:	0800f318 	.word	0x0800f318

080086d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b092      	sub	sp, #72	; 0x48
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 80d7 	beq.w	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086f8:	4b4e      	ldr	r3, [pc, #312]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10e      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008704:	4b4b      	ldr	r3, [pc, #300]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	4a4a      	ldr	r2, [pc, #296]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800870a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870e:	61d3      	str	r3, [r2, #28]
 8008710:	4b48      	ldr	r3, [pc, #288]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008718:	60bb      	str	r3, [r7, #8]
 800871a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008722:	4b45      	ldr	r3, [pc, #276]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d118      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800872e:	4b42      	ldr	r3, [pc, #264]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a41      	ldr	r2, [pc, #260]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008738:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800873a:	f7fc fc99 	bl	8005070 <HAL_GetTick>
 800873e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008740:	e008      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008742:	f7fc fc95 	bl	8005070 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b64      	cmp	r3, #100	; 0x64
 800874e:	d901      	bls.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e169      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008754:	4b38      	ldr	r3, [pc, #224]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0f0      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008760:	4b34      	ldr	r3, [pc, #208]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800876a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8084 	beq.w	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800877c:	429a      	cmp	r2, r3
 800877e:	d07c      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008780:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800878a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800878e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	fa93 f3a3 	rbit	r3, r3
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800879a:	fab3 f383 	clz	r3, r3
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	461a      	mov	r2, r3
 80087aa:	2301      	movs	r3, #1
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	fa93 f3a3 	rbit	r3, r3
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80087bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087be:	fab3 f383 	clz	r3, r3
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b1d      	ldr	r3, [pc, #116]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	461a      	mov	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80087d2:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d04b      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e2:	f7fc fc45 	bl	8005070 <HAL_GetTick>
 80087e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e8:	e00a      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ea:	f7fc fc41 	bl	8005070 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d901      	bls.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e113      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008800:	2302      	movs	r3, #2
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	fa93 f3a3 	rbit	r3, r3
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
 800880c:	2302      	movs	r3, #2
 800880e:	623b      	str	r3, [r7, #32]
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	fa93 f3a3 	rbit	r3, r3
 8008816:	61fb      	str	r3, [r7, #28]
  return result;
 8008818:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800881a:	fab3 f383 	clz	r3, r3
 800881e:	b2db      	uxtb	r3, r3
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	b2db      	uxtb	r3, r3
 8008824:	f043 0302 	orr.w	r3, r3, #2
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d108      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800882e:	4b01      	ldr	r3, [pc, #4]	; (8008834 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	e00d      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008834:	40021000 	.word	0x40021000
 8008838:	40007000 	.word	0x40007000
 800883c:	10908100 	.word	0x10908100
 8008840:	2302      	movs	r3, #2
 8008842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	fa93 f3a3 	rbit	r3, r3
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	4b78      	ldr	r3, [pc, #480]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2202      	movs	r2, #2
 8008852:	613a      	str	r2, [r7, #16]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	fa92 f2a2 	rbit	r2, r2
 800885a:	60fa      	str	r2, [r7, #12]
  return result;
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	fab2 f282 	clz	r2, r2
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	f002 021f 	and.w	r2, r2, #31
 800886e:	2101      	movs	r1, #1
 8008870:	fa01 f202 	lsl.w	r2, r1, r2
 8008874:	4013      	ands	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0b7      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800887a:	4b6d      	ldr	r3, [pc, #436]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	496a      	ldr	r1, [pc, #424]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008888:	4313      	orrs	r3, r2
 800888a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800888c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008890:	2b01      	cmp	r3, #1
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008894:	4b66      	ldr	r3, [pc, #408]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	4a65      	ldr	r2, [pc, #404]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800889a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800889e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088ac:	4b60      	ldr	r3, [pc, #384]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	f023 0203 	bic.w	r2, r3, #3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	495d      	ldr	r1, [pc, #372]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088ca:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	4956      	ldr	r1, [pc, #344]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088e8:	4b51      	ldr	r3, [pc, #324]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	494e      	ldr	r1, [pc, #312]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0320 	and.w	r3, r3, #32
 8008902:	2b00      	cmp	r3, #0
 8008904:	d008      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008906:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f023 0210 	bic.w	r2, r3, #16
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	4947      	ldr	r1, [pc, #284]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008914:	4313      	orrs	r3, r2
 8008916:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008924:	4b42      	ldr	r3, [pc, #264]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	493f      	ldr	r1, [pc, #252]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008942:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f023 0220 	bic.w	r2, r3, #32
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	4938      	ldr	r1, [pc, #224]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008950:	4313      	orrs	r3, r2
 8008952:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008960:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	4930      	ldr	r1, [pc, #192]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800896e:	4313      	orrs	r3, r2
 8008970:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800897e:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	4929      	ldr	r1, [pc, #164]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800898c:	4313      	orrs	r3, r2
 800898e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800899c:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	4921      	ldr	r1, [pc, #132]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089ba:	4b1d      	ldr	r3, [pc, #116]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	491a      	ldr	r1, [pc, #104]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	4912      	ldr	r1, [pc, #72]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d008      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80089f6:	4b0e      	ldr	r3, [pc, #56]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	490b      	ldr	r1, [pc, #44]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008a14:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	4903      	ldr	r1, [pc, #12]	; (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3748      	adds	r7, #72	; 0x48
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000

08008a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e084      	b.n	8008b50 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fb ffb5 	bl	80049d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a86:	d902      	bls.n	8008a8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e002      	b.n	8008a94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a9c:	d007      	beq.n	8008aae <HAL_SPI_Init+0x7a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008aa6:	d002      	beq.n	8008aae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008abe:	d903      	bls.n	8008ac8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ac6:	e002      	b.n	8008ace <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	ea42 0103 	orr.w	r1, r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	0c1b      	lsrs	r3, r3, #16
 8008b0e:	f003 0204 	and.w	r2, r3, #4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	ea42 0103 	orr.w	r1, r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69da      	ldr	r2, [r3, #28]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e01d      	b.n	8008ba6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fb ffd2 	bl	8004b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	4610      	mov	r0, r2
 8008b98:	f000 fbcc 	bl	8009334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e01d      	b.n	8008bfc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d106      	bne.n	8008bda <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7fb ff87 	bl	8004ae8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4619      	mov	r1, r3
 8008bec:	4610      	mov	r0, r2
 8008bee:	f000 fba1 	bl	8009334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2201      	movs	r2, #1
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f810 	bl	8009c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a1e      	ldr	r2, [pc, #120]	; (8008c9c <HAL_TIM_OC_Start+0x98>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <HAL_TIM_OC_Start+0x4a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1d      	ldr	r2, [pc, #116]	; (8008ca0 <HAL_TIM_OC_Start+0x9c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00e      	beq.n	8008c4e <HAL_TIM_OC_Start+0x4a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1b      	ldr	r2, [pc, #108]	; (8008ca4 <HAL_TIM_OC_Start+0xa0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d009      	beq.n	8008c4e <HAL_TIM_OC_Start+0x4a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1a      	ldr	r2, [pc, #104]	; (8008ca8 <HAL_TIM_OC_Start+0xa4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d004      	beq.n	8008c4e <HAL_TIM_OC_Start+0x4a>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a18      	ldr	r2, [pc, #96]	; (8008cac <HAL_TIM_OC_Start+0xa8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_OC_Start+0x4e>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e000      	b.n	8008c54 <HAL_TIM_OC_Start+0x50>
 8008c52:	2300      	movs	r3, #0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <HAL_TIM_OC_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <HAL_TIM_OC_Start+0xac>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b06      	cmp	r3, #6
 8008c78:	d00b      	beq.n	8008c92 <HAL_TIM_OC_Start+0x8e>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d007      	beq.n	8008c92 <HAL_TIM_OC_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	40013400 	.word	0x40013400
 8008ca4:	40014000 	.word	0x40014000
 8008ca8:	40014400 	.word	0x40014400
 8008cac:	40014800 	.word	0x40014800
 8008cb0:	00010007 	.word	0x00010007

08008cb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e01d      	b.n	8008d02 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fb febc 	bl	8004a58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f000 fb1e 	bl	8009334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b0c      	cmp	r3, #12
 8008d1a:	d841      	bhi.n	8008da0 <HAL_TIM_IC_Start_IT+0x94>
 8008d1c:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <HAL_TIM_IC_Start_IT+0x18>)
 8008d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d22:	bf00      	nop
 8008d24:	08008d59 	.word	0x08008d59
 8008d28:	08008da1 	.word	0x08008da1
 8008d2c:	08008da1 	.word	0x08008da1
 8008d30:	08008da1 	.word	0x08008da1
 8008d34:	08008d6b 	.word	0x08008d6b
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008da1 	.word	0x08008da1
 8008d40:	08008da1 	.word	0x08008da1
 8008d44:	08008d7d 	.word	0x08008d7d
 8008d48:	08008da1 	.word	0x08008da1
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008da1 	.word	0x08008da1
 8008d54:	08008d8f 	.word	0x08008d8f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0202 	orr.w	r2, r2, #2
 8008d66:	60da      	str	r2, [r3, #12]
      break;
 8008d68:	e01b      	b.n	8008da2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0204 	orr.w	r2, r2, #4
 8008d78:	60da      	str	r2, [r3, #12]
      break;
 8008d7a:	e012      	b.n	8008da2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	60da      	str	r2, [r3, #12]
      break;
 8008d8c:	e009      	b.n	8008da2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0210 	orr.w	r2, r2, #16
 8008d9c:	60da      	str	r2, [r3, #12]
      break;
 8008d9e:	e000      	b.n	8008da2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8008da0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2201      	movs	r2, #1
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 ff46 	bl	8009c3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <HAL_TIM_IC_Start_IT+0xd8>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b06      	cmp	r3, #6
 8008dc0:	d00b      	beq.n	8008dda <HAL_TIM_IC_Start_IT+0xce>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc8:	d007      	beq.n	8008dda <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0201 	orr.w	r2, r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	00010007 	.word	0x00010007

08008de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d122      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d11b      	bne.n	8008e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0202 	mvn.w	r2, #2
 8008e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7f7 ff2c 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8008e30:	e005      	b.n	8008e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa60 	bl	80092f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fa67 	bl	800930c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d122      	bne.n	8008e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d11b      	bne.n	8008e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0204 	mvn.w	r2, #4
 8008e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f7 ff02 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8008e84:	e005      	b.n	8008e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa36 	bl	80092f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fa3d 	bl	800930c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d122      	bne.n	8008eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d11b      	bne.n	8008eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f06f 0208 	mvn.w	r2, #8
 8008ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2204      	movs	r2, #4
 8008ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7f7 fed8 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8008ed8:	e005      	b.n	8008ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa0c 	bl	80092f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fa13 	bl	800930c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0310 	and.w	r3, r3, #16
 8008ef6:	2b10      	cmp	r3, #16
 8008ef8:	d122      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b10      	cmp	r3, #16
 8008f06:	d11b      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0210 	mvn.w	r2, #16
 8008f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2208      	movs	r2, #8
 8008f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f7 feae 	bl	8000c88 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9e2 	bl	80092f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f9e9 	bl	800930c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d10e      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d107      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0201 	mvn.w	r2, #1
 8008f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9bc 	bl	80092e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	d10e      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d107      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ff80 	bl	8009e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa6:	d10e      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d107      	bne.n	8008fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ff73 	bl	8009eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d10e      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d107      	bne.n	8008ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f997 	bl	8009320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d10e      	bne.n	800901e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b20      	cmp	r3, #32
 800900c:	d107      	bne.n	800901e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f06f 0220 	mvn.w	r2, #32
 8009016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 ff33 	bl	8009e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d101      	bne.n	8009042 <HAL_TIM_OC_ConfigChannel+0x1a>
 800903e:	2302      	movs	r3, #2
 8009040:	e06c      	b.n	800911c <HAL_TIM_OC_ConfigChannel+0xf4>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b14      	cmp	r3, #20
 8009056:	d857      	bhi.n	8009108 <HAL_TIM_OC_ConfigChannel+0xe0>
 8009058:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <HAL_TIM_OC_ConfigChannel+0x38>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009109 	.word	0x08009109
 8009068:	08009109 	.word	0x08009109
 800906c:	08009109 	.word	0x08009109
 8009070:	080090c3 	.word	0x080090c3
 8009074:	08009109 	.word	0x08009109
 8009078:	08009109 	.word	0x08009109
 800907c:	08009109 	.word	0x08009109
 8009080:	080090d1 	.word	0x080090d1
 8009084:	08009109 	.word	0x08009109
 8009088:	08009109 	.word	0x08009109
 800908c:	08009109 	.word	0x08009109
 8009090:	080090df 	.word	0x080090df
 8009094:	08009109 	.word	0x08009109
 8009098:	08009109 	.word	0x08009109
 800909c:	08009109 	.word	0x08009109
 80090a0:	080090ed 	.word	0x080090ed
 80090a4:	08009109 	.word	0x08009109
 80090a8:	08009109 	.word	0x08009109
 80090ac:	08009109 	.word	0x08009109
 80090b0:	080090fb 	.word	0x080090fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68b9      	ldr	r1, [r7, #8]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f9ca 	bl	8009454 <TIM_OC1_SetConfig>
      break;
 80090c0:	e023      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fa53 	bl	8009574 <TIM_OC2_SetConfig>
      break;
 80090ce:	e01c      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fad6 	bl	8009688 <TIM_OC3_SetConfig>
      break;
 80090dc:	e015      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fb57 	bl	8009798 <TIM_OC4_SetConfig>
      break;
 80090ea:	e00e      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68b9      	ldr	r1, [r7, #8]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fbba 	bl	800986c <TIM_OC5_SetConfig>
      break;
 80090f8:	e007      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fc17 	bl	8009934 <TIM_OC6_SetConfig>
      break;
 8009106:	e000      	b.n	800910a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8009108:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_TIM_IC_ConfigChannel+0x1a>
 800913a:	2302      	movs	r3, #2
 800913c:	e08a      	b.n	8009254 <HAL_TIM_IC_ConfigChannel+0x130>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2202      	movs	r2, #2
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11b      	bne.n	800918c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f000 fc4c 	bl	8009a00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699a      	ldr	r2, [r3, #24]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f022 020c 	bic.w	r2, r2, #12
 8009176:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6999      	ldr	r1, [r3, #24]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	619a      	str	r2, [r3, #24]
 800918a:	e05a      	b.n	8009242 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b04      	cmp	r3, #4
 8009190:	d11c      	bne.n	80091cc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f000 fc95 	bl	8009ad0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6999      	ldr	r1, [r3, #24]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	021a      	lsls	r2, r3, #8
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	619a      	str	r2, [r3, #24]
 80091ca:	e03a      	b.n	8009242 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b08      	cmp	r3, #8
 80091d0:	d11b      	bne.n	800920a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6819      	ldr	r1, [r3, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f000 fcb2 	bl	8009b4a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 020c 	bic.w	r2, r2, #12
 80091f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69d9      	ldr	r1, [r3, #28]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	61da      	str	r2, [r3, #28]
 8009208:	e01b      	b.n	8009242 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	f000 fcd2 	bl	8009bc2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800922c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69d9      	ldr	r1, [r3, #28]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	021a      	lsls	r2, r3, #8
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b0c      	cmp	r3, #12
 800926e:	d831      	bhi.n	80092d4 <HAL_TIM_ReadCapturedValue+0x78>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092ad 	.word	0x080092ad
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092d5 	.word	0x080092d5
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092b7 	.word	0x080092b7
 800928c:	080092d5 	.word	0x080092d5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092c1 	.word	0x080092c1
 800929c:	080092d5 	.word	0x080092d5
 80092a0:	080092d5 	.word	0x080092d5
 80092a4:	080092d5 	.word	0x080092d5
 80092a8:	080092cb 	.word	0x080092cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	60fb      	str	r3, [r7, #12]

      break;
 80092b4:	e00f      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	60fb      	str	r3, [r7, #12]

      break;
 80092be:	e00a      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	60fb      	str	r3, [r7, #12]

      break;
 80092c8:	e005      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	60fb      	str	r3, [r7, #12]

      break;
 80092d2:	e000      	b.n	80092d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80092d4:	bf00      	nop
  }

  return tmpreg;
 80092d6:	68fb      	ldr	r3, [r7, #12]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3c      	ldr	r2, [pc, #240]	; (8009438 <TIM_Base_SetConfig+0x104>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00f      	beq.n	800936c <TIM_Base_SetConfig+0x38>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009352:	d00b      	beq.n	800936c <TIM_Base_SetConfig+0x38>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a39      	ldr	r2, [pc, #228]	; (800943c <TIM_Base_SetConfig+0x108>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d007      	beq.n	800936c <TIM_Base_SetConfig+0x38>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a38      	ldr	r2, [pc, #224]	; (8009440 <TIM_Base_SetConfig+0x10c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_Base_SetConfig+0x38>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a37      	ldr	r2, [pc, #220]	; (8009444 <TIM_Base_SetConfig+0x110>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d108      	bne.n	800937e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2d      	ldr	r2, [pc, #180]	; (8009438 <TIM_Base_SetConfig+0x104>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01b      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938c:	d017      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2a      	ldr	r2, [pc, #168]	; (800943c <TIM_Base_SetConfig+0x108>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a29      	ldr	r2, [pc, #164]	; (8009440 <TIM_Base_SetConfig+0x10c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00f      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a28      	ldr	r2, [pc, #160]	; (8009444 <TIM_Base_SetConfig+0x110>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00b      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a27      	ldr	r2, [pc, #156]	; (8009448 <TIM_Base_SetConfig+0x114>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a26      	ldr	r2, [pc, #152]	; (800944c <TIM_Base_SetConfig+0x118>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_Base_SetConfig+0x8a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a25      	ldr	r2, [pc, #148]	; (8009450 <TIM_Base_SetConfig+0x11c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a10      	ldr	r2, [pc, #64]	; (8009438 <TIM_Base_SetConfig+0x104>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00f      	beq.n	800941c <TIM_Base_SetConfig+0xe8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a11      	ldr	r2, [pc, #68]	; (8009444 <TIM_Base_SetConfig+0x110>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00b      	beq.n	800941c <TIM_Base_SetConfig+0xe8>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a10      	ldr	r2, [pc, #64]	; (8009448 <TIM_Base_SetConfig+0x114>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d007      	beq.n	800941c <TIM_Base_SetConfig+0xe8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a0f      	ldr	r2, [pc, #60]	; (800944c <TIM_Base_SetConfig+0x118>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d003      	beq.n	800941c <TIM_Base_SetConfig+0xe8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a0e      	ldr	r2, [pc, #56]	; (8009450 <TIM_Base_SetConfig+0x11c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d103      	bne.n	8009424 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	615a      	str	r2, [r3, #20]
}
 800942a:	bf00      	nop
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40012c00 	.word	0x40012c00
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40013400 	.word	0x40013400
 8009448:	40014000 	.word	0x40014000
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800

08009454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f023 0303 	bic.w	r3, r3, #3
 800948e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f023 0302 	bic.w	r3, r3, #2
 80094a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <TIM_OC1_SetConfig+0x10c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00f      	beq.n	80094d4 <TIM_OC1_SetConfig+0x80>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <TIM_OC1_SetConfig+0x110>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00b      	beq.n	80094d4 <TIM_OC1_SetConfig+0x80>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <TIM_OC1_SetConfig+0x114>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d007      	beq.n	80094d4 <TIM_OC1_SetConfig+0x80>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a29      	ldr	r2, [pc, #164]	; (800956c <TIM_OC1_SetConfig+0x118>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d003      	beq.n	80094d4 <TIM_OC1_SetConfig+0x80>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a28      	ldr	r2, [pc, #160]	; (8009570 <TIM_OC1_SetConfig+0x11c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d10c      	bne.n	80094ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f023 0308 	bic.w	r3, r3, #8
 80094da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f023 0304 	bic.w	r3, r3, #4
 80094ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <TIM_OC1_SetConfig+0x10c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00f      	beq.n	8009516 <TIM_OC1_SetConfig+0xc2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a1a      	ldr	r2, [pc, #104]	; (8009564 <TIM_OC1_SetConfig+0x110>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00b      	beq.n	8009516 <TIM_OC1_SetConfig+0xc2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a19      	ldr	r2, [pc, #100]	; (8009568 <TIM_OC1_SetConfig+0x114>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d007      	beq.n	8009516 <TIM_OC1_SetConfig+0xc2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a18      	ldr	r2, [pc, #96]	; (800956c <TIM_OC1_SetConfig+0x118>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <TIM_OC1_SetConfig+0xc2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a17      	ldr	r2, [pc, #92]	; (8009570 <TIM_OC1_SetConfig+0x11c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d111      	bne.n	800953a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800951c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	4313      	orrs	r3, r2
 800952e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	621a      	str	r2, [r3, #32]
}
 8009554:	bf00      	nop
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	40012c00 	.word	0x40012c00
 8009564:	40013400 	.word	0x40013400
 8009568:	40014000 	.word	0x40014000
 800956c:	40014400 	.word	0x40014400
 8009570:	40014800 	.word	0x40014800

08009574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	f023 0210 	bic.w	r2, r3, #16
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f023 0320 	bic.w	r3, r3, #32
 80095c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a28      	ldr	r2, [pc, #160]	; (8009674 <TIM_OC2_SetConfig+0x100>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d003      	beq.n	80095e0 <TIM_OC2_SetConfig+0x6c>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a27      	ldr	r2, [pc, #156]	; (8009678 <TIM_OC2_SetConfig+0x104>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d10d      	bne.n	80095fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a1d      	ldr	r2, [pc, #116]	; (8009674 <TIM_OC2_SetConfig+0x100>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00f      	beq.n	8009624 <TIM_OC2_SetConfig+0xb0>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a1c      	ldr	r2, [pc, #112]	; (8009678 <TIM_OC2_SetConfig+0x104>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d00b      	beq.n	8009624 <TIM_OC2_SetConfig+0xb0>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a1b      	ldr	r2, [pc, #108]	; (800967c <TIM_OC2_SetConfig+0x108>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d007      	beq.n	8009624 <TIM_OC2_SetConfig+0xb0>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a1a      	ldr	r2, [pc, #104]	; (8009680 <TIM_OC2_SetConfig+0x10c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d003      	beq.n	8009624 <TIM_OC2_SetConfig+0xb0>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a19      	ldr	r2, [pc, #100]	; (8009684 <TIM_OC2_SetConfig+0x110>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d113      	bne.n	800964c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800962a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009632:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4313      	orrs	r3, r2
 800964a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	621a      	str	r2, [r3, #32]
}
 8009666:	bf00      	nop
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	40012c00 	.word	0x40012c00
 8009678:	40013400 	.word	0x40013400
 800967c:	40014000 	.word	0x40014000
 8009680:	40014400 	.word	0x40014400
 8009684:	40014800 	.word	0x40014800

08009688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a27      	ldr	r2, [pc, #156]	; (8009784 <TIM_OC3_SetConfig+0xfc>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_OC3_SetConfig+0x6a>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a26      	ldr	r2, [pc, #152]	; (8009788 <TIM_OC3_SetConfig+0x100>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10d      	bne.n	800970e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800970c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a1c      	ldr	r2, [pc, #112]	; (8009784 <TIM_OC3_SetConfig+0xfc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00f      	beq.n	8009736 <TIM_OC3_SetConfig+0xae>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a1b      	ldr	r2, [pc, #108]	; (8009788 <TIM_OC3_SetConfig+0x100>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00b      	beq.n	8009736 <TIM_OC3_SetConfig+0xae>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a1a      	ldr	r2, [pc, #104]	; (800978c <TIM_OC3_SetConfig+0x104>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d007      	beq.n	8009736 <TIM_OC3_SetConfig+0xae>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a19      	ldr	r2, [pc, #100]	; (8009790 <TIM_OC3_SetConfig+0x108>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d003      	beq.n	8009736 <TIM_OC3_SetConfig+0xae>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a18      	ldr	r2, [pc, #96]	; (8009794 <TIM_OC3_SetConfig+0x10c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d113      	bne.n	800975e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800973c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	011b      	lsls	r3, r3, #4
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	4313      	orrs	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	621a      	str	r2, [r3, #32]
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	40012c00 	.word	0x40012c00
 8009788:	40013400 	.word	0x40013400
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400
 8009794:	40014800 	.word	0x40014800

08009798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	021b      	lsls	r3, r3, #8
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	031b      	lsls	r3, r3, #12
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a18      	ldr	r2, [pc, #96]	; (8009858 <TIM_OC4_SetConfig+0xc0>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00f      	beq.n	800981c <TIM_OC4_SetConfig+0x84>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a17      	ldr	r2, [pc, #92]	; (800985c <TIM_OC4_SetConfig+0xc4>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00b      	beq.n	800981c <TIM_OC4_SetConfig+0x84>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a16      	ldr	r2, [pc, #88]	; (8009860 <TIM_OC4_SetConfig+0xc8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d007      	beq.n	800981c <TIM_OC4_SetConfig+0x84>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a15      	ldr	r2, [pc, #84]	; (8009864 <TIM_OC4_SetConfig+0xcc>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d003      	beq.n	800981c <TIM_OC4_SetConfig+0x84>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a14      	ldr	r2, [pc, #80]	; (8009868 <TIM_OC4_SetConfig+0xd0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d109      	bne.n	8009830 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	019b      	lsls	r3, r3, #6
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40012c00 	.word	0x40012c00
 800985c:	40013400 	.word	0x40013400
 8009860:	40014000 	.word	0x40014000
 8009864:	40014400 	.word	0x40014400
 8009868:	40014800 	.word	0x40014800

0800986c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a17      	ldr	r2, [pc, #92]	; (8009920 <TIM_OC5_SetConfig+0xb4>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00f      	beq.n	80098e6 <TIM_OC5_SetConfig+0x7a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a16      	ldr	r2, [pc, #88]	; (8009924 <TIM_OC5_SetConfig+0xb8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d00b      	beq.n	80098e6 <TIM_OC5_SetConfig+0x7a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a15      	ldr	r2, [pc, #84]	; (8009928 <TIM_OC5_SetConfig+0xbc>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d007      	beq.n	80098e6 <TIM_OC5_SetConfig+0x7a>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a14      	ldr	r2, [pc, #80]	; (800992c <TIM_OC5_SetConfig+0xc0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d003      	beq.n	80098e6 <TIM_OC5_SetConfig+0x7a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a13      	ldr	r2, [pc, #76]	; (8009930 <TIM_OC5_SetConfig+0xc4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d109      	bne.n	80098fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	621a      	str	r2, [r3, #32]
}
 8009914:	bf00      	nop
 8009916:	371c      	adds	r7, #28
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40012c00 	.word	0x40012c00
 8009924:	40013400 	.word	0x40013400
 8009928:	40014000 	.word	0x40014000
 800992c:	40014400 	.word	0x40014400
 8009930:	40014800 	.word	0x40014800

08009934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800997a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	051b      	lsls	r3, r3, #20
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	4313      	orrs	r3, r2
 8009986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a18      	ldr	r2, [pc, #96]	; (80099ec <TIM_OC6_SetConfig+0xb8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00f      	beq.n	80099b0 <TIM_OC6_SetConfig+0x7c>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a17      	ldr	r2, [pc, #92]	; (80099f0 <TIM_OC6_SetConfig+0xbc>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d00b      	beq.n	80099b0 <TIM_OC6_SetConfig+0x7c>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a16      	ldr	r2, [pc, #88]	; (80099f4 <TIM_OC6_SetConfig+0xc0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d007      	beq.n	80099b0 <TIM_OC6_SetConfig+0x7c>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <TIM_OC6_SetConfig+0xc4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_OC6_SetConfig+0x7c>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a14      	ldr	r2, [pc, #80]	; (80099fc <TIM_OC6_SetConfig+0xc8>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d109      	bne.n	80099c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40012c00 	.word	0x40012c00
 80099f0:	40013400 	.word	0x40013400
 80099f4:	40014000 	.word	0x40014000
 80099f8:	40014400 	.word	0x40014400
 80099fc:	40014800 	.word	0x40014800

08009a00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f023 0201 	bic.w	r2, r3, #1
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4a24      	ldr	r2, [pc, #144]	; (8009abc <TIM_TI1_SetConfig+0xbc>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <TIM_TI1_SetConfig+0x56>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a34:	d00f      	beq.n	8009a56 <TIM_TI1_SetConfig+0x56>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4a21      	ldr	r2, [pc, #132]	; (8009ac0 <TIM_TI1_SetConfig+0xc0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d00b      	beq.n	8009a56 <TIM_TI1_SetConfig+0x56>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a20      	ldr	r2, [pc, #128]	; (8009ac4 <TIM_TI1_SetConfig+0xc4>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d007      	beq.n	8009a56 <TIM_TI1_SetConfig+0x56>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <TIM_TI1_SetConfig+0xc8>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d003      	beq.n	8009a56 <TIM_TI1_SetConfig+0x56>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4a1e      	ldr	r2, [pc, #120]	; (8009acc <TIM_TI1_SetConfig+0xcc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d101      	bne.n	8009a5a <TIM_TI1_SetConfig+0x5a>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <TIM_TI1_SetConfig+0x5c>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d008      	beq.n	8009a72 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f023 0303 	bic.w	r3, r3, #3
 8009a66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e003      	b.n	8009a7a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f043 0301 	orr.w	r3, r3, #1
 8009a78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f023 030a 	bic.w	r3, r3, #10
 8009a94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f003 030a 	and.w	r3, r3, #10
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	621a      	str	r2, [r3, #32]
}
 8009aae:	bf00      	nop
 8009ab0:	371c      	adds	r7, #28
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	40000400 	.word	0x40000400
 8009ac4:	40000800 	.word	0x40000800
 8009ac8:	40013400 	.word	0x40013400
 8009acc:	40014000 	.word	0x40014000

08009ad0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f023 0210 	bic.w	r2, r3, #16
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	031b      	lsls	r3, r3, #12
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	011b      	lsls	r3, r3, #4
 8009b28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f023 0303 	bic.w	r3, r3, #3
 8009b76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	69db      	ldr	r3, [r3, #28]
 8009be0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	031b      	lsls	r3, r3, #12
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009c14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	031b      	lsls	r3, r3, #12
 8009c1a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	621a      	str	r2, [r3, #32]
}
 8009c30:	bf00      	nop
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f003 031f 	and.w	r3, r3, #31
 8009c4e:	2201      	movs	r2, #1
 8009c50:	fa02 f303 	lsl.w	r3, r2, r3
 8009c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a1a      	ldr	r2, [r3, #32]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	401a      	ands	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a1a      	ldr	r2, [r3, #32]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 031f 	and.w	r3, r3, #31
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	fa01 f303 	lsl.w	r3, r1, r3
 8009c74:	431a      	orrs	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	621a      	str	r2, [r3, #32]
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e063      	b.n	8009d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a2b      	ldr	r2, [pc, #172]	; (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d004      	beq.n	8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a2a      	ldr	r2, [pc, #168]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d108      	bne.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d018      	beq.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d12:	d013      	beq.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a18      	ldr	r2, [pc, #96]	; (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d00e      	beq.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d009      	beq.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a12      	ldr	r2, [pc, #72]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d004      	beq.n	8009d3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a13      	ldr	r2, [pc, #76]	; (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d10c      	bne.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	40012c00 	.word	0x40012c00
 8009d78:	40013400 	.word	0x40013400
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	40000800 	.word	0x40000800
 8009d84:	40014000 	.word	0x40014000

08009d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e065      	b.n	8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d004      	beq.n	8009e32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a14      	ldr	r2, [pc, #80]	; (8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d115      	bne.n	8009e5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	051b      	lsls	r3, r3, #20
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40012c00 	.word	0x40012c00
 8009e80:	40013400 	.word	0x40013400

08009e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e040      	b.n	8009f54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fa fef4 	bl	8004cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2224      	movs	r2, #36	; 0x24
 8009eec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0201 	bic.w	r2, r2, #1
 8009efc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f82c 	bl	8009f5c <UART_SetConfig>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e022      	b.n	8009f54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa3e 	bl	800a398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0201 	orr.w	r2, r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fac5 	bl	800a4dc <UART_CheckIdleState>
 8009f52:	4603      	mov	r3, r0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	431a      	orrs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009f8e:	f023 030c 	bic.w	r3, r3, #12
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	6939      	ldr	r1, [r7, #16]
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4aab      	ldr	r2, [pc, #684]	; (800a288 <UART_SetConfig+0x32c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d120      	bne.n	800a022 <UART_SetConfig+0xc6>
 8009fe0:	4baa      	ldr	r3, [pc, #680]	; (800a28c <UART_SetConfig+0x330>)
 8009fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d817      	bhi.n	800a01c <UART_SetConfig+0xc0>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x98>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a005 	.word	0x0800a005
 8009ff8:	0800a011 	.word	0x0800a011
 8009ffc:	0800a017 	.word	0x0800a017
 800a000:	0800a00b 	.word	0x0800a00b
 800a004:	2301      	movs	r3, #1
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e0b5      	b.n	800a176 <UART_SetConfig+0x21a>
 800a00a:	2302      	movs	r3, #2
 800a00c:	77fb      	strb	r3, [r7, #31]
 800a00e:	e0b2      	b.n	800a176 <UART_SetConfig+0x21a>
 800a010:	2304      	movs	r3, #4
 800a012:	77fb      	strb	r3, [r7, #31]
 800a014:	e0af      	b.n	800a176 <UART_SetConfig+0x21a>
 800a016:	2308      	movs	r3, #8
 800a018:	77fb      	strb	r3, [r7, #31]
 800a01a:	e0ac      	b.n	800a176 <UART_SetConfig+0x21a>
 800a01c:	2310      	movs	r3, #16
 800a01e:	77fb      	strb	r3, [r7, #31]
 800a020:	e0a9      	b.n	800a176 <UART_SetConfig+0x21a>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a9a      	ldr	r2, [pc, #616]	; (800a290 <UART_SetConfig+0x334>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d124      	bne.n	800a076 <UART_SetConfig+0x11a>
 800a02c:	4b97      	ldr	r3, [pc, #604]	; (800a28c <UART_SetConfig+0x330>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a034:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a038:	d011      	beq.n	800a05e <UART_SetConfig+0x102>
 800a03a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a03e:	d817      	bhi.n	800a070 <UART_SetConfig+0x114>
 800a040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a044:	d011      	beq.n	800a06a <UART_SetConfig+0x10e>
 800a046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a04a:	d811      	bhi.n	800a070 <UART_SetConfig+0x114>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d003      	beq.n	800a058 <UART_SetConfig+0xfc>
 800a050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a054:	d006      	beq.n	800a064 <UART_SetConfig+0x108>
 800a056:	e00b      	b.n	800a070 <UART_SetConfig+0x114>
 800a058:	2300      	movs	r3, #0
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e08b      	b.n	800a176 <UART_SetConfig+0x21a>
 800a05e:	2302      	movs	r3, #2
 800a060:	77fb      	strb	r3, [r7, #31]
 800a062:	e088      	b.n	800a176 <UART_SetConfig+0x21a>
 800a064:	2304      	movs	r3, #4
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e085      	b.n	800a176 <UART_SetConfig+0x21a>
 800a06a:	2308      	movs	r3, #8
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e082      	b.n	800a176 <UART_SetConfig+0x21a>
 800a070:	2310      	movs	r3, #16
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e07f      	b.n	800a176 <UART_SetConfig+0x21a>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a86      	ldr	r2, [pc, #536]	; (800a294 <UART_SetConfig+0x338>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d124      	bne.n	800a0ca <UART_SetConfig+0x16e>
 800a080:	4b82      	ldr	r3, [pc, #520]	; (800a28c <UART_SetConfig+0x330>)
 800a082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a084:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a088:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a08c:	d011      	beq.n	800a0b2 <UART_SetConfig+0x156>
 800a08e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a092:	d817      	bhi.n	800a0c4 <UART_SetConfig+0x168>
 800a094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a098:	d011      	beq.n	800a0be <UART_SetConfig+0x162>
 800a09a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a09e:	d811      	bhi.n	800a0c4 <UART_SetConfig+0x168>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <UART_SetConfig+0x150>
 800a0a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0a8:	d006      	beq.n	800a0b8 <UART_SetConfig+0x15c>
 800a0aa:	e00b      	b.n	800a0c4 <UART_SetConfig+0x168>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	77fb      	strb	r3, [r7, #31]
 800a0b0:	e061      	b.n	800a176 <UART_SetConfig+0x21a>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	e05e      	b.n	800a176 <UART_SetConfig+0x21a>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	77fb      	strb	r3, [r7, #31]
 800a0bc:	e05b      	b.n	800a176 <UART_SetConfig+0x21a>
 800a0be:	2308      	movs	r3, #8
 800a0c0:	77fb      	strb	r3, [r7, #31]
 800a0c2:	e058      	b.n	800a176 <UART_SetConfig+0x21a>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	77fb      	strb	r3, [r7, #31]
 800a0c8:	e055      	b.n	800a176 <UART_SetConfig+0x21a>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a72      	ldr	r2, [pc, #456]	; (800a298 <UART_SetConfig+0x33c>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d124      	bne.n	800a11e <UART_SetConfig+0x1c2>
 800a0d4:	4b6d      	ldr	r3, [pc, #436]	; (800a28c <UART_SetConfig+0x330>)
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a0dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0e0:	d011      	beq.n	800a106 <UART_SetConfig+0x1aa>
 800a0e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0e6:	d817      	bhi.n	800a118 <UART_SetConfig+0x1bc>
 800a0e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0ec:	d011      	beq.n	800a112 <UART_SetConfig+0x1b6>
 800a0ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0f2:	d811      	bhi.n	800a118 <UART_SetConfig+0x1bc>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <UART_SetConfig+0x1a4>
 800a0f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fc:	d006      	beq.n	800a10c <UART_SetConfig+0x1b0>
 800a0fe:	e00b      	b.n	800a118 <UART_SetConfig+0x1bc>
 800a100:	2300      	movs	r3, #0
 800a102:	77fb      	strb	r3, [r7, #31]
 800a104:	e037      	b.n	800a176 <UART_SetConfig+0x21a>
 800a106:	2302      	movs	r3, #2
 800a108:	77fb      	strb	r3, [r7, #31]
 800a10a:	e034      	b.n	800a176 <UART_SetConfig+0x21a>
 800a10c:	2304      	movs	r3, #4
 800a10e:	77fb      	strb	r3, [r7, #31]
 800a110:	e031      	b.n	800a176 <UART_SetConfig+0x21a>
 800a112:	2308      	movs	r3, #8
 800a114:	77fb      	strb	r3, [r7, #31]
 800a116:	e02e      	b.n	800a176 <UART_SetConfig+0x21a>
 800a118:	2310      	movs	r3, #16
 800a11a:	77fb      	strb	r3, [r7, #31]
 800a11c:	e02b      	b.n	800a176 <UART_SetConfig+0x21a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a5e      	ldr	r2, [pc, #376]	; (800a29c <UART_SetConfig+0x340>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d124      	bne.n	800a172 <UART_SetConfig+0x216>
 800a128:	4b58      	ldr	r3, [pc, #352]	; (800a28c <UART_SetConfig+0x330>)
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a130:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a134:	d011      	beq.n	800a15a <UART_SetConfig+0x1fe>
 800a136:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a13a:	d817      	bhi.n	800a16c <UART_SetConfig+0x210>
 800a13c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a140:	d011      	beq.n	800a166 <UART_SetConfig+0x20a>
 800a142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a146:	d811      	bhi.n	800a16c <UART_SetConfig+0x210>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <UART_SetConfig+0x1f8>
 800a14c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a150:	d006      	beq.n	800a160 <UART_SetConfig+0x204>
 800a152:	e00b      	b.n	800a16c <UART_SetConfig+0x210>
 800a154:	2300      	movs	r3, #0
 800a156:	77fb      	strb	r3, [r7, #31]
 800a158:	e00d      	b.n	800a176 <UART_SetConfig+0x21a>
 800a15a:	2302      	movs	r3, #2
 800a15c:	77fb      	strb	r3, [r7, #31]
 800a15e:	e00a      	b.n	800a176 <UART_SetConfig+0x21a>
 800a160:	2304      	movs	r3, #4
 800a162:	77fb      	strb	r3, [r7, #31]
 800a164:	e007      	b.n	800a176 <UART_SetConfig+0x21a>
 800a166:	2308      	movs	r3, #8
 800a168:	77fb      	strb	r3, [r7, #31]
 800a16a:	e004      	b.n	800a176 <UART_SetConfig+0x21a>
 800a16c:	2310      	movs	r3, #16
 800a16e:	77fb      	strb	r3, [r7, #31]
 800a170:	e001      	b.n	800a176 <UART_SetConfig+0x21a>
 800a172:	2310      	movs	r3, #16
 800a174:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a17e:	f040 808f 	bne.w	800a2a0 <UART_SetConfig+0x344>
  {
    switch (clocksource)
 800a182:	7ffb      	ldrb	r3, [r7, #31]
 800a184:	2b08      	cmp	r3, #8
 800a186:	d85f      	bhi.n	800a248 <UART_SetConfig+0x2ec>
 800a188:	a201      	add	r2, pc, #4	; (adr r2, 800a190 <UART_SetConfig+0x234>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1d5 	.word	0x0800a1d5
 800a198:	0800a1f5 	.word	0x0800a1f5
 800a19c:	0800a249 	.word	0x0800a249
 800a1a0:	0800a211 	.word	0x0800a211
 800a1a4:	0800a249 	.word	0x0800a249
 800a1a8:	0800a249 	.word	0x0800a249
 800a1ac:	0800a249 	.word	0x0800a249
 800a1b0:	0800a231 	.word	0x0800a231
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1b4:	f7fe fa4a 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800a1b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	005a      	lsls	r2, r3, #1
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	61bb      	str	r3, [r7, #24]
        break;
 800a1d2:	e03c      	b.n	800a24e <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1d4:	f7fe fa5c 	bl	8008690 <HAL_RCC_GetPCLK2Freq>
 800a1d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	005a      	lsls	r2, r3, #1
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	085b      	lsrs	r3, r3, #1
 800a1e4:	441a      	add	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	61bb      	str	r3, [r7, #24]
        break;
 800a1f2:	e02c      	b.n	800a24e <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	085b      	lsrs	r3, r3, #1
 800a1fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a1fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	6852      	ldr	r2, [r2, #4]
 800a206:	fbb3 f3f2 	udiv	r3, r3, r2
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	61bb      	str	r3, [r7, #24]
        break;
 800a20e:	e01e      	b.n	800a24e <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a210:	f7fe f9a6 	bl	8008560 <HAL_RCC_GetSysClockFreq>
 800a214:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	005a      	lsls	r2, r3, #1
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	085b      	lsrs	r3, r3, #1
 800a220:	441a      	add	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	61bb      	str	r3, [r7, #24]
        break;
 800a22e:	e00e      	b.n	800a24e <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	085b      	lsrs	r3, r3, #1
 800a236:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a242:	b29b      	uxth	r3, r3
 800a244:	61bb      	str	r3, [r7, #24]
        break;
 800a246:	e002      	b.n	800a24e <UART_SetConfig+0x2f2>
      default:
        ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]
        break;
 800a24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	2b0f      	cmp	r3, #15
 800a252:	d916      	bls.n	800a282 <UART_SetConfig+0x326>
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a25a:	d212      	bcs.n	800a282 <UART_SetConfig+0x326>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	f023 030f 	bic.w	r3, r3, #15
 800a264:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	085b      	lsrs	r3, r3, #1
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	b29a      	uxth	r2, r3
 800a272:	897b      	ldrh	r3, [r7, #10]
 800a274:	4313      	orrs	r3, r2
 800a276:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	897a      	ldrh	r2, [r7, #10]
 800a27e:	60da      	str	r2, [r3, #12]
 800a280:	e07e      	b.n	800a380 <UART_SetConfig+0x424>
    }
    else
    {
      ret = HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
 800a286:	e07b      	b.n	800a380 <UART_SetConfig+0x424>
 800a288:	40013800 	.word	0x40013800
 800a28c:	40021000 	.word	0x40021000
 800a290:	40004400 	.word	0x40004400
 800a294:	40004800 	.word	0x40004800
 800a298:	40004c00 	.word	0x40004c00
 800a29c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800a2a0:	7ffb      	ldrb	r3, [r7, #31]
 800a2a2:	2b08      	cmp	r3, #8
 800a2a4:	d85b      	bhi.n	800a35e <UART_SetConfig+0x402>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <UART_SetConfig+0x350>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2ef 	.word	0x0800a2ef
 800a2b4:	0800a30d 	.word	0x0800a30d
 800a2b8:	0800a35f 	.word	0x0800a35f
 800a2bc:	0800a329 	.word	0x0800a329
 800a2c0:	0800a35f 	.word	0x0800a35f
 800a2c4:	0800a35f 	.word	0x0800a35f
 800a2c8:	0800a35f 	.word	0x0800a35f
 800a2cc:	0800a347 	.word	0x0800a347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d0:	f7fe f9bc 	bl	800864c <HAL_RCC_GetPCLK1Freq>
 800a2d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	085a      	lsrs	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	61bb      	str	r3, [r7, #24]
        break;
 800a2ec:	e03a      	b.n	800a364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ee:	f7fe f9cf 	bl	8008690 <HAL_RCC_GetPCLK2Freq>
 800a2f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	085a      	lsrs	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	441a      	add	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	fbb2 f3f3 	udiv	r3, r2, r3
 800a306:	b29b      	uxth	r3, r3
 800a308:	61bb      	str	r3, [r7, #24]
        break;
 800a30a:	e02b      	b.n	800a364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	085b      	lsrs	r3, r3, #1
 800a312:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800a316:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	6852      	ldr	r2, [r2, #4]
 800a31e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a322:	b29b      	uxth	r3, r3
 800a324:	61bb      	str	r3, [r7, #24]
        break;
 800a326:	e01d      	b.n	800a364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a328:	f7fe f91a 	bl	8008560 <HAL_RCC_GetSysClockFreq>
 800a32c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	085a      	lsrs	r2, r3, #1
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	441a      	add	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a340:	b29b      	uxth	r3, r3
 800a342:	61bb      	str	r3, [r7, #24]
        break;
 800a344:	e00e      	b.n	800a364 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	085b      	lsrs	r3, r3, #1
 800a34c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	fbb2 f3f3 	udiv	r3, r2, r3
 800a358:	b29b      	uxth	r3, r3
 800a35a:	61bb      	str	r3, [r7, #24]
        break;
 800a35c:	e002      	b.n	800a364 <UART_SetConfig+0x408>
      default:
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	75fb      	strb	r3, [r7, #23]
        break;
 800a362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b0f      	cmp	r3, #15
 800a368:	d908      	bls.n	800a37c <UART_SetConfig+0x420>
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a370:	d204      	bcs.n	800a37c <UART_SetConfig+0x420>
    {
      huart->Instance->BRR = usartdiv;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	60da      	str	r2, [r3, #12]
 800a37a:	e001      	b.n	800a380 <UART_SetConfig+0x424>
    }
    else
    {
      ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop

0800a398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00a      	beq.n	800a3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	f003 0308 	and.w	r3, r3, #8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	430a      	orrs	r2, r1
 800a426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	f003 0310 	and.w	r3, r3, #16
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	f003 0320 	and.w	r3, r3, #32
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a474:	2b00      	cmp	r3, #0
 800a476:	d01a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a496:	d10a      	bne.n	800a4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af02      	add	r7, sp, #8
 800a4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a4ea:	f7fa fdc1 	bl	8005070 <HAL_GetTick>
 800a4ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0308 	and.w	r3, r3, #8
 800a4fa:	2b08      	cmp	r3, #8
 800a4fc:	d10e      	bne.n	800a51c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f82a 	bl	800a566 <UART_WaitOnFlagUntilTimeout>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e020      	b.n	800a55e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b04      	cmp	r3, #4
 800a528:	d10e      	bne.n	800a548 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a52a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f814 	bl	800a566 <UART_WaitOnFlagUntilTimeout>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e00a      	b.n	800a55e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2220      	movs	r2, #32
 800a552:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	603b      	str	r3, [r7, #0]
 800a572:	4613      	mov	r3, r2
 800a574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a576:	e05d      	b.n	800a634 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d059      	beq.n	800a634 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a580:	f7fa fd76 	bl	8005070 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <UART_WaitOnFlagUntilTimeout+0x30>
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d11b      	bne.n	800a5ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0201 	bic.w	r2, r2, #1
 800a5b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a5ca:	2303      	movs	r3, #3
 800a5cc:	e042      	b.n	800a654 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d02b      	beq.n	800a634 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ea:	d123      	bne.n	800a634 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5f4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a604:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2220      	movs	r2, #32
 800a61a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2220      	movs	r2, #32
 800a626:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e00f      	b.n	800a654 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69da      	ldr	r2, [r3, #28]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d092      	beq.n	800a578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <_ZdlPvj>:
 800a65c:	f000 b800 	b.w	800a660 <_ZdlPv>

0800a660 <_ZdlPv>:
 800a660:	f002 b956 	b.w	800c910 <free>
 800a664:	0000      	movs	r0, r0
	...

0800a668 <sin>:
 800a668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a66a:	ec53 2b10 	vmov	r2, r3, d0
 800a66e:	4826      	ldr	r0, [pc, #152]	; (800a708 <sin+0xa0>)
 800a670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a674:	4281      	cmp	r1, r0
 800a676:	dc07      	bgt.n	800a688 <sin+0x20>
 800a678:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a700 <sin+0x98>
 800a67c:	2000      	movs	r0, #0
 800a67e:	f001 fb4f 	bl	800bd20 <__kernel_sin>
 800a682:	ec51 0b10 	vmov	r0, r1, d0
 800a686:	e007      	b.n	800a698 <sin+0x30>
 800a688:	4820      	ldr	r0, [pc, #128]	; (800a70c <sin+0xa4>)
 800a68a:	4281      	cmp	r1, r0
 800a68c:	dd09      	ble.n	800a6a2 <sin+0x3a>
 800a68e:	ee10 0a10 	vmov	r0, s0
 800a692:	4619      	mov	r1, r3
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	ec41 0b10 	vmov	d0, r0, r1
 800a69c:	b005      	add	sp, #20
 800a69e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6a2:	4668      	mov	r0, sp
 800a6a4:	f000 fb38 	bl	800ad18 <__ieee754_rem_pio2>
 800a6a8:	f000 0003 	and.w	r0, r0, #3
 800a6ac:	2801      	cmp	r0, #1
 800a6ae:	d008      	beq.n	800a6c2 <sin+0x5a>
 800a6b0:	2802      	cmp	r0, #2
 800a6b2:	d00d      	beq.n	800a6d0 <sin+0x68>
 800a6b4:	b9d0      	cbnz	r0, 800a6ec <sin+0x84>
 800a6b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ba:	ed9d 0b00 	vldr	d0, [sp]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	e7dd      	b.n	800a67e <sin+0x16>
 800a6c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6c6:	ed9d 0b00 	vldr	d0, [sp]
 800a6ca:	f000 ff21 	bl	800b510 <__kernel_cos>
 800a6ce:	e7d8      	b.n	800a682 <sin+0x1a>
 800a6d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d4:	ed9d 0b00 	vldr	d0, [sp]
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f001 fb21 	bl	800bd20 <__kernel_sin>
 800a6de:	ec53 2b10 	vmov	r2, r3, d0
 800a6e2:	ee10 0a10 	vmov	r0, s0
 800a6e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6ea:	e7d5      	b.n	800a698 <sin+0x30>
 800a6ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6f0:	ed9d 0b00 	vldr	d0, [sp]
 800a6f4:	f000 ff0c 	bl	800b510 <__kernel_cos>
 800a6f8:	e7f1      	b.n	800a6de <sin+0x76>
 800a6fa:	bf00      	nop
 800a6fc:	f3af 8000 	nop.w
	...
 800a708:	3fe921fb 	.word	0x3fe921fb
 800a70c:	7fefffff 	.word	0x7fefffff

0800a710 <cosf>:
 800a710:	ee10 3a10 	vmov	r3, s0
 800a714:	b507      	push	{r0, r1, r2, lr}
 800a716:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <cosf+0x78>)
 800a718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a71c:	4293      	cmp	r3, r2
 800a71e:	dc04      	bgt.n	800a72a <cosf+0x1a>
 800a720:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a78c <cosf+0x7c>
 800a724:	f001 fbba 	bl	800be9c <__kernel_cosf>
 800a728:	e004      	b.n	800a734 <cosf+0x24>
 800a72a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a72e:	db04      	blt.n	800a73a <cosf+0x2a>
 800a730:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a734:	b003      	add	sp, #12
 800a736:	f85d fb04 	ldr.w	pc, [sp], #4
 800a73a:	4668      	mov	r0, sp
 800a73c:	f000 fdaa 	bl	800b294 <__ieee754_rem_pio2f>
 800a740:	f000 0003 	and.w	r0, r0, #3
 800a744:	2801      	cmp	r0, #1
 800a746:	d007      	beq.n	800a758 <cosf+0x48>
 800a748:	2802      	cmp	r0, #2
 800a74a:	d00e      	beq.n	800a76a <cosf+0x5a>
 800a74c:	b9a0      	cbnz	r0, 800a778 <cosf+0x68>
 800a74e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a752:	ed9d 0a00 	vldr	s0, [sp]
 800a756:	e7e5      	b.n	800a724 <cosf+0x14>
 800a758:	eddd 0a01 	vldr	s1, [sp, #4]
 800a75c:	ed9d 0a00 	vldr	s0, [sp]
 800a760:	f001 fe86 	bl	800c470 <__kernel_sinf>
 800a764:	eeb1 0a40 	vneg.f32	s0, s0
 800a768:	e7e4      	b.n	800a734 <cosf+0x24>
 800a76a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a76e:	ed9d 0a00 	vldr	s0, [sp]
 800a772:	f001 fb93 	bl	800be9c <__kernel_cosf>
 800a776:	e7f5      	b.n	800a764 <cosf+0x54>
 800a778:	eddd 0a01 	vldr	s1, [sp, #4]
 800a77c:	ed9d 0a00 	vldr	s0, [sp]
 800a780:	2001      	movs	r0, #1
 800a782:	f001 fe75 	bl	800c470 <__kernel_sinf>
 800a786:	e7d5      	b.n	800a734 <cosf+0x24>
 800a788:	3f490fd8 	.word	0x3f490fd8
 800a78c:	00000000 	.word	0x00000000

0800a790 <sinf>:
 800a790:	ee10 3a10 	vmov	r3, s0
 800a794:	b507      	push	{r0, r1, r2, lr}
 800a796:	4a1d      	ldr	r2, [pc, #116]	; (800a80c <sinf+0x7c>)
 800a798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a79c:	4293      	cmp	r3, r2
 800a79e:	dc05      	bgt.n	800a7ac <sinf+0x1c>
 800a7a0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a810 <sinf+0x80>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f001 fe63 	bl	800c470 <__kernel_sinf>
 800a7aa:	e004      	b.n	800a7b6 <sinf+0x26>
 800a7ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7b0:	db04      	blt.n	800a7bc <sinf+0x2c>
 800a7b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a7b6:	b003      	add	sp, #12
 800a7b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7bc:	4668      	mov	r0, sp
 800a7be:	f000 fd69 	bl	800b294 <__ieee754_rem_pio2f>
 800a7c2:	f000 0003 	and.w	r0, r0, #3
 800a7c6:	2801      	cmp	r0, #1
 800a7c8:	d008      	beq.n	800a7dc <sinf+0x4c>
 800a7ca:	2802      	cmp	r0, #2
 800a7cc:	d00d      	beq.n	800a7ea <sinf+0x5a>
 800a7ce:	b9b0      	cbnz	r0, 800a7fe <sinf+0x6e>
 800a7d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7d4:	ed9d 0a00 	vldr	s0, [sp]
 800a7d8:	2001      	movs	r0, #1
 800a7da:	e7e4      	b.n	800a7a6 <sinf+0x16>
 800a7dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7e0:	ed9d 0a00 	vldr	s0, [sp]
 800a7e4:	f001 fb5a 	bl	800be9c <__kernel_cosf>
 800a7e8:	e7e5      	b.n	800a7b6 <sinf+0x26>
 800a7ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7ee:	ed9d 0a00 	vldr	s0, [sp]
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	f001 fe3c 	bl	800c470 <__kernel_sinf>
 800a7f8:	eeb1 0a40 	vneg.f32	s0, s0
 800a7fc:	e7db      	b.n	800a7b6 <sinf+0x26>
 800a7fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800a802:	ed9d 0a00 	vldr	s0, [sp]
 800a806:	f001 fb49 	bl	800be9c <__kernel_cosf>
 800a80a:	e7f5      	b.n	800a7f8 <sinf+0x68>
 800a80c:	3f490fd8 	.word	0x3f490fd8
 800a810:	00000000 	.word	0x00000000

0800a814 <asin>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	ed2d 8b02 	vpush	{d8}
 800a81a:	ec55 4b10 	vmov	r4, r5, d0
 800a81e:	f000 f867 	bl	800a8f0 <__ieee754_asin>
 800a822:	4b16      	ldr	r3, [pc, #88]	; (800a87c <asin+0x68>)
 800a824:	eeb0 8a40 	vmov.f32	s16, s0
 800a828:	eef0 8a60 	vmov.f32	s17, s1
 800a82c:	f993 3000 	ldrsb.w	r3, [r3]
 800a830:	3301      	adds	r3, #1
 800a832:	d01c      	beq.n	800a86e <asin+0x5a>
 800a834:	4622      	mov	r2, r4
 800a836:	462b      	mov	r3, r5
 800a838:	4620      	mov	r0, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f6 f976 	bl	8000b2c <__aeabi_dcmpun>
 800a840:	b9a8      	cbnz	r0, 800a86e <asin+0x5a>
 800a842:	ec45 4b10 	vmov	d0, r4, r5
 800a846:	f001 fe5b 	bl	800c500 <fabs>
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <asin+0x6c>)
 800a84c:	ec51 0b10 	vmov	r0, r1, d0
 800a850:	2200      	movs	r2, #0
 800a852:	f7f6 f961 	bl	8000b18 <__aeabi_dcmpgt>
 800a856:	b150      	cbz	r0, 800a86e <asin+0x5a>
 800a858:	f002 f828 	bl	800c8ac <__errno>
 800a85c:	ecbd 8b02 	vpop	{d8}
 800a860:	2321      	movs	r3, #33	; 0x21
 800a862:	6003      	str	r3, [r0, #0]
 800a864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a868:	4806      	ldr	r0, [pc, #24]	; (800a884 <asin+0x70>)
 800a86a:	f001 bed5 	b.w	800c618 <nan>
 800a86e:	eeb0 0a48 	vmov.f32	s0, s16
 800a872:	eef0 0a68 	vmov.f32	s1, s17
 800a876:	ecbd 8b02 	vpop	{d8}
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	20000019 	.word	0x20000019
 800a880:	3ff00000 	.word	0x3ff00000
 800a884:	0800fb4f 	.word	0x0800fb4f

0800a888 <sqrt>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	ed2d 8b02 	vpush	{d8}
 800a88e:	ec55 4b10 	vmov	r4, r5, d0
 800a892:	f000 fc4b 	bl	800b12c <__ieee754_sqrt>
 800a896:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <sqrt+0x64>)
 800a898:	eeb0 8a40 	vmov.f32	s16, s0
 800a89c:	eef0 8a60 	vmov.f32	s17, s1
 800a8a0:	f993 3000 	ldrsb.w	r3, [r3]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	d019      	beq.n	800a8dc <sqrt+0x54>
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f7f6 f93c 	bl	8000b2c <__aeabi_dcmpun>
 800a8b4:	b990      	cbnz	r0, 800a8dc <sqrt+0x54>
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f6 f90d 	bl	8000adc <__aeabi_dcmplt>
 800a8c2:	b158      	cbz	r0, 800a8dc <sqrt+0x54>
 800a8c4:	f001 fff2 	bl	800c8ac <__errno>
 800a8c8:	2321      	movs	r3, #33	; 0x21
 800a8ca:	6003      	str	r3, [r0, #0]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	f7f5 ffba 	bl	800084c <__aeabi_ddiv>
 800a8d8:	ec41 0b18 	vmov	d8, r0, r1
 800a8dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8e0:	eef0 0a68 	vmov.f32	s1, s17
 800a8e4:	ecbd 8b02 	vpop	{d8}
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000019 	.word	0x20000019

0800a8f0 <__ieee754_asin>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	ed2d 8b04 	vpush	{d8-d9}
 800a8f8:	ec55 4b10 	vmov	r4, r5, d0
 800a8fc:	4bcc      	ldr	r3, [pc, #816]	; (800ac30 <__ieee754_asin+0x340>)
 800a8fe:	b083      	sub	sp, #12
 800a900:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a904:	4598      	cmp	r8, r3
 800a906:	9501      	str	r5, [sp, #4]
 800a908:	dd35      	ble.n	800a976 <__ieee754_asin+0x86>
 800a90a:	ee10 3a10 	vmov	r3, s0
 800a90e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a912:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a916:	ea58 0303 	orrs.w	r3, r8, r3
 800a91a:	d117      	bne.n	800a94c <__ieee754_asin+0x5c>
 800a91c:	a3aa      	add	r3, pc, #680	; (adr r3, 800abc8 <__ieee754_asin+0x2d8>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	ee10 0a10 	vmov	r0, s0
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fe66 	bl	80005f8 <__aeabi_dmul>
 800a92c:	a3a8      	add	r3, pc, #672	; (adr r3, 800abd0 <__ieee754_asin+0x2e0>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	4606      	mov	r6, r0
 800a934:	460f      	mov	r7, r1
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fe5d 	bl	80005f8 <__aeabi_dmul>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	f7f5 fca1 	bl	800028c <__adddf3>
 800a94a:	e00b      	b.n	800a964 <__ieee754_asin+0x74>
 800a94c:	ee10 2a10 	vmov	r2, s0
 800a950:	462b      	mov	r3, r5
 800a952:	ee10 0a10 	vmov	r0, s0
 800a956:	4629      	mov	r1, r5
 800a958:	f7f5 fc96 	bl	8000288 <__aeabi_dsub>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	f7f5 ff74 	bl	800084c <__aeabi_ddiv>
 800a964:	4604      	mov	r4, r0
 800a966:	460d      	mov	r5, r1
 800a968:	ec45 4b10 	vmov	d0, r4, r5
 800a96c:	b003      	add	sp, #12
 800a96e:	ecbd 8b04 	vpop	{d8-d9}
 800a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a976:	4baf      	ldr	r3, [pc, #700]	; (800ac34 <__ieee754_asin+0x344>)
 800a978:	4598      	cmp	r8, r3
 800a97a:	dc11      	bgt.n	800a9a0 <__ieee754_asin+0xb0>
 800a97c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a980:	f280 80ae 	bge.w	800aae0 <__ieee754_asin+0x1f0>
 800a984:	a394      	add	r3, pc, #592	; (adr r3, 800abd8 <__ieee754_asin+0x2e8>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	ee10 0a10 	vmov	r0, s0
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fc7c 	bl	800028c <__adddf3>
 800a994:	4ba8      	ldr	r3, [pc, #672]	; (800ac38 <__ieee754_asin+0x348>)
 800a996:	2200      	movs	r2, #0
 800a998:	f7f6 f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d1e3      	bne.n	800a968 <__ieee754_asin+0x78>
 800a9a0:	ec45 4b10 	vmov	d0, r4, r5
 800a9a4:	f001 fdac 	bl	800c500 <fabs>
 800a9a8:	49a3      	ldr	r1, [pc, #652]	; (800ac38 <__ieee754_asin+0x348>)
 800a9aa:	ec53 2b10 	vmov	r2, r3, d0
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f7f5 fc6a 	bl	8000288 <__aeabi_dsub>
 800a9b4:	4ba1      	ldr	r3, [pc, #644]	; (800ac3c <__ieee754_asin+0x34c>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f7f5 fe1e 	bl	80005f8 <__aeabi_dmul>
 800a9bc:	a388      	add	r3, pc, #544	; (adr r3, 800abe0 <__ieee754_asin+0x2f0>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	a387      	add	r3, pc, #540	; (adr r3, 800abe8 <__ieee754_asin+0x2f8>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fc5c 	bl	800028c <__adddf3>
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f7f5 fe0e 	bl	80005f8 <__aeabi_dmul>
 800a9dc:	a384      	add	r3, pc, #528	; (adr r3, 800abf0 <__ieee754_asin+0x300>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fc51 	bl	8000288 <__aeabi_dsub>
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	f7f5 fe05 	bl	80005f8 <__aeabi_dmul>
 800a9ee:	a382      	add	r3, pc, #520	; (adr r3, 800abf8 <__ieee754_asin+0x308>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fc4a 	bl	800028c <__adddf3>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f7f5 fdfc 	bl	80005f8 <__aeabi_dmul>
 800aa00:	a37f      	add	r3, pc, #508	; (adr r3, 800ac00 <__ieee754_asin+0x310>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fc3f 	bl	8000288 <__aeabi_dsub>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	f7f5 fdf3 	bl	80005f8 <__aeabi_dmul>
 800aa12:	a37d      	add	r3, pc, #500	; (adr r3, 800ac08 <__ieee754_asin+0x318>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	f7f5 fc38 	bl	800028c <__adddf3>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	462b      	mov	r3, r5
 800aa20:	f7f5 fdea 	bl	80005f8 <__aeabi_dmul>
 800aa24:	a37a      	add	r3, pc, #488	; (adr r3, 800ac10 <__ieee754_asin+0x320>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	ec41 0b18 	vmov	d8, r0, r1
 800aa2e:	4620      	mov	r0, r4
 800aa30:	4629      	mov	r1, r5
 800aa32:	f7f5 fde1 	bl	80005f8 <__aeabi_dmul>
 800aa36:	a378      	add	r3, pc, #480	; (adr r3, 800ac18 <__ieee754_asin+0x328>)
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	f7f5 fc24 	bl	8000288 <__aeabi_dsub>
 800aa40:	4622      	mov	r2, r4
 800aa42:	462b      	mov	r3, r5
 800aa44:	f7f5 fdd8 	bl	80005f8 <__aeabi_dmul>
 800aa48:	a375      	add	r3, pc, #468	; (adr r3, 800ac20 <__ieee754_asin+0x330>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fc1d 	bl	800028c <__adddf3>
 800aa52:	4622      	mov	r2, r4
 800aa54:	462b      	mov	r3, r5
 800aa56:	f7f5 fdcf 	bl	80005f8 <__aeabi_dmul>
 800aa5a:	a373      	add	r3, pc, #460	; (adr r3, 800ac28 <__ieee754_asin+0x338>)
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	f7f5 fc12 	bl	8000288 <__aeabi_dsub>
 800aa64:	4622      	mov	r2, r4
 800aa66:	462b      	mov	r3, r5
 800aa68:	f7f5 fdc6 	bl	80005f8 <__aeabi_dmul>
 800aa6c:	4b72      	ldr	r3, [pc, #456]	; (800ac38 <__ieee754_asin+0x348>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f7f5 fc0c 	bl	800028c <__adddf3>
 800aa74:	ec45 4b10 	vmov	d0, r4, r5
 800aa78:	4606      	mov	r6, r0
 800aa7a:	460f      	mov	r7, r1
 800aa7c:	f000 fb56 	bl	800b12c <__ieee754_sqrt>
 800aa80:	4b6f      	ldr	r3, [pc, #444]	; (800ac40 <__ieee754_asin+0x350>)
 800aa82:	4598      	cmp	r8, r3
 800aa84:	ec5b ab10 	vmov	sl, fp, d0
 800aa88:	f340 80dc 	ble.w	800ac44 <__ieee754_asin+0x354>
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	463b      	mov	r3, r7
 800aa90:	ec51 0b18 	vmov	r0, r1, d8
 800aa94:	f7f5 feda 	bl	800084c <__aeabi_ddiv>
 800aa98:	4652      	mov	r2, sl
 800aa9a:	465b      	mov	r3, fp
 800aa9c:	f7f5 fdac 	bl	80005f8 <__aeabi_dmul>
 800aaa0:	4652      	mov	r2, sl
 800aaa2:	465b      	mov	r3, fp
 800aaa4:	f7f5 fbf2 	bl	800028c <__adddf3>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	f7f5 fbee 	bl	800028c <__adddf3>
 800aab0:	a347      	add	r3, pc, #284	; (adr r3, 800abd0 <__ieee754_asin+0x2e0>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f7f5 fbe7 	bl	8000288 <__aeabi_dsub>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	a142      	add	r1, pc, #264	; (adr r1, 800abc8 <__ieee754_asin+0x2d8>)
 800aac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bfdc      	itt	le
 800aace:	4602      	movle	r2, r0
 800aad0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800aad4:	4604      	mov	r4, r0
 800aad6:	460d      	mov	r5, r1
 800aad8:	bfdc      	itt	le
 800aada:	4614      	movle	r4, r2
 800aadc:	461d      	movle	r5, r3
 800aade:	e743      	b.n	800a968 <__ieee754_asin+0x78>
 800aae0:	ee10 2a10 	vmov	r2, s0
 800aae4:	ee10 0a10 	vmov	r0, s0
 800aae8:	462b      	mov	r3, r5
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	a33b      	add	r3, pc, #236	; (adr r3, 800abe0 <__ieee754_asin+0x2f0>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460f      	mov	r7, r1
 800aafa:	f7f5 fd7d 	bl	80005f8 <__aeabi_dmul>
 800aafe:	a33a      	add	r3, pc, #232	; (adr r3, 800abe8 <__ieee754_asin+0x2f8>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fbc2 	bl	800028c <__adddf3>
 800ab08:	4632      	mov	r2, r6
 800ab0a:	463b      	mov	r3, r7
 800ab0c:	f7f5 fd74 	bl	80005f8 <__aeabi_dmul>
 800ab10:	a337      	add	r3, pc, #220	; (adr r3, 800abf0 <__ieee754_asin+0x300>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fbb7 	bl	8000288 <__aeabi_dsub>
 800ab1a:	4632      	mov	r2, r6
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	f7f5 fd6b 	bl	80005f8 <__aeabi_dmul>
 800ab22:	a335      	add	r3, pc, #212	; (adr r3, 800abf8 <__ieee754_asin+0x308>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fbb0 	bl	800028c <__adddf3>
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	463b      	mov	r3, r7
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	a332      	add	r3, pc, #200	; (adr r3, 800ac00 <__ieee754_asin+0x310>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fba5 	bl	8000288 <__aeabi_dsub>
 800ab3e:	4632      	mov	r2, r6
 800ab40:	463b      	mov	r3, r7
 800ab42:	f7f5 fd59 	bl	80005f8 <__aeabi_dmul>
 800ab46:	a330      	add	r3, pc, #192	; (adr r3, 800ac08 <__ieee754_asin+0x318>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f7f5 fb9e 	bl	800028c <__adddf3>
 800ab50:	4632      	mov	r2, r6
 800ab52:	463b      	mov	r3, r7
 800ab54:	f7f5 fd50 	bl	80005f8 <__aeabi_dmul>
 800ab58:	a32d      	add	r3, pc, #180	; (adr r3, 800ac10 <__ieee754_asin+0x320>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	4680      	mov	r8, r0
 800ab60:	4689      	mov	r9, r1
 800ab62:	4630      	mov	r0, r6
 800ab64:	4639      	mov	r1, r7
 800ab66:	f7f5 fd47 	bl	80005f8 <__aeabi_dmul>
 800ab6a:	a32b      	add	r3, pc, #172	; (adr r3, 800ac18 <__ieee754_asin+0x328>)
 800ab6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab70:	f7f5 fb8a 	bl	8000288 <__aeabi_dsub>
 800ab74:	4632      	mov	r2, r6
 800ab76:	463b      	mov	r3, r7
 800ab78:	f7f5 fd3e 	bl	80005f8 <__aeabi_dmul>
 800ab7c:	a328      	add	r3, pc, #160	; (adr r3, 800ac20 <__ieee754_asin+0x330>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	f7f5 fb83 	bl	800028c <__adddf3>
 800ab86:	4632      	mov	r2, r6
 800ab88:	463b      	mov	r3, r7
 800ab8a:	f7f5 fd35 	bl	80005f8 <__aeabi_dmul>
 800ab8e:	a326      	add	r3, pc, #152	; (adr r3, 800ac28 <__ieee754_asin+0x338>)
 800ab90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab94:	f7f5 fb78 	bl	8000288 <__aeabi_dsub>
 800ab98:	4632      	mov	r2, r6
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	f7f5 fd2c 	bl	80005f8 <__aeabi_dmul>
 800aba0:	4b25      	ldr	r3, [pc, #148]	; (800ac38 <__ieee754_asin+0x348>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 fb72 	bl	800028c <__adddf3>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 fe4c 	bl	800084c <__aeabi_ddiv>
 800abb4:	4622      	mov	r2, r4
 800abb6:	462b      	mov	r3, r5
 800abb8:	f7f5 fd1e 	bl	80005f8 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4620      	mov	r0, r4
 800abc2:	4629      	mov	r1, r5
 800abc4:	e6bf      	b.n	800a946 <__ieee754_asin+0x56>
 800abc6:	bf00      	nop
 800abc8:	54442d18 	.word	0x54442d18
 800abcc:	3ff921fb 	.word	0x3ff921fb
 800abd0:	33145c07 	.word	0x33145c07
 800abd4:	3c91a626 	.word	0x3c91a626
 800abd8:	8800759c 	.word	0x8800759c
 800abdc:	7e37e43c 	.word	0x7e37e43c
 800abe0:	0dfdf709 	.word	0x0dfdf709
 800abe4:	3f023de1 	.word	0x3f023de1
 800abe8:	7501b288 	.word	0x7501b288
 800abec:	3f49efe0 	.word	0x3f49efe0
 800abf0:	b5688f3b 	.word	0xb5688f3b
 800abf4:	3fa48228 	.word	0x3fa48228
 800abf8:	0e884455 	.word	0x0e884455
 800abfc:	3fc9c155 	.word	0x3fc9c155
 800ac00:	03eb6f7d 	.word	0x03eb6f7d
 800ac04:	3fd4d612 	.word	0x3fd4d612
 800ac08:	55555555 	.word	0x55555555
 800ac0c:	3fc55555 	.word	0x3fc55555
 800ac10:	b12e9282 	.word	0xb12e9282
 800ac14:	3fb3b8c5 	.word	0x3fb3b8c5
 800ac18:	1b8d0159 	.word	0x1b8d0159
 800ac1c:	3fe6066c 	.word	0x3fe6066c
 800ac20:	9c598ac8 	.word	0x9c598ac8
 800ac24:	40002ae5 	.word	0x40002ae5
 800ac28:	1c8a2d4b 	.word	0x1c8a2d4b
 800ac2c:	40033a27 	.word	0x40033a27
 800ac30:	3fefffff 	.word	0x3fefffff
 800ac34:	3fdfffff 	.word	0x3fdfffff
 800ac38:	3ff00000 	.word	0x3ff00000
 800ac3c:	3fe00000 	.word	0x3fe00000
 800ac40:	3fef3332 	.word	0x3fef3332
 800ac44:	ee10 2a10 	vmov	r2, s0
 800ac48:	ee10 0a10 	vmov	r0, s0
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	4659      	mov	r1, fp
 800ac50:	f7f5 fb1c 	bl	800028c <__adddf3>
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	ec41 0b19 	vmov	d9, r0, r1
 800ac5c:	ec51 0b18 	vmov	r0, r1, d8
 800ac60:	f7f5 fdf4 	bl	800084c <__aeabi_ddiv>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	ec51 0b19 	vmov	r0, r1, d9
 800ac6c:	f7f5 fcc4 	bl	80005f8 <__aeabi_dmul>
 800ac70:	f04f 0800 	mov.w	r8, #0
 800ac74:	4606      	mov	r6, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	4642      	mov	r2, r8
 800ac7a:	465b      	mov	r3, fp
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	4659      	mov	r1, fp
 800ac80:	f7f5 fcba 	bl	80005f8 <__aeabi_dmul>
 800ac84:	4602      	mov	r2, r0
 800ac86:	460b      	mov	r3, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fafc 	bl	8000288 <__aeabi_dsub>
 800ac90:	4642      	mov	r2, r8
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	465b      	mov	r3, fp
 800ac98:	4650      	mov	r0, sl
 800ac9a:	4659      	mov	r1, fp
 800ac9c:	f7f5 faf6 	bl	800028c <__adddf3>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fdd0 	bl	800084c <__aeabi_ddiv>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	f7f5 faec 	bl	800028c <__adddf3>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	a113      	add	r1, pc, #76	; (adr r1, 800ad08 <__ieee754_asin+0x418>)
 800acba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acbe:	f7f5 fae3 	bl	8000288 <__aeabi_dsub>
 800acc2:	4602      	mov	r2, r0
 800acc4:	460b      	mov	r3, r1
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fadd 	bl	8000288 <__aeabi_dsub>
 800acce:	4642      	mov	r2, r8
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	465b      	mov	r3, fp
 800acd6:	4640      	mov	r0, r8
 800acd8:	4659      	mov	r1, fp
 800acda:	f7f5 fad7 	bl	800028c <__adddf3>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	a10b      	add	r1, pc, #44	; (adr r1, 800ad10 <__ieee754_asin+0x420>)
 800ace4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace8:	f7f5 face 	bl	8000288 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f7f5 fac8 	bl	8000288 <__aeabi_dsub>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	a104      	add	r1, pc, #16	; (adr r1, 800ad10 <__ieee754_asin+0x420>)
 800acfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad02:	e6df      	b.n	800aac4 <__ieee754_asin+0x1d4>
 800ad04:	f3af 8000 	nop.w
 800ad08:	33145c07 	.word	0x33145c07
 800ad0c:	3c91a626 	.word	0x3c91a626
 800ad10:	54442d18 	.word	0x54442d18
 800ad14:	3fe921fb 	.word	0x3fe921fb

0800ad18 <__ieee754_rem_pio2>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	ed2d 8b02 	vpush	{d8}
 800ad20:	ec55 4b10 	vmov	r4, r5, d0
 800ad24:	4bca      	ldr	r3, [pc, #808]	; (800b050 <__ieee754_rem_pio2+0x338>)
 800ad26:	b08b      	sub	sp, #44	; 0x2c
 800ad28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ad2c:	4598      	cmp	r8, r3
 800ad2e:	4682      	mov	sl, r0
 800ad30:	9502      	str	r5, [sp, #8]
 800ad32:	dc08      	bgt.n	800ad46 <__ieee754_rem_pio2+0x2e>
 800ad34:	2200      	movs	r2, #0
 800ad36:	2300      	movs	r3, #0
 800ad38:	ed80 0b00 	vstr	d0, [r0]
 800ad3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ad40:	f04f 0b00 	mov.w	fp, #0
 800ad44:	e028      	b.n	800ad98 <__ieee754_rem_pio2+0x80>
 800ad46:	4bc3      	ldr	r3, [pc, #780]	; (800b054 <__ieee754_rem_pio2+0x33c>)
 800ad48:	4598      	cmp	r8, r3
 800ad4a:	dc78      	bgt.n	800ae3e <__ieee754_rem_pio2+0x126>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	4ec2      	ldr	r6, [pc, #776]	; (800b058 <__ieee754_rem_pio2+0x340>)
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	ee10 0a10 	vmov	r0, s0
 800ad56:	a3b0      	add	r3, pc, #704	; (adr r3, 800b018 <__ieee754_rem_pio2+0x300>)
 800ad58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	dd39      	ble.n	800add4 <__ieee754_rem_pio2+0xbc>
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	45b0      	cmp	r8, r6
 800ad66:	4604      	mov	r4, r0
 800ad68:	460d      	mov	r5, r1
 800ad6a:	d01b      	beq.n	800ada4 <__ieee754_rem_pio2+0x8c>
 800ad6c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b020 <__ieee754_rem_pio2+0x308>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f7f5 fa89 	bl	8000288 <__aeabi_dsub>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9ca 2300 	strd	r2, r3, [sl]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fa81 	bl	8000288 <__aeabi_dsub>
 800ad86:	a3a6      	add	r3, pc, #664	; (adr r3, 800b020 <__ieee754_rem_pio2+0x308>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 fa7c 	bl	8000288 <__aeabi_dsub>
 800ad90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad94:	f04f 0b01 	mov.w	fp, #1
 800ad98:	4658      	mov	r0, fp
 800ad9a:	b00b      	add	sp, #44	; 0x2c
 800ad9c:	ecbd 8b02 	vpop	{d8}
 800ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b028 <__ieee754_rem_pio2+0x310>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa6d 	bl	8000288 <__aeabi_dsub>
 800adae:	a3a0      	add	r3, pc, #640	; (adr r3, 800b030 <__ieee754_rem_pio2+0x318>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	4604      	mov	r4, r0
 800adb6:	460d      	mov	r5, r1
 800adb8:	f7f5 fa66 	bl	8000288 <__aeabi_dsub>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	e9ca 2300 	strd	r2, r3, [sl]
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f7f5 fa5e 	bl	8000288 <__aeabi_dsub>
 800adcc:	a398      	add	r3, pc, #608	; (adr r3, 800b030 <__ieee754_rem_pio2+0x318>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	e7db      	b.n	800ad8c <__ieee754_rem_pio2+0x74>
 800add4:	f7f5 fa5a 	bl	800028c <__adddf3>
 800add8:	45b0      	cmp	r8, r6
 800adda:	4604      	mov	r4, r0
 800addc:	460d      	mov	r5, r1
 800adde:	d016      	beq.n	800ae0e <__ieee754_rem_pio2+0xf6>
 800ade0:	a38f      	add	r3, pc, #572	; (adr r3, 800b020 <__ieee754_rem_pio2+0x308>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7f5 fa51 	bl	800028c <__adddf3>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	e9ca 2300 	strd	r2, r3, [sl]
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7f5 fa47 	bl	8000288 <__aeabi_dsub>
 800adfa:	a389      	add	r3, pc, #548	; (adr r3, 800b020 <__ieee754_rem_pio2+0x308>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fa44 	bl	800028c <__adddf3>
 800ae04:	f04f 3bff 	mov.w	fp, #4294967295
 800ae08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae0c:	e7c4      	b.n	800ad98 <__ieee754_rem_pio2+0x80>
 800ae0e:	a386      	add	r3, pc, #536	; (adr r3, 800b028 <__ieee754_rem_pio2+0x310>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f7f5 fa3a 	bl	800028c <__adddf3>
 800ae18:	a385      	add	r3, pc, #532	; (adr r3, 800b030 <__ieee754_rem_pio2+0x318>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	4604      	mov	r4, r0
 800ae20:	460d      	mov	r5, r1
 800ae22:	f7f5 fa33 	bl	800028c <__adddf3>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	e9ca 2300 	strd	r2, r3, [sl]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 fa29 	bl	8000288 <__aeabi_dsub>
 800ae36:	a37e      	add	r3, pc, #504	; (adr r3, 800b030 <__ieee754_rem_pio2+0x318>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	e7e0      	b.n	800ae00 <__ieee754_rem_pio2+0xe8>
 800ae3e:	4b87      	ldr	r3, [pc, #540]	; (800b05c <__ieee754_rem_pio2+0x344>)
 800ae40:	4598      	cmp	r8, r3
 800ae42:	f300 80d9 	bgt.w	800aff8 <__ieee754_rem_pio2+0x2e0>
 800ae46:	f001 fb5b 	bl	800c500 <fabs>
 800ae4a:	ec55 4b10 	vmov	r4, r5, d0
 800ae4e:	ee10 0a10 	vmov	r0, s0
 800ae52:	a379      	add	r3, pc, #484	; (adr r3, 800b038 <__ieee754_rem_pio2+0x320>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ae5e:	4b80      	ldr	r3, [pc, #512]	; (800b060 <__ieee754_rem_pio2+0x348>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	f7f5 fa13 	bl	800028c <__adddf3>
 800ae66:	f7f5 fe77 	bl	8000b58 <__aeabi_d2iz>
 800ae6a:	4683      	mov	fp, r0
 800ae6c:	f7f5 fb5a 	bl	8000524 <__aeabi_i2d>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	ec43 2b18 	vmov	d8, r2, r3
 800ae78:	a367      	add	r3, pc, #412	; (adr r3, 800b018 <__ieee754_rem_pio2+0x300>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4620      	mov	r0, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7f5 f9fd 	bl	8000288 <__aeabi_dsub>
 800ae8e:	a364      	add	r3, pc, #400	; (adr r3, 800b020 <__ieee754_rem_pio2+0x308>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	ec51 0b18 	vmov	r0, r1, d8
 800ae9c:	f7f5 fbac 	bl	80005f8 <__aeabi_dmul>
 800aea0:	f1bb 0f1f 	cmp.w	fp, #31
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	dc0d      	bgt.n	800aec6 <__ieee754_rem_pio2+0x1ae>
 800aeaa:	4b6e      	ldr	r3, [pc, #440]	; (800b064 <__ieee754_rem_pio2+0x34c>)
 800aeac:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	4543      	cmp	r3, r8
 800aeb6:	d006      	beq.n	800aec6 <__ieee754_rem_pio2+0x1ae>
 800aeb8:	4622      	mov	r2, r4
 800aeba:	462b      	mov	r3, r5
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 f9e2 	bl	8000288 <__aeabi_dsub>
 800aec4:	e00f      	b.n	800aee6 <__ieee754_rem_pio2+0x1ce>
 800aec6:	462b      	mov	r3, r5
 800aec8:	4622      	mov	r2, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 f9db 	bl	8000288 <__aeabi_dsub>
 800aed2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aedc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aee0:	f1b8 0f10 	cmp.w	r8, #16
 800aee4:	dc02      	bgt.n	800aeec <__ieee754_rem_pio2+0x1d4>
 800aee6:	e9ca 0100 	strd	r0, r1, [sl]
 800aeea:	e039      	b.n	800af60 <__ieee754_rem_pio2+0x248>
 800aeec:	a34e      	add	r3, pc, #312	; (adr r3, 800b028 <__ieee754_rem_pio2+0x310>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	ec51 0b18 	vmov	r0, r1, d8
 800aef6:	f7f5 fb7f 	bl	80005f8 <__aeabi_dmul>
 800aefa:	4604      	mov	r4, r0
 800aefc:	460d      	mov	r5, r1
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 f9bf 	bl	8000288 <__aeabi_dsub>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4680      	mov	r8, r0
 800af10:	4689      	mov	r9, r1
 800af12:	4630      	mov	r0, r6
 800af14:	4639      	mov	r1, r7
 800af16:	f7f5 f9b7 	bl	8000288 <__aeabi_dsub>
 800af1a:	4622      	mov	r2, r4
 800af1c:	462b      	mov	r3, r5
 800af1e:	f7f5 f9b3 	bl	8000288 <__aeabi_dsub>
 800af22:	a343      	add	r3, pc, #268	; (adr r3, 800b030 <__ieee754_rem_pio2+0x318>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	ec51 0b18 	vmov	r0, r1, d8
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	4622      	mov	r2, r4
 800af36:	462b      	mov	r3, r5
 800af38:	f7f5 f9a6 	bl	8000288 <__aeabi_dsub>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	4640      	mov	r0, r8
 800af46:	4649      	mov	r1, r9
 800af48:	f7f5 f99e 	bl	8000288 <__aeabi_dsub>
 800af4c:	9a03      	ldr	r2, [sp, #12]
 800af4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	2b31      	cmp	r3, #49	; 0x31
 800af56:	dc24      	bgt.n	800afa2 <__ieee754_rem_pio2+0x28a>
 800af58:	e9ca 0100 	strd	r0, r1, [sl]
 800af5c:	4646      	mov	r6, r8
 800af5e:	464f      	mov	r7, r9
 800af60:	e9da 8900 	ldrd	r8, r9, [sl]
 800af64:	4630      	mov	r0, r6
 800af66:	4642      	mov	r2, r8
 800af68:	464b      	mov	r3, r9
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 f98c 	bl	8000288 <__aeabi_dsub>
 800af70:	462b      	mov	r3, r5
 800af72:	4622      	mov	r2, r4
 800af74:	f7f5 f988 	bl	8000288 <__aeabi_dsub>
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af80:	f6bf af0a 	bge.w	800ad98 <__ieee754_rem_pio2+0x80>
 800af84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af88:	f8ca 3004 	str.w	r3, [sl, #4]
 800af8c:	f8ca 8000 	str.w	r8, [sl]
 800af90:	f8ca 0008 	str.w	r0, [sl, #8]
 800af94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af98:	f8ca 300c 	str.w	r3, [sl, #12]
 800af9c:	f1cb 0b00 	rsb	fp, fp, #0
 800afa0:	e6fa      	b.n	800ad98 <__ieee754_rem_pio2+0x80>
 800afa2:	a327      	add	r3, pc, #156	; (adr r3, 800b040 <__ieee754_rem_pio2+0x328>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	ec51 0b18 	vmov	r0, r1, d8
 800afac:	f7f5 fb24 	bl	80005f8 <__aeabi_dmul>
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 f964 	bl	8000288 <__aeabi_dsub>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4606      	mov	r6, r0
 800afc6:	460f      	mov	r7, r1
 800afc8:	4640      	mov	r0, r8
 800afca:	4649      	mov	r1, r9
 800afcc:	f7f5 f95c 	bl	8000288 <__aeabi_dsub>
 800afd0:	4622      	mov	r2, r4
 800afd2:	462b      	mov	r3, r5
 800afd4:	f7f5 f958 	bl	8000288 <__aeabi_dsub>
 800afd8:	a31b      	add	r3, pc, #108	; (adr r3, 800b048 <__ieee754_rem_pio2+0x330>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	4604      	mov	r4, r0
 800afe0:	460d      	mov	r5, r1
 800afe2:	ec51 0b18 	vmov	r0, r1, d8
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 f94b 	bl	8000288 <__aeabi_dsub>
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	e75f      	b.n	800aeb8 <__ieee754_rem_pio2+0x1a0>
 800aff8:	4b1b      	ldr	r3, [pc, #108]	; (800b068 <__ieee754_rem_pio2+0x350>)
 800affa:	4598      	cmp	r8, r3
 800affc:	dd36      	ble.n	800b06c <__ieee754_rem_pio2+0x354>
 800affe:	ee10 2a10 	vmov	r2, s0
 800b002:	462b      	mov	r3, r5
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 f93e 	bl	8000288 <__aeabi_dsub>
 800b00c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b010:	e9ca 0100 	strd	r0, r1, [sl]
 800b014:	e694      	b.n	800ad40 <__ieee754_rem_pio2+0x28>
 800b016:	bf00      	nop
 800b018:	54400000 	.word	0x54400000
 800b01c:	3ff921fb 	.word	0x3ff921fb
 800b020:	1a626331 	.word	0x1a626331
 800b024:	3dd0b461 	.word	0x3dd0b461
 800b028:	1a600000 	.word	0x1a600000
 800b02c:	3dd0b461 	.word	0x3dd0b461
 800b030:	2e037073 	.word	0x2e037073
 800b034:	3ba3198a 	.word	0x3ba3198a
 800b038:	6dc9c883 	.word	0x6dc9c883
 800b03c:	3fe45f30 	.word	0x3fe45f30
 800b040:	2e000000 	.word	0x2e000000
 800b044:	3ba3198a 	.word	0x3ba3198a
 800b048:	252049c1 	.word	0x252049c1
 800b04c:	397b839a 	.word	0x397b839a
 800b050:	3fe921fb 	.word	0x3fe921fb
 800b054:	4002d97b 	.word	0x4002d97b
 800b058:	3ff921fb 	.word	0x3ff921fb
 800b05c:	413921fb 	.word	0x413921fb
 800b060:	3fe00000 	.word	0x3fe00000
 800b064:	0800f340 	.word	0x0800f340
 800b068:	7fefffff 	.word	0x7fefffff
 800b06c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b070:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b074:	ee10 0a10 	vmov	r0, s0
 800b078:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b07c:	ee10 6a10 	vmov	r6, s0
 800b080:	460f      	mov	r7, r1
 800b082:	f7f5 fd69 	bl	8000b58 <__aeabi_d2iz>
 800b086:	f7f5 fa4d 	bl	8000524 <__aeabi_i2d>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b096:	f7f5 f8f7 	bl	8000288 <__aeabi_dsub>
 800b09a:	4b22      	ldr	r3, [pc, #136]	; (800b124 <__ieee754_rem_pio2+0x40c>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	f7f5 fd57 	bl	8000b58 <__aeabi_d2iz>
 800b0aa:	f7f5 fa3b 	bl	8000524 <__aeabi_i2d>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0ba:	f7f5 f8e5 	bl	8000288 <__aeabi_dsub>
 800b0be:	4b19      	ldr	r3, [pc, #100]	; (800b124 <__ieee754_rem_pio2+0x40c>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f7f5 fa99 	bl	80005f8 <__aeabi_dmul>
 800b0c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b0ca:	ad04      	add	r5, sp, #16
 800b0cc:	f04f 0803 	mov.w	r8, #3
 800b0d0:	46a9      	mov	r9, r5
 800b0d2:	2600      	movs	r6, #0
 800b0d4:	2700      	movs	r7, #0
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	463b      	mov	r3, r7
 800b0da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b0de:	46c3      	mov	fp, r8
 800b0e0:	3d08      	subs	r5, #8
 800b0e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0e6:	f7f5 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d1f3      	bne.n	800b0d6 <__ieee754_rem_pio2+0x3be>
 800b0ee:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <__ieee754_rem_pio2+0x410>)
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	465b      	mov	r3, fp
 800b0fa:	4651      	mov	r1, sl
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	f000 facf 	bl	800b6a0 <__kernel_rem_pio2>
 800b102:	9b02      	ldr	r3, [sp, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	4683      	mov	fp, r0
 800b108:	f6bf ae46 	bge.w	800ad98 <__ieee754_rem_pio2+0x80>
 800b10c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b110:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b114:	f8ca 3004 	str.w	r3, [sl, #4]
 800b118:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b11c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b120:	e73a      	b.n	800af98 <__ieee754_rem_pio2+0x280>
 800b122:	bf00      	nop
 800b124:	41700000 	.word	0x41700000
 800b128:	0800f3c0 	.word	0x0800f3c0

0800b12c <__ieee754_sqrt>:
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	ec55 4b10 	vmov	r4, r5, d0
 800b134:	4e56      	ldr	r6, [pc, #344]	; (800b290 <__ieee754_sqrt+0x164>)
 800b136:	43ae      	bics	r6, r5
 800b138:	ee10 0a10 	vmov	r0, s0
 800b13c:	ee10 3a10 	vmov	r3, s0
 800b140:	4629      	mov	r1, r5
 800b142:	462a      	mov	r2, r5
 800b144:	d110      	bne.n	800b168 <__ieee754_sqrt+0x3c>
 800b146:	ee10 2a10 	vmov	r2, s0
 800b14a:	462b      	mov	r3, r5
 800b14c:	f7f5 fa54 	bl	80005f8 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 f898 	bl	800028c <__adddf3>
 800b15c:	4604      	mov	r4, r0
 800b15e:	460d      	mov	r5, r1
 800b160:	ec45 4b10 	vmov	d0, r4, r5
 800b164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b168:	2d00      	cmp	r5, #0
 800b16a:	dc10      	bgt.n	800b18e <__ieee754_sqrt+0x62>
 800b16c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b170:	4330      	orrs	r0, r6
 800b172:	d0f5      	beq.n	800b160 <__ieee754_sqrt+0x34>
 800b174:	b15d      	cbz	r5, 800b18e <__ieee754_sqrt+0x62>
 800b176:	ee10 2a10 	vmov	r2, s0
 800b17a:	462b      	mov	r3, r5
 800b17c:	ee10 0a10 	vmov	r0, s0
 800b180:	f7f5 f882 	bl	8000288 <__aeabi_dsub>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	f7f5 fb60 	bl	800084c <__aeabi_ddiv>
 800b18c:	e7e6      	b.n	800b15c <__ieee754_sqrt+0x30>
 800b18e:	1509      	asrs	r1, r1, #20
 800b190:	d076      	beq.n	800b280 <__ieee754_sqrt+0x154>
 800b192:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b196:	07ce      	lsls	r6, r1, #31
 800b198:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b19c:	bf5e      	ittt	pl
 800b19e:	0fda      	lsrpl	r2, r3, #31
 800b1a0:	005b      	lslpl	r3, r3, #1
 800b1a2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b1a6:	0fda      	lsrs	r2, r3, #31
 800b1a8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b1ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	106d      	asrs	r5, r5, #1
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	f04f 0e16 	mov.w	lr, #22
 800b1ba:	4684      	mov	ip, r0
 800b1bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1c0:	eb0c 0401 	add.w	r4, ip, r1
 800b1c4:	4294      	cmp	r4, r2
 800b1c6:	bfde      	ittt	le
 800b1c8:	1b12      	suble	r2, r2, r4
 800b1ca:	eb04 0c01 	addle.w	ip, r4, r1
 800b1ce:	1840      	addle	r0, r0, r1
 800b1d0:	0052      	lsls	r2, r2, #1
 800b1d2:	f1be 0e01 	subs.w	lr, lr, #1
 800b1d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b1da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b1de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1e2:	d1ed      	bne.n	800b1c0 <__ieee754_sqrt+0x94>
 800b1e4:	4671      	mov	r1, lr
 800b1e6:	2720      	movs	r7, #32
 800b1e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b1ec:	4562      	cmp	r2, ip
 800b1ee:	eb04 060e 	add.w	r6, r4, lr
 800b1f2:	dc02      	bgt.n	800b1fa <__ieee754_sqrt+0xce>
 800b1f4:	d113      	bne.n	800b21e <__ieee754_sqrt+0xf2>
 800b1f6:	429e      	cmp	r6, r3
 800b1f8:	d811      	bhi.n	800b21e <__ieee754_sqrt+0xf2>
 800b1fa:	2e00      	cmp	r6, #0
 800b1fc:	eb06 0e04 	add.w	lr, r6, r4
 800b200:	da43      	bge.n	800b28a <__ieee754_sqrt+0x15e>
 800b202:	f1be 0f00 	cmp.w	lr, #0
 800b206:	db40      	blt.n	800b28a <__ieee754_sqrt+0x15e>
 800b208:	f10c 0801 	add.w	r8, ip, #1
 800b20c:	eba2 020c 	sub.w	r2, r2, ip
 800b210:	429e      	cmp	r6, r3
 800b212:	bf88      	it	hi
 800b214:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b218:	1b9b      	subs	r3, r3, r6
 800b21a:	4421      	add	r1, r4
 800b21c:	46c4      	mov	ip, r8
 800b21e:	0052      	lsls	r2, r2, #1
 800b220:	3f01      	subs	r7, #1
 800b222:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b226:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b22a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b22e:	d1dd      	bne.n	800b1ec <__ieee754_sqrt+0xc0>
 800b230:	4313      	orrs	r3, r2
 800b232:	d006      	beq.n	800b242 <__ieee754_sqrt+0x116>
 800b234:	1c4c      	adds	r4, r1, #1
 800b236:	bf13      	iteet	ne
 800b238:	3101      	addne	r1, #1
 800b23a:	3001      	addeq	r0, #1
 800b23c:	4639      	moveq	r1, r7
 800b23e:	f021 0101 	bicne.w	r1, r1, #1
 800b242:	1043      	asrs	r3, r0, #1
 800b244:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b248:	0849      	lsrs	r1, r1, #1
 800b24a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b24e:	07c2      	lsls	r2, r0, #31
 800b250:	bf48      	it	mi
 800b252:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b256:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b25a:	460c      	mov	r4, r1
 800b25c:	463d      	mov	r5, r7
 800b25e:	e77f      	b.n	800b160 <__ieee754_sqrt+0x34>
 800b260:	0ada      	lsrs	r2, r3, #11
 800b262:	3815      	subs	r0, #21
 800b264:	055b      	lsls	r3, r3, #21
 800b266:	2a00      	cmp	r2, #0
 800b268:	d0fa      	beq.n	800b260 <__ieee754_sqrt+0x134>
 800b26a:	02d7      	lsls	r7, r2, #11
 800b26c:	d50a      	bpl.n	800b284 <__ieee754_sqrt+0x158>
 800b26e:	f1c1 0420 	rsb	r4, r1, #32
 800b272:	fa23 f404 	lsr.w	r4, r3, r4
 800b276:	1e4d      	subs	r5, r1, #1
 800b278:	408b      	lsls	r3, r1
 800b27a:	4322      	orrs	r2, r4
 800b27c:	1b41      	subs	r1, r0, r5
 800b27e:	e788      	b.n	800b192 <__ieee754_sqrt+0x66>
 800b280:	4608      	mov	r0, r1
 800b282:	e7f0      	b.n	800b266 <__ieee754_sqrt+0x13a>
 800b284:	0052      	lsls	r2, r2, #1
 800b286:	3101      	adds	r1, #1
 800b288:	e7ef      	b.n	800b26a <__ieee754_sqrt+0x13e>
 800b28a:	46e0      	mov	r8, ip
 800b28c:	e7be      	b.n	800b20c <__ieee754_sqrt+0xe0>
 800b28e:	bf00      	nop
 800b290:	7ff00000 	.word	0x7ff00000

0800b294 <__ieee754_rem_pio2f>:
 800b294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b296:	ee10 6a10 	vmov	r6, s0
 800b29a:	4b8e      	ldr	r3, [pc, #568]	; (800b4d4 <__ieee754_rem_pio2f+0x240>)
 800b29c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b2a0:	429d      	cmp	r5, r3
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	eef0 7a40 	vmov.f32	s15, s0
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	dc05      	bgt.n	800b2b8 <__ieee754_rem_pio2f+0x24>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	ed80 0a00 	vstr	s0, [r0]
 800b2b2:	6043      	str	r3, [r0, #4]
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e01a      	b.n	800b2ee <__ieee754_rem_pio2f+0x5a>
 800b2b8:	4b87      	ldr	r3, [pc, #540]	; (800b4d8 <__ieee754_rem_pio2f+0x244>)
 800b2ba:	429d      	cmp	r5, r3
 800b2bc:	dc46      	bgt.n	800b34c <__ieee754_rem_pio2f+0xb8>
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b4dc <__ieee754_rem_pio2f+0x248>
 800b2c4:	4b86      	ldr	r3, [pc, #536]	; (800b4e0 <__ieee754_rem_pio2f+0x24c>)
 800b2c6:	f025 050f 	bic.w	r5, r5, #15
 800b2ca:	dd1f      	ble.n	800b30c <__ieee754_rem_pio2f+0x78>
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b2d2:	d00e      	beq.n	800b2f2 <__ieee754_rem_pio2f+0x5e>
 800b2d4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b4e4 <__ieee754_rem_pio2f+0x250>
 800b2d8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b2dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b2e0:	ed80 0a00 	vstr	s0, [r0]
 800b2e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	edc4 7a01 	vstr	s15, [r4, #4]
 800b2ee:	b007      	add	sp, #28
 800b2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b4e8 <__ieee754_rem_pio2f+0x254>
 800b2f6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b4ec <__ieee754_rem_pio2f+0x258>
 800b2fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b2fe:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b302:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b306:	edc0 6a00 	vstr	s13, [r0]
 800b30a:	e7eb      	b.n	800b2e4 <__ieee754_rem_pio2f+0x50>
 800b30c:	429d      	cmp	r5, r3
 800b30e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b312:	d00e      	beq.n	800b332 <__ieee754_rem_pio2f+0x9e>
 800b314:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b4e4 <__ieee754_rem_pio2f+0x250>
 800b318:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b31c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b320:	ed80 0a00 	vstr	s0, [r0]
 800b324:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	edc4 7a01 	vstr	s15, [r4, #4]
 800b330:	e7dd      	b.n	800b2ee <__ieee754_rem_pio2f+0x5a>
 800b332:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b4e8 <__ieee754_rem_pio2f+0x254>
 800b336:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b4ec <__ieee754_rem_pio2f+0x258>
 800b33a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b33e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b346:	edc0 6a00 	vstr	s13, [r0]
 800b34a:	e7eb      	b.n	800b324 <__ieee754_rem_pio2f+0x90>
 800b34c:	4b68      	ldr	r3, [pc, #416]	; (800b4f0 <__ieee754_rem_pio2f+0x25c>)
 800b34e:	429d      	cmp	r5, r3
 800b350:	dc72      	bgt.n	800b438 <__ieee754_rem_pio2f+0x1a4>
 800b352:	f001 f9ef 	bl	800c734 <fabsf>
 800b356:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b4f4 <__ieee754_rem_pio2f+0x260>
 800b35a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b35e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b36a:	ee17 0a90 	vmov	r0, s15
 800b36e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b4dc <__ieee754_rem_pio2f+0x248>
 800b372:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b376:	281f      	cmp	r0, #31
 800b378:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b4e4 <__ieee754_rem_pio2f+0x250>
 800b37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b380:	eeb1 6a47 	vneg.f32	s12, s14
 800b384:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b388:	ee16 2a90 	vmov	r2, s13
 800b38c:	dc1c      	bgt.n	800b3c8 <__ieee754_rem_pio2f+0x134>
 800b38e:	495a      	ldr	r1, [pc, #360]	; (800b4f8 <__ieee754_rem_pio2f+0x264>)
 800b390:	1e47      	subs	r7, r0, #1
 800b392:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b396:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b39a:	428b      	cmp	r3, r1
 800b39c:	d014      	beq.n	800b3c8 <__ieee754_rem_pio2f+0x134>
 800b39e:	6022      	str	r2, [r4, #0]
 800b3a0:	ed94 7a00 	vldr	s14, [r4]
 800b3a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b3a8:	2e00      	cmp	r6, #0
 800b3aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3ae:	ed84 0a01 	vstr	s0, [r4, #4]
 800b3b2:	da9c      	bge.n	800b2ee <__ieee754_rem_pio2f+0x5a>
 800b3b4:	eeb1 7a47 	vneg.f32	s14, s14
 800b3b8:	eeb1 0a40 	vneg.f32	s0, s0
 800b3bc:	ed84 7a00 	vstr	s14, [r4]
 800b3c0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b3c4:	4240      	negs	r0, r0
 800b3c6:	e792      	b.n	800b2ee <__ieee754_rem_pio2f+0x5a>
 800b3c8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b3cc:	15eb      	asrs	r3, r5, #23
 800b3ce:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b3d2:	2d08      	cmp	r5, #8
 800b3d4:	dde3      	ble.n	800b39e <__ieee754_rem_pio2f+0x10a>
 800b3d6:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b4e8 <__ieee754_rem_pio2f+0x254>
 800b3da:	eef0 6a40 	vmov.f32	s13, s0
 800b3de:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b3e6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b3ea:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b4ec <__ieee754_rem_pio2f+0x258>
 800b3ee:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800b3f2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b3f6:	eef0 7a40 	vmov.f32	s15, s0
 800b3fa:	ee15 2a90 	vmov	r2, s11
 800b3fe:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b402:	1a5b      	subs	r3, r3, r1
 800b404:	2b19      	cmp	r3, #25
 800b406:	dc04      	bgt.n	800b412 <__ieee754_rem_pio2f+0x17e>
 800b408:	edc4 5a00 	vstr	s11, [r4]
 800b40c:	eeb0 0a66 	vmov.f32	s0, s13
 800b410:	e7c6      	b.n	800b3a0 <__ieee754_rem_pio2f+0x10c>
 800b412:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b4fc <__ieee754_rem_pio2f+0x268>
 800b416:	eeb0 0a66 	vmov.f32	s0, s13
 800b41a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b41e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b422:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b500 <__ieee754_rem_pio2f+0x26c>
 800b426:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b42a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b42e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b432:	ed84 7a00 	vstr	s14, [r4]
 800b436:	e7b3      	b.n	800b3a0 <__ieee754_rem_pio2f+0x10c>
 800b438:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b43c:	db06      	blt.n	800b44c <__ieee754_rem_pio2f+0x1b8>
 800b43e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b442:	edc0 7a01 	vstr	s15, [r0, #4]
 800b446:	edc0 7a00 	vstr	s15, [r0]
 800b44a:	e733      	b.n	800b2b4 <__ieee754_rem_pio2f+0x20>
 800b44c:	15ea      	asrs	r2, r5, #23
 800b44e:	3a86      	subs	r2, #134	; 0x86
 800b450:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b45c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b504 <__ieee754_rem_pio2f+0x270>
 800b460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b468:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b46c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b470:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b47c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b480:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b484:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48c:	edcd 7a05 	vstr	s15, [sp, #20]
 800b490:	d11e      	bne.n	800b4d0 <__ieee754_rem_pio2f+0x23c>
 800b492:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b49a:	bf14      	ite	ne
 800b49c:	2302      	movne	r3, #2
 800b49e:	2301      	moveq	r3, #1
 800b4a0:	4919      	ldr	r1, [pc, #100]	; (800b508 <__ieee754_rem_pio2f+0x274>)
 800b4a2:	9101      	str	r1, [sp, #4]
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	9100      	str	r1, [sp, #0]
 800b4a8:	a803      	add	r0, sp, #12
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	f000 fd56 	bl	800bf5c <__kernel_rem_pio2f>
 800b4b0:	2e00      	cmp	r6, #0
 800b4b2:	f6bf af1c 	bge.w	800b2ee <__ieee754_rem_pio2f+0x5a>
 800b4b6:	edd4 7a00 	vldr	s15, [r4]
 800b4ba:	eef1 7a67 	vneg.f32	s15, s15
 800b4be:	edc4 7a00 	vstr	s15, [r4]
 800b4c2:	edd4 7a01 	vldr	s15, [r4, #4]
 800b4c6:	eef1 7a67 	vneg.f32	s15, s15
 800b4ca:	edc4 7a01 	vstr	s15, [r4, #4]
 800b4ce:	e779      	b.n	800b3c4 <__ieee754_rem_pio2f+0x130>
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e7e5      	b.n	800b4a0 <__ieee754_rem_pio2f+0x20c>
 800b4d4:	3f490fd8 	.word	0x3f490fd8
 800b4d8:	4016cbe3 	.word	0x4016cbe3
 800b4dc:	3fc90f80 	.word	0x3fc90f80
 800b4e0:	3fc90fd0 	.word	0x3fc90fd0
 800b4e4:	37354443 	.word	0x37354443
 800b4e8:	37354400 	.word	0x37354400
 800b4ec:	2e85a308 	.word	0x2e85a308
 800b4f0:	43490f80 	.word	0x43490f80
 800b4f4:	3f22f984 	.word	0x3f22f984
 800b4f8:	0800f4c8 	.word	0x0800f4c8
 800b4fc:	2e85a300 	.word	0x2e85a300
 800b500:	248d3132 	.word	0x248d3132
 800b504:	43800000 	.word	0x43800000
 800b508:	0800f548 	.word	0x0800f548
 800b50c:	00000000 	.word	0x00000000

0800b510 <__kernel_cos>:
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	ec57 6b10 	vmov	r6, r7, d0
 800b518:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b51c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b520:	ed8d 1b00 	vstr	d1, [sp]
 800b524:	da07      	bge.n	800b536 <__kernel_cos+0x26>
 800b526:	ee10 0a10 	vmov	r0, s0
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f5 fb14 	bl	8000b58 <__aeabi_d2iz>
 800b530:	2800      	cmp	r0, #0
 800b532:	f000 8088 	beq.w	800b646 <__kernel_cos+0x136>
 800b536:	4632      	mov	r2, r6
 800b538:	463b      	mov	r3, r7
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	4b51      	ldr	r3, [pc, #324]	; (800b688 <__kernel_cos+0x178>)
 800b544:	2200      	movs	r2, #0
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	f7f5 f855 	bl	80005f8 <__aeabi_dmul>
 800b54e:	a340      	add	r3, pc, #256	; (adr r3, 800b650 <__kernel_cos+0x140>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	4682      	mov	sl, r0
 800b556:	468b      	mov	fp, r1
 800b558:	4620      	mov	r0, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	a33d      	add	r3, pc, #244	; (adr r3, 800b658 <__kernel_cos+0x148>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7f4 fe91 	bl	800028c <__adddf3>
 800b56a:	4622      	mov	r2, r4
 800b56c:	462b      	mov	r3, r5
 800b56e:	f7f5 f843 	bl	80005f8 <__aeabi_dmul>
 800b572:	a33b      	add	r3, pc, #236	; (adr r3, 800b660 <__kernel_cos+0x150>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f4 fe86 	bl	8000288 <__aeabi_dsub>
 800b57c:	4622      	mov	r2, r4
 800b57e:	462b      	mov	r3, r5
 800b580:	f7f5 f83a 	bl	80005f8 <__aeabi_dmul>
 800b584:	a338      	add	r3, pc, #224	; (adr r3, 800b668 <__kernel_cos+0x158>)
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f7f4 fe7f 	bl	800028c <__adddf3>
 800b58e:	4622      	mov	r2, r4
 800b590:	462b      	mov	r3, r5
 800b592:	f7f5 f831 	bl	80005f8 <__aeabi_dmul>
 800b596:	a336      	add	r3, pc, #216	; (adr r3, 800b670 <__kernel_cos+0x160>)
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	462b      	mov	r3, r5
 800b5a4:	f7f5 f828 	bl	80005f8 <__aeabi_dmul>
 800b5a8:	a333      	add	r3, pc, #204	; (adr r3, 800b678 <__kernel_cos+0x168>)
 800b5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ae:	f7f4 fe6d 	bl	800028c <__adddf3>
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	462b      	mov	r3, r5
 800b5b6:	f7f5 f81f 	bl	80005f8 <__aeabi_dmul>
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	462b      	mov	r3, r5
 800b5be:	f7f5 f81b 	bl	80005f8 <__aeabi_dmul>
 800b5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f5 f813 	bl	80005f8 <__aeabi_dmul>
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7f4 fe55 	bl	8000288 <__aeabi_dsub>
 800b5de:	4b2b      	ldr	r3, [pc, #172]	; (800b68c <__kernel_cos+0x17c>)
 800b5e0:	4598      	cmp	r8, r3
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	dc10      	bgt.n	800b60a <__kernel_cos+0xfa>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4650      	mov	r0, sl
 800b5ee:	4659      	mov	r1, fp
 800b5f0:	f7f4 fe4a 	bl	8000288 <__aeabi_dsub>
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4926      	ldr	r1, [pc, #152]	; (800b690 <__kernel_cos+0x180>)
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	f7f4 fe44 	bl	8000288 <__aeabi_dsub>
 800b600:	ec41 0b10 	vmov	d0, r0, r1
 800b604:	b003      	add	sp, #12
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60a:	4b22      	ldr	r3, [pc, #136]	; (800b694 <__kernel_cos+0x184>)
 800b60c:	4920      	ldr	r1, [pc, #128]	; (800b690 <__kernel_cos+0x180>)
 800b60e:	4598      	cmp	r8, r3
 800b610:	bfcc      	ite	gt
 800b612:	4d21      	ldrgt	r5, [pc, #132]	; (800b698 <__kernel_cos+0x188>)
 800b614:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b618:	2400      	movs	r4, #0
 800b61a:	4622      	mov	r2, r4
 800b61c:	462b      	mov	r3, r5
 800b61e:	2000      	movs	r0, #0
 800b620:	f7f4 fe32 	bl	8000288 <__aeabi_dsub>
 800b624:	4622      	mov	r2, r4
 800b626:	4680      	mov	r8, r0
 800b628:	4689      	mov	r9, r1
 800b62a:	462b      	mov	r3, r5
 800b62c:	4650      	mov	r0, sl
 800b62e:	4659      	mov	r1, fp
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f4 fe26 	bl	8000288 <__aeabi_dsub>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	e7da      	b.n	800b5fc <__kernel_cos+0xec>
 800b646:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b680 <__kernel_cos+0x170>
 800b64a:	e7db      	b.n	800b604 <__kernel_cos+0xf4>
 800b64c:	f3af 8000 	nop.w
 800b650:	be8838d4 	.word	0xbe8838d4
 800b654:	bda8fae9 	.word	0xbda8fae9
 800b658:	bdb4b1c4 	.word	0xbdb4b1c4
 800b65c:	3e21ee9e 	.word	0x3e21ee9e
 800b660:	809c52ad 	.word	0x809c52ad
 800b664:	3e927e4f 	.word	0x3e927e4f
 800b668:	19cb1590 	.word	0x19cb1590
 800b66c:	3efa01a0 	.word	0x3efa01a0
 800b670:	16c15177 	.word	0x16c15177
 800b674:	3f56c16c 	.word	0x3f56c16c
 800b678:	5555554c 	.word	0x5555554c
 800b67c:	3fa55555 	.word	0x3fa55555
 800b680:	00000000 	.word	0x00000000
 800b684:	3ff00000 	.word	0x3ff00000
 800b688:	3fe00000 	.word	0x3fe00000
 800b68c:	3fd33332 	.word	0x3fd33332
 800b690:	3ff00000 	.word	0x3ff00000
 800b694:	3fe90000 	.word	0x3fe90000
 800b698:	3fd20000 	.word	0x3fd20000
 800b69c:	00000000 	.word	0x00000000

0800b6a0 <__kernel_rem_pio2>:
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	ed2d 8b02 	vpush	{d8}
 800b6a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b6ac:	f112 0f14 	cmn.w	r2, #20
 800b6b0:	9308      	str	r3, [sp, #32]
 800b6b2:	9101      	str	r1, [sp, #4]
 800b6b4:	4bc6      	ldr	r3, [pc, #792]	; (800b9d0 <__kernel_rem_pio2+0x330>)
 800b6b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800b6b8:	9009      	str	r0, [sp, #36]	; 0x24
 800b6ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6be:	9304      	str	r3, [sp, #16]
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6c6:	bfa8      	it	ge
 800b6c8:	1ed4      	subge	r4, r2, #3
 800b6ca:	9306      	str	r3, [sp, #24]
 800b6cc:	bfb2      	itee	lt
 800b6ce:	2400      	movlt	r4, #0
 800b6d0:	2318      	movge	r3, #24
 800b6d2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b6d6:	f06f 0317 	mvn.w	r3, #23
 800b6da:	fb04 3303 	mla	r3, r4, r3, r3
 800b6de:	eb03 0a02 	add.w	sl, r3, r2
 800b6e2:	9b04      	ldr	r3, [sp, #16]
 800b6e4:	9a06      	ldr	r2, [sp, #24]
 800b6e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b9c0 <__kernel_rem_pio2+0x320>
 800b6ea:	eb03 0802 	add.w	r8, r3, r2
 800b6ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b6f0:	1aa7      	subs	r7, r4, r2
 800b6f2:	ae20      	add	r6, sp, #128	; 0x80
 800b6f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	4545      	cmp	r5, r8
 800b6fc:	dd18      	ble.n	800b730 <__kernel_rem_pio2+0x90>
 800b6fe:	9b08      	ldr	r3, [sp, #32]
 800b700:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b704:	aa20      	add	r2, sp, #128	; 0x80
 800b706:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b9c0 <__kernel_rem_pio2+0x320>
 800b70a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b70e:	f1c3 0301 	rsb	r3, r3, #1
 800b712:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b716:	9307      	str	r3, [sp, #28]
 800b718:	9b07      	ldr	r3, [sp, #28]
 800b71a:	9a04      	ldr	r2, [sp, #16]
 800b71c:	4443      	add	r3, r8
 800b71e:	429a      	cmp	r2, r3
 800b720:	db2f      	blt.n	800b782 <__kernel_rem_pio2+0xe2>
 800b722:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b726:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b72a:	462f      	mov	r7, r5
 800b72c:	2600      	movs	r6, #0
 800b72e:	e01b      	b.n	800b768 <__kernel_rem_pio2+0xc8>
 800b730:	42ef      	cmn	r7, r5
 800b732:	d407      	bmi.n	800b744 <__kernel_rem_pio2+0xa4>
 800b734:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b738:	f7f4 fef4 	bl	8000524 <__aeabi_i2d>
 800b73c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b740:	3501      	adds	r5, #1
 800b742:	e7da      	b.n	800b6fa <__kernel_rem_pio2+0x5a>
 800b744:	ec51 0b18 	vmov	r0, r1, d8
 800b748:	e7f8      	b.n	800b73c <__kernel_rem_pio2+0x9c>
 800b74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b752:	f7f4 ff51 	bl	80005f8 <__aeabi_dmul>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75e:	f7f4 fd95 	bl	800028c <__adddf3>
 800b762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b766:	3601      	adds	r6, #1
 800b768:	9b06      	ldr	r3, [sp, #24]
 800b76a:	429e      	cmp	r6, r3
 800b76c:	f1a7 0708 	sub.w	r7, r7, #8
 800b770:	ddeb      	ble.n	800b74a <__kernel_rem_pio2+0xaa>
 800b772:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b776:	3508      	adds	r5, #8
 800b778:	ecab 7b02 	vstmia	fp!, {d7}
 800b77c:	f108 0801 	add.w	r8, r8, #1
 800b780:	e7ca      	b.n	800b718 <__kernel_rem_pio2+0x78>
 800b782:	9b04      	ldr	r3, [sp, #16]
 800b784:	aa0c      	add	r2, sp, #48	; 0x30
 800b786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b78c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800b78e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b792:	9c04      	ldr	r4, [sp, #16]
 800b794:	930a      	str	r3, [sp, #40]	; 0x28
 800b796:	ab98      	add	r3, sp, #608	; 0x260
 800b798:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b79c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b7a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b7a4:	f8cd b008 	str.w	fp, [sp, #8]
 800b7a8:	4625      	mov	r5, r4
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	dc78      	bgt.n	800b8a0 <__kernel_rem_pio2+0x200>
 800b7ae:	ec47 6b10 	vmov	d0, r6, r7
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	f000 ff38 	bl	800c628 <scalbn>
 800b7b8:	ec57 6b10 	vmov	r6, r7, d0
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b7c2:	ee10 0a10 	vmov	r0, s0
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	f7f4 ff16 	bl	80005f8 <__aeabi_dmul>
 800b7cc:	ec41 0b10 	vmov	d0, r0, r1
 800b7d0:	f000 fea2 	bl	800c518 <floor>
 800b7d4:	4b7f      	ldr	r3, [pc, #508]	; (800b9d4 <__kernel_rem_pio2+0x334>)
 800b7d6:	ec51 0b10 	vmov	r0, r1, d0
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f4 fd4e 	bl	8000288 <__aeabi_dsub>
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	f7f5 f9b2 	bl	8000b58 <__aeabi_d2iz>
 800b7f4:	9007      	str	r0, [sp, #28]
 800b7f6:	f7f4 fe95 	bl	8000524 <__aeabi_i2d>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f4 fd41 	bl	8000288 <__aeabi_dsub>
 800b806:	f1ba 0f00 	cmp.w	sl, #0
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	dd70      	ble.n	800b8f2 <__kernel_rem_pio2+0x252>
 800b810:	1e62      	subs	r2, r4, #1
 800b812:	ab0c      	add	r3, sp, #48	; 0x30
 800b814:	9d07      	ldr	r5, [sp, #28]
 800b816:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b81a:	f1ca 0118 	rsb	r1, sl, #24
 800b81e:	fa40 f301 	asr.w	r3, r0, r1
 800b822:	441d      	add	r5, r3
 800b824:	408b      	lsls	r3, r1
 800b826:	1ac0      	subs	r0, r0, r3
 800b828:	ab0c      	add	r3, sp, #48	; 0x30
 800b82a:	9507      	str	r5, [sp, #28]
 800b82c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b830:	f1ca 0317 	rsb	r3, sl, #23
 800b834:	fa40 f303 	asr.w	r3, r0, r3
 800b838:	9302      	str	r3, [sp, #8]
 800b83a:	9b02      	ldr	r3, [sp, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	dd66      	ble.n	800b90e <__kernel_rem_pio2+0x26e>
 800b840:	9b07      	ldr	r3, [sp, #28]
 800b842:	2200      	movs	r2, #0
 800b844:	3301      	adds	r3, #1
 800b846:	9307      	str	r3, [sp, #28]
 800b848:	4615      	mov	r5, r2
 800b84a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b84e:	4294      	cmp	r4, r2
 800b850:	f300 8099 	bgt.w	800b986 <__kernel_rem_pio2+0x2e6>
 800b854:	f1ba 0f00 	cmp.w	sl, #0
 800b858:	dd07      	ble.n	800b86a <__kernel_rem_pio2+0x1ca>
 800b85a:	f1ba 0f01 	cmp.w	sl, #1
 800b85e:	f000 80a5 	beq.w	800b9ac <__kernel_rem_pio2+0x30c>
 800b862:	f1ba 0f02 	cmp.w	sl, #2
 800b866:	f000 80c1 	beq.w	800b9ec <__kernel_rem_pio2+0x34c>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d14e      	bne.n	800b90e <__kernel_rem_pio2+0x26e>
 800b870:	4632      	mov	r2, r6
 800b872:	463b      	mov	r3, r7
 800b874:	4958      	ldr	r1, [pc, #352]	; (800b9d8 <__kernel_rem_pio2+0x338>)
 800b876:	2000      	movs	r0, #0
 800b878:	f7f4 fd06 	bl	8000288 <__aeabi_dsub>
 800b87c:	4606      	mov	r6, r0
 800b87e:	460f      	mov	r7, r1
 800b880:	2d00      	cmp	r5, #0
 800b882:	d044      	beq.n	800b90e <__kernel_rem_pio2+0x26e>
 800b884:	4650      	mov	r0, sl
 800b886:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b9c8 <__kernel_rem_pio2+0x328>
 800b88a:	f000 fecd 	bl	800c628 <scalbn>
 800b88e:	4630      	mov	r0, r6
 800b890:	4639      	mov	r1, r7
 800b892:	ec53 2b10 	vmov	r2, r3, d0
 800b896:	f7f4 fcf7 	bl	8000288 <__aeabi_dsub>
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	e036      	b.n	800b90e <__kernel_rem_pio2+0x26e>
 800b8a0:	4b4e      	ldr	r3, [pc, #312]	; (800b9dc <__kernel_rem_pio2+0x33c>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	f7f5 f954 	bl	8000b58 <__aeabi_d2iz>
 800b8b0:	f7f4 fe38 	bl	8000524 <__aeabi_i2d>
 800b8b4:	4b4a      	ldr	r3, [pc, #296]	; (800b9e0 <__kernel_rem_pio2+0x340>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	4689      	mov	r9, r1
 800b8bc:	f7f4 fe9c 	bl	80005f8 <__aeabi_dmul>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f4 fcde 	bl	8000288 <__aeabi_dsub>
 800b8cc:	f7f5 f944 	bl	8000b58 <__aeabi_d2iz>
 800b8d0:	9b02      	ldr	r3, [sp, #8]
 800b8d2:	f843 0b04 	str.w	r0, [r3], #4
 800b8d6:	3d01      	subs	r5, #1
 800b8d8:	9302      	str	r3, [sp, #8]
 800b8da:	ab70      	add	r3, sp, #448	; 0x1c0
 800b8dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	f7f4 fcd0 	bl	800028c <__adddf3>
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	e75b      	b.n	800b7aa <__kernel_rem_pio2+0x10a>
 800b8f2:	d105      	bne.n	800b900 <__kernel_rem_pio2+0x260>
 800b8f4:	1e63      	subs	r3, r4, #1
 800b8f6:	aa0c      	add	r2, sp, #48	; 0x30
 800b8f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b8fc:	15c3      	asrs	r3, r0, #23
 800b8fe:	e79b      	b.n	800b838 <__kernel_rem_pio2+0x198>
 800b900:	4b38      	ldr	r3, [pc, #224]	; (800b9e4 <__kernel_rem_pio2+0x344>)
 800b902:	2200      	movs	r2, #0
 800b904:	f7f5 f8fe 	bl	8000b04 <__aeabi_dcmpge>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d139      	bne.n	800b980 <__kernel_rem_pio2+0x2e0>
 800b90c:	9002      	str	r0, [sp, #8]
 800b90e:	2200      	movs	r2, #0
 800b910:	2300      	movs	r3, #0
 800b912:	4630      	mov	r0, r6
 800b914:	4639      	mov	r1, r7
 800b916:	f7f5 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	f000 80b4 	beq.w	800ba88 <__kernel_rem_pio2+0x3e8>
 800b920:	f104 3bff 	add.w	fp, r4, #4294967295
 800b924:	465b      	mov	r3, fp
 800b926:	2200      	movs	r2, #0
 800b928:	9904      	ldr	r1, [sp, #16]
 800b92a:	428b      	cmp	r3, r1
 800b92c:	da65      	bge.n	800b9fa <__kernel_rem_pio2+0x35a>
 800b92e:	2a00      	cmp	r2, #0
 800b930:	d07b      	beq.n	800ba2a <__kernel_rem_pio2+0x38a>
 800b932:	ab0c      	add	r3, sp, #48	; 0x30
 800b934:	f1aa 0a18 	sub.w	sl, sl, #24
 800b938:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 80a0 	beq.w	800ba82 <__kernel_rem_pio2+0x3e2>
 800b942:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b9c8 <__kernel_rem_pio2+0x328>
 800b946:	4650      	mov	r0, sl
 800b948:	f000 fe6e 	bl	800c628 <scalbn>
 800b94c:	4f23      	ldr	r7, [pc, #140]	; (800b9dc <__kernel_rem_pio2+0x33c>)
 800b94e:	ec55 4b10 	vmov	r4, r5, d0
 800b952:	46d8      	mov	r8, fp
 800b954:	2600      	movs	r6, #0
 800b956:	f1b8 0f00 	cmp.w	r8, #0
 800b95a:	f280 80cf 	bge.w	800bafc <__kernel_rem_pio2+0x45c>
 800b95e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b9c0 <__kernel_rem_pio2+0x320>
 800b962:	465f      	mov	r7, fp
 800b964:	f04f 0800 	mov.w	r8, #0
 800b968:	2f00      	cmp	r7, #0
 800b96a:	f2c0 80fd 	blt.w	800bb68 <__kernel_rem_pio2+0x4c8>
 800b96e:	ab70      	add	r3, sp, #448	; 0x1c0
 800b970:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b9e8 <__kernel_rem_pio2+0x348>
 800b974:	ec55 4b18 	vmov	r4, r5, d8
 800b978:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b97c:	2600      	movs	r6, #0
 800b97e:	e0e5      	b.n	800bb4c <__kernel_rem_pio2+0x4ac>
 800b980:	2302      	movs	r3, #2
 800b982:	9302      	str	r3, [sp, #8]
 800b984:	e75c      	b.n	800b840 <__kernel_rem_pio2+0x1a0>
 800b986:	f8db 3000 	ldr.w	r3, [fp]
 800b98a:	b955      	cbnz	r5, 800b9a2 <__kernel_rem_pio2+0x302>
 800b98c:	b123      	cbz	r3, 800b998 <__kernel_rem_pio2+0x2f8>
 800b98e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b992:	f8cb 3000 	str.w	r3, [fp]
 800b996:	2301      	movs	r3, #1
 800b998:	3201      	adds	r2, #1
 800b99a:	f10b 0b04 	add.w	fp, fp, #4
 800b99e:	461d      	mov	r5, r3
 800b9a0:	e755      	b.n	800b84e <__kernel_rem_pio2+0x1ae>
 800b9a2:	1acb      	subs	r3, r1, r3
 800b9a4:	f8cb 3000 	str.w	r3, [fp]
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	e7f5      	b.n	800b998 <__kernel_rem_pio2+0x2f8>
 800b9ac:	1e62      	subs	r2, r4, #1
 800b9ae:	ab0c      	add	r3, sp, #48	; 0x30
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b9b8:	a90c      	add	r1, sp, #48	; 0x30
 800b9ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b9be:	e754      	b.n	800b86a <__kernel_rem_pio2+0x1ca>
	...
 800b9cc:	3ff00000 	.word	0x3ff00000
 800b9d0:	0800f8a0 	.word	0x0800f8a0
 800b9d4:	40200000 	.word	0x40200000
 800b9d8:	3ff00000 	.word	0x3ff00000
 800b9dc:	3e700000 	.word	0x3e700000
 800b9e0:	41700000 	.word	0x41700000
 800b9e4:	3fe00000 	.word	0x3fe00000
 800b9e8:	0800f860 	.word	0x0800f860
 800b9ec:	1e62      	subs	r2, r4, #1
 800b9ee:	ab0c      	add	r3, sp, #48	; 0x30
 800b9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b9f8:	e7de      	b.n	800b9b8 <__kernel_rem_pio2+0x318>
 800b9fa:	a90c      	add	r1, sp, #48	; 0x30
 800b9fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	430a      	orrs	r2, r1
 800ba04:	e790      	b.n	800b928 <__kernel_rem_pio2+0x288>
 800ba06:	3301      	adds	r3, #1
 800ba08:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ba0c:	2900      	cmp	r1, #0
 800ba0e:	d0fa      	beq.n	800ba06 <__kernel_rem_pio2+0x366>
 800ba10:	9a08      	ldr	r2, [sp, #32]
 800ba12:	18e3      	adds	r3, r4, r3
 800ba14:	18a6      	adds	r6, r4, r2
 800ba16:	aa20      	add	r2, sp, #128	; 0x80
 800ba18:	1c65      	adds	r5, r4, #1
 800ba1a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ba1e:	9302      	str	r3, [sp, #8]
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	42ab      	cmp	r3, r5
 800ba24:	da04      	bge.n	800ba30 <__kernel_rem_pio2+0x390>
 800ba26:	461c      	mov	r4, r3
 800ba28:	e6b5      	b.n	800b796 <__kernel_rem_pio2+0xf6>
 800ba2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7eb      	b.n	800ba08 <__kernel_rem_pio2+0x368>
 800ba30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba36:	f7f4 fd75 	bl	8000524 <__aeabi_i2d>
 800ba3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba40:	46b3      	mov	fp, r6
 800ba42:	461c      	mov	r4, r3
 800ba44:	2700      	movs	r7, #0
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	f04f 0900 	mov.w	r9, #0
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	429f      	cmp	r7, r3
 800ba52:	dd06      	ble.n	800ba62 <__kernel_rem_pio2+0x3c2>
 800ba54:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ba5a:	e9c3 8900 	strd	r8, r9, [r3]
 800ba5e:	3501      	adds	r5, #1
 800ba60:	e7de      	b.n	800ba20 <__kernel_rem_pio2+0x380>
 800ba62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ba66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ba6a:	f7f4 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	460b      	mov	r3, r1
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f4 fc09 	bl	800028c <__adddf3>
 800ba7a:	3701      	adds	r7, #1
 800ba7c:	4680      	mov	r8, r0
 800ba7e:	4689      	mov	r9, r1
 800ba80:	e7e5      	b.n	800ba4e <__kernel_rem_pio2+0x3ae>
 800ba82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba86:	e754      	b.n	800b932 <__kernel_rem_pio2+0x292>
 800ba88:	ec47 6b10 	vmov	d0, r6, r7
 800ba8c:	f1ca 0000 	rsb	r0, sl, #0
 800ba90:	f000 fdca 	bl	800c628 <scalbn>
 800ba94:	ec57 6b10 	vmov	r6, r7, d0
 800ba98:	4b9f      	ldr	r3, [pc, #636]	; (800bd18 <__kernel_rem_pio2+0x678>)
 800ba9a:	ee10 0a10 	vmov	r0, s0
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4639      	mov	r1, r7
 800baa2:	f7f5 f82f 	bl	8000b04 <__aeabi_dcmpge>
 800baa6:	b300      	cbz	r0, 800baea <__kernel_rem_pio2+0x44a>
 800baa8:	4b9c      	ldr	r3, [pc, #624]	; (800bd1c <__kernel_rem_pio2+0x67c>)
 800baaa:	2200      	movs	r2, #0
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fda2 	bl	80005f8 <__aeabi_dmul>
 800bab4:	f7f5 f850 	bl	8000b58 <__aeabi_d2iz>
 800bab8:	4605      	mov	r5, r0
 800baba:	f7f4 fd33 	bl	8000524 <__aeabi_i2d>
 800babe:	4b96      	ldr	r3, [pc, #600]	; (800bd18 <__kernel_rem_pio2+0x678>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	f7f4 fd99 	bl	80005f8 <__aeabi_dmul>
 800bac6:	460b      	mov	r3, r1
 800bac8:	4602      	mov	r2, r0
 800baca:	4639      	mov	r1, r7
 800bacc:	4630      	mov	r0, r6
 800bace:	f7f4 fbdb 	bl	8000288 <__aeabi_dsub>
 800bad2:	f7f5 f841 	bl	8000b58 <__aeabi_d2iz>
 800bad6:	f104 0b01 	add.w	fp, r4, #1
 800bada:	ab0c      	add	r3, sp, #48	; 0x30
 800badc:	f10a 0a18 	add.w	sl, sl, #24
 800bae0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bae4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800bae8:	e72b      	b.n	800b942 <__kernel_rem_pio2+0x2a2>
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	f7f5 f833 	bl	8000b58 <__aeabi_d2iz>
 800baf2:	ab0c      	add	r3, sp, #48	; 0x30
 800baf4:	46a3      	mov	fp, r4
 800baf6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bafa:	e722      	b.n	800b942 <__kernel_rem_pio2+0x2a2>
 800bafc:	ab70      	add	r3, sp, #448	; 0x1c0
 800bafe:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800bb02:	ab0c      	add	r3, sp, #48	; 0x30
 800bb04:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bb08:	f7f4 fd0c 	bl	8000524 <__aeabi_i2d>
 800bb0c:	4622      	mov	r2, r4
 800bb0e:	462b      	mov	r3, r5
 800bb10:	f7f4 fd72 	bl	80005f8 <__aeabi_dmul>
 800bb14:	4632      	mov	r2, r6
 800bb16:	e9c9 0100 	strd	r0, r1, [r9]
 800bb1a:	463b      	mov	r3, r7
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f4 fd6a 	bl	80005f8 <__aeabi_dmul>
 800bb24:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	e713      	b.n	800b956 <__kernel_rem_pio2+0x2b6>
 800bb2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bb32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bb36:	f7f4 fd5f 	bl	80005f8 <__aeabi_dmul>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fba3 	bl	800028c <__adddf3>
 800bb46:	3601      	adds	r6, #1
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	429e      	cmp	r6, r3
 800bb50:	dc01      	bgt.n	800bb56 <__kernel_rem_pio2+0x4b6>
 800bb52:	45b0      	cmp	r8, r6
 800bb54:	daeb      	bge.n	800bb2e <__kernel_rem_pio2+0x48e>
 800bb56:	ab48      	add	r3, sp, #288	; 0x120
 800bb58:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb5c:	e9c3 4500 	strd	r4, r5, [r3]
 800bb60:	3f01      	subs	r7, #1
 800bb62:	f108 0801 	add.w	r8, r8, #1
 800bb66:	e6ff      	b.n	800b968 <__kernel_rem_pio2+0x2c8>
 800bb68:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	dc0b      	bgt.n	800bb86 <__kernel_rem_pio2+0x4e6>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	dc6e      	bgt.n	800bc50 <__kernel_rem_pio2+0x5b0>
 800bb72:	d045      	beq.n	800bc00 <__kernel_rem_pio2+0x560>
 800bb74:	9b07      	ldr	r3, [sp, #28]
 800bb76:	f003 0007 	and.w	r0, r3, #7
 800bb7a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bb7e:	ecbd 8b02 	vpop	{d8}
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d1f3      	bne.n	800bb74 <__kernel_rem_pio2+0x4d4>
 800bb8c:	ab48      	add	r3, sp, #288	; 0x120
 800bb8e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bb92:	46d0      	mov	r8, sl
 800bb94:	46d9      	mov	r9, fp
 800bb96:	f1b9 0f00 	cmp.w	r9, #0
 800bb9a:	f1a8 0808 	sub.w	r8, r8, #8
 800bb9e:	dc64      	bgt.n	800bc6a <__kernel_rem_pio2+0x5ca>
 800bba0:	465c      	mov	r4, fp
 800bba2:	2c01      	cmp	r4, #1
 800bba4:	f1aa 0a08 	sub.w	sl, sl, #8
 800bba8:	dc7e      	bgt.n	800bca8 <__kernel_rem_pio2+0x608>
 800bbaa:	2000      	movs	r0, #0
 800bbac:	2100      	movs	r1, #0
 800bbae:	f1bb 0f01 	cmp.w	fp, #1
 800bbb2:	f300 8097 	bgt.w	800bce4 <__kernel_rem_pio2+0x644>
 800bbb6:	9b02      	ldr	r3, [sp, #8]
 800bbb8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bbbc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f040 8099 	bne.w	800bcf8 <__kernel_rem_pio2+0x658>
 800bbc6:	9b01      	ldr	r3, [sp, #4]
 800bbc8:	e9c3 5600 	strd	r5, r6, [r3]
 800bbcc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bbd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bbd4:	e7ce      	b.n	800bb74 <__kernel_rem_pio2+0x4d4>
 800bbd6:	ab48      	add	r3, sp, #288	; 0x120
 800bbd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fb54 	bl	800028c <__adddf3>
 800bbe4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbe8:	f1bb 0f00 	cmp.w	fp, #0
 800bbec:	daf3      	bge.n	800bbd6 <__kernel_rem_pio2+0x536>
 800bbee:	9b02      	ldr	r3, [sp, #8]
 800bbf0:	b113      	cbz	r3, 800bbf8 <__kernel_rem_pio2+0x558>
 800bbf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	e9c3 0100 	strd	r0, r1, [r3]
 800bbfe:	e7b9      	b.n	800bb74 <__kernel_rem_pio2+0x4d4>
 800bc00:	2000      	movs	r0, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	e7f0      	b.n	800bbe8 <__kernel_rem_pio2+0x548>
 800bc06:	ab48      	add	r3, sp, #288	; 0x120
 800bc08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	f7f4 fb3c 	bl	800028c <__adddf3>
 800bc14:	3c01      	subs	r4, #1
 800bc16:	2c00      	cmp	r4, #0
 800bc18:	daf5      	bge.n	800bc06 <__kernel_rem_pio2+0x566>
 800bc1a:	9b02      	ldr	r3, [sp, #8]
 800bc1c:	b1e3      	cbz	r3, 800bc58 <__kernel_rem_pio2+0x5b8>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc24:	9c01      	ldr	r4, [sp, #4]
 800bc26:	e9c4 2300 	strd	r2, r3, [r4]
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bc32:	f7f4 fb29 	bl	8000288 <__aeabi_dsub>
 800bc36:	ad4a      	add	r5, sp, #296	; 0x128
 800bc38:	2401      	movs	r4, #1
 800bc3a:	45a3      	cmp	fp, r4
 800bc3c:	da0f      	bge.n	800bc5e <__kernel_rem_pio2+0x5be>
 800bc3e:	9b02      	ldr	r3, [sp, #8]
 800bc40:	b113      	cbz	r3, 800bc48 <__kernel_rem_pio2+0x5a8>
 800bc42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc46:	4619      	mov	r1, r3
 800bc48:	9b01      	ldr	r3, [sp, #4]
 800bc4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bc4e:	e791      	b.n	800bb74 <__kernel_rem_pio2+0x4d4>
 800bc50:	465c      	mov	r4, fp
 800bc52:	2000      	movs	r0, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	e7de      	b.n	800bc16 <__kernel_rem_pio2+0x576>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	e7e2      	b.n	800bc24 <__kernel_rem_pio2+0x584>
 800bc5e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bc62:	f7f4 fb13 	bl	800028c <__adddf3>
 800bc66:	3401      	adds	r4, #1
 800bc68:	e7e7      	b.n	800bc3a <__kernel_rem_pio2+0x59a>
 800bc6a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800bc6e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800bc72:	4620      	mov	r0, r4
 800bc74:	4632      	mov	r2, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	4629      	mov	r1, r5
 800bc7a:	f7f4 fb07 	bl	800028c <__adddf3>
 800bc7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4620      	mov	r0, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f4 fafd 	bl	8000288 <__aeabi_dsub>
 800bc8e:	4632      	mov	r2, r6
 800bc90:	463b      	mov	r3, r7
 800bc92:	f7f4 fafb 	bl	800028c <__adddf3>
 800bc96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bc9a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800bc9e:	ed88 7b00 	vstr	d7, [r8]
 800bca2:	f109 39ff 	add.w	r9, r9, #4294967295
 800bca6:	e776      	b.n	800bb96 <__kernel_rem_pio2+0x4f6>
 800bca8:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcac:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	463b      	mov	r3, r7
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 fae8 	bl	800028c <__adddf3>
 800bcbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	f7f4 fade 	bl	8000288 <__aeabi_dsub>
 800bccc:	4632      	mov	r2, r6
 800bcce:	463b      	mov	r3, r7
 800bcd0:	f7f4 fadc 	bl	800028c <__adddf3>
 800bcd4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bcd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bcdc:	ed8a 7b00 	vstr	d7, [sl]
 800bce0:	3c01      	subs	r4, #1
 800bce2:	e75e      	b.n	800bba2 <__kernel_rem_pio2+0x502>
 800bce4:	ab48      	add	r3, sp, #288	; 0x120
 800bce6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	f7f4 facd 	bl	800028c <__adddf3>
 800bcf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcf6:	e75a      	b.n	800bbae <__kernel_rem_pio2+0x50e>
 800bcf8:	9b01      	ldr	r3, [sp, #4]
 800bcfa:	9a01      	ldr	r2, [sp, #4]
 800bcfc:	601d      	str	r5, [r3, #0]
 800bcfe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bd02:	605c      	str	r4, [r3, #4]
 800bd04:	609f      	str	r7, [r3, #8]
 800bd06:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bd0a:	60d3      	str	r3, [r2, #12]
 800bd0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd10:	6110      	str	r0, [r2, #16]
 800bd12:	6153      	str	r3, [r2, #20]
 800bd14:	e72e      	b.n	800bb74 <__kernel_rem_pio2+0x4d4>
 800bd16:	bf00      	nop
 800bd18:	41700000 	.word	0x41700000
 800bd1c:	3e700000 	.word	0x3e700000

0800bd20 <__kernel_sin>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	ed2d 8b04 	vpush	{d8-d9}
 800bd28:	eeb0 8a41 	vmov.f32	s16, s2
 800bd2c:	eef0 8a61 	vmov.f32	s17, s3
 800bd30:	ec55 4b10 	vmov	r4, r5, d0
 800bd34:	b083      	sub	sp, #12
 800bd36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bd3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bd3e:	9001      	str	r0, [sp, #4]
 800bd40:	da06      	bge.n	800bd50 <__kernel_sin+0x30>
 800bd42:	ee10 0a10 	vmov	r0, s0
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 ff06 	bl	8000b58 <__aeabi_d2iz>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d051      	beq.n	800bdf4 <__kernel_sin+0xd4>
 800bd50:	4622      	mov	r2, r4
 800bd52:	462b      	mov	r3, r5
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7f4 fc4e 	bl	80005f8 <__aeabi_dmul>
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	468b      	mov	fp, r1
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fc46 	bl	80005f8 <__aeabi_dmul>
 800bd6c:	a341      	add	r3, pc, #260	; (adr r3, 800be74 <__kernel_sin+0x154>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	4680      	mov	r8, r0
 800bd74:	4689      	mov	r9, r1
 800bd76:	4650      	mov	r0, sl
 800bd78:	4659      	mov	r1, fp
 800bd7a:	f7f4 fc3d 	bl	80005f8 <__aeabi_dmul>
 800bd7e:	a33f      	add	r3, pc, #252	; (adr r3, 800be7c <__kernel_sin+0x15c>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	f7f4 fa80 	bl	8000288 <__aeabi_dsub>
 800bd88:	4652      	mov	r2, sl
 800bd8a:	465b      	mov	r3, fp
 800bd8c:	f7f4 fc34 	bl	80005f8 <__aeabi_dmul>
 800bd90:	a33c      	add	r3, pc, #240	; (adr r3, 800be84 <__kernel_sin+0x164>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f7f4 fa79 	bl	800028c <__adddf3>
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	f7f4 fc2b 	bl	80005f8 <__aeabi_dmul>
 800bda2:	a33a      	add	r3, pc, #232	; (adr r3, 800be8c <__kernel_sin+0x16c>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f7f4 fa6e 	bl	8000288 <__aeabi_dsub>
 800bdac:	4652      	mov	r2, sl
 800bdae:	465b      	mov	r3, fp
 800bdb0:	f7f4 fc22 	bl	80005f8 <__aeabi_dmul>
 800bdb4:	a337      	add	r3, pc, #220	; (adr r3, 800be94 <__kernel_sin+0x174>)
 800bdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdba:	f7f4 fa67 	bl	800028c <__adddf3>
 800bdbe:	9b01      	ldr	r3, [sp, #4]
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	b9eb      	cbnz	r3, 800be02 <__kernel_sin+0xe2>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4650      	mov	r0, sl
 800bdcc:	4659      	mov	r1, fp
 800bdce:	f7f4 fc13 	bl	80005f8 <__aeabi_dmul>
 800bdd2:	a325      	add	r3, pc, #148	; (adr r3, 800be68 <__kernel_sin+0x148>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa56 	bl	8000288 <__aeabi_dsub>
 800bddc:	4642      	mov	r2, r8
 800bdde:	464b      	mov	r3, r9
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4620      	mov	r0, r4
 800bdea:	4629      	mov	r1, r5
 800bdec:	f7f4 fa4e 	bl	800028c <__adddf3>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	460d      	mov	r5, r1
 800bdf4:	ec45 4b10 	vmov	d0, r4, r5
 800bdf8:	b003      	add	sp, #12
 800bdfa:	ecbd 8b04 	vpop	{d8-d9}
 800bdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be02:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <__kernel_sin+0x150>)
 800be04:	ec51 0b18 	vmov	r0, r1, d8
 800be08:	2200      	movs	r2, #0
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	4632      	mov	r2, r6
 800be10:	ec41 0b19 	vmov	d9, r0, r1
 800be14:	463b      	mov	r3, r7
 800be16:	4640      	mov	r0, r8
 800be18:	4649      	mov	r1, r9
 800be1a:	f7f4 fbed 	bl	80005f8 <__aeabi_dmul>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	ec51 0b19 	vmov	r0, r1, d9
 800be26:	f7f4 fa2f 	bl	8000288 <__aeabi_dsub>
 800be2a:	4652      	mov	r2, sl
 800be2c:	465b      	mov	r3, fp
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	ec53 2b18 	vmov	r2, r3, d8
 800be36:	f7f4 fa27 	bl	8000288 <__aeabi_dsub>
 800be3a:	a30b      	add	r3, pc, #44	; (adr r3, 800be68 <__kernel_sin+0x148>)
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	4606      	mov	r6, r0
 800be42:	460f      	mov	r7, r1
 800be44:	4640      	mov	r0, r8
 800be46:	4649      	mov	r1, r9
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4630      	mov	r0, r6
 800be52:	4639      	mov	r1, r7
 800be54:	f7f4 fa1a 	bl	800028c <__adddf3>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4620      	mov	r0, r4
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fa12 	bl	8000288 <__aeabi_dsub>
 800be64:	e7c4      	b.n	800bdf0 <__kernel_sin+0xd0>
 800be66:	bf00      	nop
 800be68:	55555549 	.word	0x55555549
 800be6c:	3fc55555 	.word	0x3fc55555
 800be70:	3fe00000 	.word	0x3fe00000
 800be74:	5acfd57c 	.word	0x5acfd57c
 800be78:	3de5d93a 	.word	0x3de5d93a
 800be7c:	8a2b9ceb 	.word	0x8a2b9ceb
 800be80:	3e5ae5e6 	.word	0x3e5ae5e6
 800be84:	57b1fe7d 	.word	0x57b1fe7d
 800be88:	3ec71de3 	.word	0x3ec71de3
 800be8c:	19c161d5 	.word	0x19c161d5
 800be90:	3f2a01a0 	.word	0x3f2a01a0
 800be94:	1110f8a6 	.word	0x1110f8a6
 800be98:	3f811111 	.word	0x3f811111

0800be9c <__kernel_cosf>:
 800be9c:	ee10 3a10 	vmov	r3, s0
 800bea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bea4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bea8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800beac:	da05      	bge.n	800beba <__kernel_cosf+0x1e>
 800beae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800beb2:	ee17 2a90 	vmov	r2, s15
 800beb6:	2a00      	cmp	r2, #0
 800beb8:	d03d      	beq.n	800bf36 <__kernel_cosf+0x9a>
 800beba:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bebe:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bf3c <__kernel_cosf+0xa0>
 800bec2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bf40 <__kernel_cosf+0xa4>
 800bec6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bf44 <__kernel_cosf+0xa8>
 800beca:	4a1f      	ldr	r2, [pc, #124]	; (800bf48 <__kernel_cosf+0xac>)
 800becc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bed0:	4293      	cmp	r3, r2
 800bed2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bf4c <__kernel_cosf+0xb0>
 800bed6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800beda:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bf50 <__kernel_cosf+0xb4>
 800bede:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bee2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bf54 <__kernel_cosf+0xb8>
 800bee6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800beea:	eeb0 7a66 	vmov.f32	s14, s13
 800beee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bef2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bef6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800befa:	ee67 6a25 	vmul.f32	s13, s14, s11
 800befe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bf02:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bf06:	dc04      	bgt.n	800bf12 <__kernel_cosf+0x76>
 800bf08:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bf0c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bf10:	4770      	bx	lr
 800bf12:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <__kernel_cosf+0xbc>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	bfda      	itte	le
 800bf18:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bf1c:	ee06 3a90 	vmovle	s13, r3
 800bf20:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bf24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf28:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bf2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf30:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf34:	4770      	bx	lr
 800bf36:	eeb0 0a46 	vmov.f32	s0, s12
 800bf3a:	4770      	bx	lr
 800bf3c:	ad47d74e 	.word	0xad47d74e
 800bf40:	310f74f6 	.word	0x310f74f6
 800bf44:	3d2aaaab 	.word	0x3d2aaaab
 800bf48:	3e999999 	.word	0x3e999999
 800bf4c:	b493f27c 	.word	0xb493f27c
 800bf50:	37d00d01 	.word	0x37d00d01
 800bf54:	bab60b61 	.word	0xbab60b61
 800bf58:	3f480000 	.word	0x3f480000

0800bf5c <__kernel_rem_pio2f>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	ed2d 8b04 	vpush	{d8-d9}
 800bf64:	b0d7      	sub	sp, #348	; 0x15c
 800bf66:	4616      	mov	r6, r2
 800bf68:	4698      	mov	r8, r3
 800bf6a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bf6c:	4bbb      	ldr	r3, [pc, #748]	; (800c25c <__kernel_rem_pio2f+0x300>)
 800bf6e:	9001      	str	r0, [sp, #4]
 800bf70:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800bf74:	1d33      	adds	r3, r6, #4
 800bf76:	460d      	mov	r5, r1
 800bf78:	f108 39ff 	add.w	r9, r8, #4294967295
 800bf7c:	db29      	blt.n	800bfd2 <__kernel_rem_pio2f+0x76>
 800bf7e:	1ef1      	subs	r1, r6, #3
 800bf80:	bf48      	it	mi
 800bf82:	1d31      	addmi	r1, r6, #4
 800bf84:	10c9      	asrs	r1, r1, #3
 800bf86:	1c4c      	adds	r4, r1, #1
 800bf88:	00e3      	lsls	r3, r4, #3
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800bf8e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c26c <__kernel_rem_pio2f+0x310>
 800bf92:	eba1 0009 	sub.w	r0, r1, r9
 800bf96:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800bf9a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800bf9e:	eb07 0c09 	add.w	ip, r7, r9
 800bfa2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	4563      	cmp	r3, ip
 800bfaa:	dd14      	ble.n	800bfd6 <__kernel_rem_pio2f+0x7a>
 800bfac:	ab1a      	add	r3, sp, #104	; 0x68
 800bfae:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800bfb2:	46cc      	mov	ip, r9
 800bfb4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800bfb8:	f1c8 0b01 	rsb	fp, r8, #1
 800bfbc:	eb0b 020c 	add.w	r2, fp, ip
 800bfc0:	4297      	cmp	r7, r2
 800bfc2:	db27      	blt.n	800c014 <__kernel_rem_pio2f+0xb8>
 800bfc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bfc8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c26c <__kernel_rem_pio2f+0x310>
 800bfcc:	4618      	mov	r0, r3
 800bfce:	2200      	movs	r2, #0
 800bfd0:	e016      	b.n	800c000 <__kernel_rem_pio2f+0xa4>
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	e7d7      	b.n	800bf86 <__kernel_rem_pio2f+0x2a>
 800bfd6:	42d8      	cmn	r0, r3
 800bfd8:	bf5d      	ittte	pl
 800bfda:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800bfde:	ee07 2a90 	vmovpl	s15, r2
 800bfe2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bfe6:	eef0 7a47 	vmovmi.f32	s15, s14
 800bfea:	ecea 7a01 	vstmia	sl!, {s15}
 800bfee:	3301      	adds	r3, #1
 800bff0:	e7da      	b.n	800bfa8 <__kernel_rem_pio2f+0x4c>
 800bff2:	ecfe 6a01 	vldmia	lr!, {s13}
 800bff6:	ed90 7a00 	vldr	s14, [r0]
 800bffa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bffe:	3201      	adds	r2, #1
 800c000:	454a      	cmp	r2, r9
 800c002:	f1a0 0004 	sub.w	r0, r0, #4
 800c006:	ddf4      	ble.n	800bff2 <__kernel_rem_pio2f+0x96>
 800c008:	ecea 7a01 	vstmia	sl!, {s15}
 800c00c:	3304      	adds	r3, #4
 800c00e:	f10c 0c01 	add.w	ip, ip, #1
 800c012:	e7d3      	b.n	800bfbc <__kernel_rem_pio2f+0x60>
 800c014:	ab06      	add	r3, sp, #24
 800c016:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c01a:	9304      	str	r3, [sp, #16]
 800c01c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c01e:	eddf 8a92 	vldr	s17, [pc, #584]	; 800c268 <__kernel_rem_pio2f+0x30c>
 800c022:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800c264 <__kernel_rem_pio2f+0x308>
 800c026:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c02a:	9303      	str	r3, [sp, #12]
 800c02c:	46ba      	mov	sl, r7
 800c02e:	ab56      	add	r3, sp, #344	; 0x158
 800c030:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c034:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c038:	ab06      	add	r3, sp, #24
 800c03a:	4618      	mov	r0, r3
 800c03c:	4652      	mov	r2, sl
 800c03e:	2a00      	cmp	r2, #0
 800c040:	dc51      	bgt.n	800c0e6 <__kernel_rem_pio2f+0x18a>
 800c042:	4620      	mov	r0, r4
 800c044:	9305      	str	r3, [sp, #20]
 800c046:	f000 fbbf 	bl	800c7c8 <scalbnf>
 800c04a:	eeb0 8a40 	vmov.f32	s16, s0
 800c04e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c052:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c056:	f000 fb75 	bl	800c744 <floorf>
 800c05a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c05e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c062:	2c00      	cmp	r4, #0
 800c064:	9b05      	ldr	r3, [sp, #20]
 800c066:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c06a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c06e:	edcd 7a00 	vstr	s15, [sp]
 800c072:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c076:	dd4b      	ble.n	800c110 <__kernel_rem_pio2f+0x1b4>
 800c078:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c07c:	aa06      	add	r2, sp, #24
 800c07e:	f1c4 0e08 	rsb	lr, r4, #8
 800c082:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c086:	ee17 1a90 	vmov	r1, s15
 800c08a:	fa42 f00e 	asr.w	r0, r2, lr
 800c08e:	4401      	add	r1, r0
 800c090:	9100      	str	r1, [sp, #0]
 800c092:	fa00 f00e 	lsl.w	r0, r0, lr
 800c096:	a906      	add	r1, sp, #24
 800c098:	1a12      	subs	r2, r2, r0
 800c09a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c09e:	f1c4 0007 	rsb	r0, r4, #7
 800c0a2:	fa42 fb00 	asr.w	fp, r2, r0
 800c0a6:	f1bb 0f00 	cmp.w	fp, #0
 800c0aa:	dd43      	ble.n	800c134 <__kernel_rem_pio2f+0x1d8>
 800c0ac:	9a00      	ldr	r2, [sp, #0]
 800c0ae:	f04f 0e00 	mov.w	lr, #0
 800c0b2:	3201      	adds	r2, #1
 800c0b4:	9200      	str	r2, [sp, #0]
 800c0b6:	4670      	mov	r0, lr
 800c0b8:	45f2      	cmp	sl, lr
 800c0ba:	dc6c      	bgt.n	800c196 <__kernel_rem_pio2f+0x23a>
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	dd04      	ble.n	800c0ca <__kernel_rem_pio2f+0x16e>
 800c0c0:	2c01      	cmp	r4, #1
 800c0c2:	d079      	beq.n	800c1b8 <__kernel_rem_pio2f+0x25c>
 800c0c4:	2c02      	cmp	r4, #2
 800c0c6:	f000 8082 	beq.w	800c1ce <__kernel_rem_pio2f+0x272>
 800c0ca:	f1bb 0f02 	cmp.w	fp, #2
 800c0ce:	d131      	bne.n	800c134 <__kernel_rem_pio2f+0x1d8>
 800c0d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c0d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c0d8:	b360      	cbz	r0, 800c134 <__kernel_rem_pio2f+0x1d8>
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 fb74 	bl	800c7c8 <scalbnf>
 800c0e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c0e4:	e026      	b.n	800c134 <__kernel_rem_pio2f+0x1d8>
 800c0e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c0ea:	3a01      	subs	r2, #1
 800c0ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0f0:	a942      	add	r1, sp, #264	; 0x108
 800c0f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c0fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c0fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c102:	eca0 0a01 	vstmia	r0!, {s0}
 800c106:	ed9c 0a00 	vldr	s0, [ip]
 800c10a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c10e:	e796      	b.n	800c03e <__kernel_rem_pio2f+0xe2>
 800c110:	d107      	bne.n	800c122 <__kernel_rem_pio2f+0x1c6>
 800c112:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c116:	a906      	add	r1, sp, #24
 800c118:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c11c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800c120:	e7c1      	b.n	800c0a6 <__kernel_rem_pio2f+0x14a>
 800c122:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c126:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12e:	da2f      	bge.n	800c190 <__kernel_rem_pio2f+0x234>
 800c130:	f04f 0b00 	mov.w	fp, #0
 800c134:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c13c:	f040 8098 	bne.w	800c270 <__kernel_rem_pio2f+0x314>
 800c140:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c144:	469c      	mov	ip, r3
 800c146:	2200      	movs	r2, #0
 800c148:	45bc      	cmp	ip, r7
 800c14a:	da48      	bge.n	800c1de <__kernel_rem_pio2f+0x282>
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	d05f      	beq.n	800c210 <__kernel_rem_pio2f+0x2b4>
 800c150:	aa06      	add	r2, sp, #24
 800c152:	3c08      	subs	r4, #8
 800c154:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c158:	2900      	cmp	r1, #0
 800c15a:	d07d      	beq.n	800c258 <__kernel_rem_pio2f+0x2fc>
 800c15c:	4620      	mov	r0, r4
 800c15e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	f000 fb30 	bl	800c7c8 <scalbnf>
 800c168:	9b01      	ldr	r3, [sp, #4]
 800c16a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c268 <__kernel_rem_pio2f+0x30c>
 800c16e:	4619      	mov	r1, r3
 800c170:	2900      	cmp	r1, #0
 800c172:	f280 80af 	bge.w	800c2d4 <__kernel_rem_pio2f+0x378>
 800c176:	4618      	mov	r0, r3
 800c178:	2400      	movs	r4, #0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f2c0 80d0 	blt.w	800c320 <__kernel_rem_pio2f+0x3c4>
 800c180:	a942      	add	r1, sp, #264	; 0x108
 800c182:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800c186:	4a36      	ldr	r2, [pc, #216]	; (800c260 <__kernel_rem_pio2f+0x304>)
 800c188:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c26c <__kernel_rem_pio2f+0x310>
 800c18c:	2100      	movs	r1, #0
 800c18e:	e0bb      	b.n	800c308 <__kernel_rem_pio2f+0x3ac>
 800c190:	f04f 0b02 	mov.w	fp, #2
 800c194:	e78a      	b.n	800c0ac <__kernel_rem_pio2f+0x150>
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	b948      	cbnz	r0, 800c1ae <__kernel_rem_pio2f+0x252>
 800c19a:	b11a      	cbz	r2, 800c1a4 <__kernel_rem_pio2f+0x248>
 800c19c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f10e 0e01 	add.w	lr, lr, #1
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	e784      	b.n	800c0b8 <__kernel_rem_pio2f+0x15c>
 800c1ae:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	e7f5      	b.n	800c1a4 <__kernel_rem_pio2f+0x248>
 800c1b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c1bc:	ab06      	add	r3, sp, #24
 800c1be:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c1c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1c6:	aa06      	add	r2, sp, #24
 800c1c8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800c1cc:	e77d      	b.n	800c0ca <__kernel_rem_pio2f+0x16e>
 800c1ce:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c1d2:	ab06      	add	r3, sp, #24
 800c1d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1dc:	e7f3      	b.n	800c1c6 <__kernel_rem_pio2f+0x26a>
 800c1de:	a906      	add	r1, sp, #24
 800c1e0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800c1e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c1e8:	4302      	orrs	r2, r0
 800c1ea:	e7ad      	b.n	800c148 <__kernel_rem_pio2f+0x1ec>
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c1f2:	2a00      	cmp	r2, #0
 800c1f4:	d0fa      	beq.n	800c1ec <__kernel_rem_pio2f+0x290>
 800c1f6:	a91a      	add	r1, sp, #104	; 0x68
 800c1f8:	eb0a 0208 	add.w	r2, sl, r8
 800c1fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c200:	f10a 0301 	add.w	r3, sl, #1
 800c204:	eb0a 0100 	add.w	r1, sl, r0
 800c208:	4299      	cmp	r1, r3
 800c20a:	da04      	bge.n	800c216 <__kernel_rem_pio2f+0x2ba>
 800c20c:	468a      	mov	sl, r1
 800c20e:	e70e      	b.n	800c02e <__kernel_rem_pio2f+0xd2>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	2001      	movs	r0, #1
 800c214:	e7eb      	b.n	800c1ee <__kernel_rem_pio2f+0x292>
 800c216:	9803      	ldr	r0, [sp, #12]
 800c218:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c21c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c220:	9000      	str	r0, [sp, #0]
 800c222:	ee07 0a90 	vmov	s15, r0
 800c226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c22a:	2000      	movs	r0, #0
 800c22c:	ece2 7a01 	vstmia	r2!, {s15}
 800c230:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c26c <__kernel_rem_pio2f+0x310>
 800c234:	4696      	mov	lr, r2
 800c236:	4548      	cmp	r0, r9
 800c238:	dd06      	ble.n	800c248 <__kernel_rem_pio2f+0x2ec>
 800c23a:	a842      	add	r0, sp, #264	; 0x108
 800c23c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c240:	edc0 7a00 	vstr	s15, [r0]
 800c244:	3301      	adds	r3, #1
 800c246:	e7df      	b.n	800c208 <__kernel_rem_pio2f+0x2ac>
 800c248:	ecfc 6a01 	vldmia	ip!, {s13}
 800c24c:	ed3e 7a01 	vldmdb	lr!, {s14}
 800c250:	3001      	adds	r0, #1
 800c252:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c256:	e7ee      	b.n	800c236 <__kernel_rem_pio2f+0x2da>
 800c258:	3b01      	subs	r3, #1
 800c25a:	e779      	b.n	800c150 <__kernel_rem_pio2f+0x1f4>
 800c25c:	0800f8dc 	.word	0x0800f8dc
 800c260:	0800f8b0 	.word	0x0800f8b0
 800c264:	43800000 	.word	0x43800000
 800c268:	3b800000 	.word	0x3b800000
 800c26c:	00000000 	.word	0x00000000
 800c270:	9b02      	ldr	r3, [sp, #8]
 800c272:	eeb0 0a48 	vmov.f32	s0, s16
 800c276:	1b98      	subs	r0, r3, r6
 800c278:	f000 faa6 	bl	800c7c8 <scalbnf>
 800c27c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c264 <__kernel_rem_pio2f+0x308>
 800c280:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c288:	db1b      	blt.n	800c2c2 <__kernel_rem_pio2f+0x366>
 800c28a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c268 <__kernel_rem_pio2f+0x30c>
 800c28e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c292:	aa06      	add	r2, sp, #24
 800c294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c298:	a906      	add	r1, sp, #24
 800c29a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c29e:	3408      	adds	r4, #8
 800c2a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c2a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2ac:	ee10 3a10 	vmov	r3, s0
 800c2b0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c2b4:	ee17 2a90 	vmov	r2, s15
 800c2b8:	f10a 0301 	add.w	r3, sl, #1
 800c2bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c2c0:	e74c      	b.n	800c15c <__kernel_rem_pio2f+0x200>
 800c2c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2c6:	aa06      	add	r2, sp, #24
 800c2c8:	ee10 3a10 	vmov	r3, s0
 800c2cc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c2d0:	4653      	mov	r3, sl
 800c2d2:	e743      	b.n	800c15c <__kernel_rem_pio2f+0x200>
 800c2d4:	aa42      	add	r2, sp, #264	; 0x108
 800c2d6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c2da:	aa06      	add	r2, sp, #24
 800c2dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c2e0:	9201      	str	r2, [sp, #4]
 800c2e2:	ee07 2a90 	vmov	s15, r2
 800c2e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2ea:	3901      	subs	r1, #1
 800c2ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c2f0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c2f4:	edc0 7a00 	vstr	s15, [r0]
 800c2f8:	e73a      	b.n	800c170 <__kernel_rem_pio2f+0x214>
 800c2fa:	ecf2 6a01 	vldmia	r2!, {s13}
 800c2fe:	ecb6 7a01 	vldmia	r6!, {s14}
 800c302:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c306:	3101      	adds	r1, #1
 800c308:	42b9      	cmp	r1, r7
 800c30a:	dc01      	bgt.n	800c310 <__kernel_rem_pio2f+0x3b4>
 800c30c:	428c      	cmp	r4, r1
 800c30e:	daf4      	bge.n	800c2fa <__kernel_rem_pio2f+0x39e>
 800c310:	aa56      	add	r2, sp, #344	; 0x158
 800c312:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c316:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c31a:	3801      	subs	r0, #1
 800c31c:	3401      	adds	r4, #1
 800c31e:	e72c      	b.n	800c17a <__kernel_rem_pio2f+0x21e>
 800c320:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c322:	2a02      	cmp	r2, #2
 800c324:	dc0a      	bgt.n	800c33c <__kernel_rem_pio2f+0x3e0>
 800c326:	2a00      	cmp	r2, #0
 800c328:	dc61      	bgt.n	800c3ee <__kernel_rem_pio2f+0x492>
 800c32a:	d03c      	beq.n	800c3a6 <__kernel_rem_pio2f+0x44a>
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	f003 0007 	and.w	r0, r3, #7
 800c332:	b057      	add	sp, #348	; 0x15c
 800c334:	ecbd 8b04 	vpop	{d8-d9}
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c33e:	2a03      	cmp	r2, #3
 800c340:	d1f4      	bne.n	800c32c <__kernel_rem_pio2f+0x3d0>
 800c342:	aa2e      	add	r2, sp, #184	; 0xb8
 800c344:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c348:	4608      	mov	r0, r1
 800c34a:	461c      	mov	r4, r3
 800c34c:	2c00      	cmp	r4, #0
 800c34e:	f1a0 0004 	sub.w	r0, r0, #4
 800c352:	dc59      	bgt.n	800c408 <__kernel_rem_pio2f+0x4ac>
 800c354:	4618      	mov	r0, r3
 800c356:	2801      	cmp	r0, #1
 800c358:	f1a1 0104 	sub.w	r1, r1, #4
 800c35c:	dc64      	bgt.n	800c428 <__kernel_rem_pio2f+0x4cc>
 800c35e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800c26c <__kernel_rem_pio2f+0x310>
 800c362:	2b01      	cmp	r3, #1
 800c364:	dc70      	bgt.n	800c448 <__kernel_rem_pio2f+0x4ec>
 800c366:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c36a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c36e:	f1bb 0f00 	cmp.w	fp, #0
 800c372:	d172      	bne.n	800c45a <__kernel_rem_pio2f+0x4fe>
 800c374:	edc5 6a00 	vstr	s13, [r5]
 800c378:	ed85 7a01 	vstr	s14, [r5, #4]
 800c37c:	edc5 7a02 	vstr	s15, [r5, #8]
 800c380:	e7d4      	b.n	800c32c <__kernel_rem_pio2f+0x3d0>
 800c382:	aa2e      	add	r2, sp, #184	; 0xb8
 800c384:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c388:	ed91 7a00 	vldr	s14, [r1]
 800c38c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c390:	3b01      	subs	r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	daf5      	bge.n	800c382 <__kernel_rem_pio2f+0x426>
 800c396:	f1bb 0f00 	cmp.w	fp, #0
 800c39a:	d001      	beq.n	800c3a0 <__kernel_rem_pio2f+0x444>
 800c39c:	eef1 7a67 	vneg.f32	s15, s15
 800c3a0:	edc5 7a00 	vstr	s15, [r5]
 800c3a4:	e7c2      	b.n	800c32c <__kernel_rem_pio2f+0x3d0>
 800c3a6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c26c <__kernel_rem_pio2f+0x310>
 800c3aa:	e7f2      	b.n	800c392 <__kernel_rem_pio2f+0x436>
 800c3ac:	aa2e      	add	r2, sp, #184	; 0xb8
 800c3ae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c3b2:	edd0 7a00 	vldr	s15, [r0]
 800c3b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3ba:	3901      	subs	r1, #1
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	daf5      	bge.n	800c3ac <__kernel_rem_pio2f+0x450>
 800c3c0:	f1bb 0f00 	cmp.w	fp, #0
 800c3c4:	d017      	beq.n	800c3f6 <__kernel_rem_pio2f+0x49a>
 800c3c6:	eef1 7a47 	vneg.f32	s15, s14
 800c3ca:	edc5 7a00 	vstr	s15, [r5]
 800c3ce:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c3d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3d6:	a82f      	add	r0, sp, #188	; 0xbc
 800c3d8:	2101      	movs	r1, #1
 800c3da:	428b      	cmp	r3, r1
 800c3dc:	da0e      	bge.n	800c3fc <__kernel_rem_pio2f+0x4a0>
 800c3de:	f1bb 0f00 	cmp.w	fp, #0
 800c3e2:	d001      	beq.n	800c3e8 <__kernel_rem_pio2f+0x48c>
 800c3e4:	eef1 7a67 	vneg.f32	s15, s15
 800c3e8:	edc5 7a01 	vstr	s15, [r5, #4]
 800c3ec:	e79e      	b.n	800c32c <__kernel_rem_pio2f+0x3d0>
 800c3ee:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800c26c <__kernel_rem_pio2f+0x310>
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	e7e2      	b.n	800c3bc <__kernel_rem_pio2f+0x460>
 800c3f6:	eef0 7a47 	vmov.f32	s15, s14
 800c3fa:	e7e6      	b.n	800c3ca <__kernel_rem_pio2f+0x46e>
 800c3fc:	ecb0 7a01 	vldmia	r0!, {s14}
 800c400:	3101      	adds	r1, #1
 800c402:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c406:	e7e8      	b.n	800c3da <__kernel_rem_pio2f+0x47e>
 800c408:	edd0 7a00 	vldr	s15, [r0]
 800c40c:	edd0 6a01 	vldr	s13, [r0, #4]
 800c410:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c414:	3c01      	subs	r4, #1
 800c416:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c41a:	ed80 7a00 	vstr	s14, [r0]
 800c41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c422:	edc0 7a01 	vstr	s15, [r0, #4]
 800c426:	e791      	b.n	800c34c <__kernel_rem_pio2f+0x3f0>
 800c428:	edd1 7a00 	vldr	s15, [r1]
 800c42c:	edd1 6a01 	vldr	s13, [r1, #4]
 800c430:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c434:	3801      	subs	r0, #1
 800c436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c43a:	ed81 7a00 	vstr	s14, [r1]
 800c43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c442:	edc1 7a01 	vstr	s15, [r1, #4]
 800c446:	e786      	b.n	800c356 <__kernel_rem_pio2f+0x3fa>
 800c448:	aa2e      	add	r2, sp, #184	; 0xb8
 800c44a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c44e:	ed91 7a00 	vldr	s14, [r1]
 800c452:	3b01      	subs	r3, #1
 800c454:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c458:	e783      	b.n	800c362 <__kernel_rem_pio2f+0x406>
 800c45a:	eef1 6a66 	vneg.f32	s13, s13
 800c45e:	eeb1 7a47 	vneg.f32	s14, s14
 800c462:	edc5 6a00 	vstr	s13, [r5]
 800c466:	ed85 7a01 	vstr	s14, [r5, #4]
 800c46a:	eef1 7a67 	vneg.f32	s15, s15
 800c46e:	e785      	b.n	800c37c <__kernel_rem_pio2f+0x420>

0800c470 <__kernel_sinf>:
 800c470:	ee10 3a10 	vmov	r3, s0
 800c474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c478:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c47c:	da04      	bge.n	800c488 <__kernel_sinf+0x18>
 800c47e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c482:	ee17 3a90 	vmov	r3, s15
 800c486:	b35b      	cbz	r3, 800c4e0 <__kernel_sinf+0x70>
 800c488:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c48c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c4e4 <__kernel_sinf+0x74>
 800c490:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c4e8 <__kernel_sinf+0x78>
 800c494:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c498:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c4ec <__kernel_sinf+0x7c>
 800c49c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4a0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c4f0 <__kernel_sinf+0x80>
 800c4a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c4a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c4f4 <__kernel_sinf+0x84>
 800c4ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c4b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c4b4:	b930      	cbnz	r0, 800c4c4 <__kernel_sinf+0x54>
 800c4b6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c4f8 <__kernel_sinf+0x88>
 800c4ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c4be:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c4c2:	4770      	bx	lr
 800c4c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c4c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c4cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c4d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c4d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c4fc <__kernel_sinf+0x8c>
 800c4d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c4dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	2f2ec9d3 	.word	0x2f2ec9d3
 800c4e8:	b2d72f34 	.word	0xb2d72f34
 800c4ec:	3638ef1b 	.word	0x3638ef1b
 800c4f0:	b9500d01 	.word	0xb9500d01
 800c4f4:	3c088889 	.word	0x3c088889
 800c4f8:	be2aaaab 	.word	0xbe2aaaab
 800c4fc:	3e2aaaab 	.word	0x3e2aaaab

0800c500 <fabs>:
 800c500:	ec51 0b10 	vmov	r0, r1, d0
 800c504:	ee10 2a10 	vmov	r2, s0
 800c508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c50c:	ec43 2b10 	vmov	d0, r2, r3
 800c510:	4770      	bx	lr
 800c512:	0000      	movs	r0, r0
 800c514:	0000      	movs	r0, r0
	...

0800c518 <floor>:
 800c518:	ec51 0b10 	vmov	r0, r1, d0
 800c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c524:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c528:	2e13      	cmp	r6, #19
 800c52a:	ee10 5a10 	vmov	r5, s0
 800c52e:	ee10 8a10 	vmov	r8, s0
 800c532:	460c      	mov	r4, r1
 800c534:	dc32      	bgt.n	800c59c <floor+0x84>
 800c536:	2e00      	cmp	r6, #0
 800c538:	da14      	bge.n	800c564 <floor+0x4c>
 800c53a:	a333      	add	r3, pc, #204	; (adr r3, 800c608 <floor+0xf0>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 fea4 	bl	800028c <__adddf3>
 800c544:	2200      	movs	r2, #0
 800c546:	2300      	movs	r3, #0
 800c548:	f7f4 fae6 	bl	8000b18 <__aeabi_dcmpgt>
 800c54c:	b138      	cbz	r0, 800c55e <floor+0x46>
 800c54e:	2c00      	cmp	r4, #0
 800c550:	da57      	bge.n	800c602 <floor+0xea>
 800c552:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c556:	431d      	orrs	r5, r3
 800c558:	d001      	beq.n	800c55e <floor+0x46>
 800c55a:	4c2d      	ldr	r4, [pc, #180]	; (800c610 <floor+0xf8>)
 800c55c:	2500      	movs	r5, #0
 800c55e:	4621      	mov	r1, r4
 800c560:	4628      	mov	r0, r5
 800c562:	e025      	b.n	800c5b0 <floor+0x98>
 800c564:	4f2b      	ldr	r7, [pc, #172]	; (800c614 <floor+0xfc>)
 800c566:	4137      	asrs	r7, r6
 800c568:	ea01 0307 	and.w	r3, r1, r7
 800c56c:	4303      	orrs	r3, r0
 800c56e:	d01f      	beq.n	800c5b0 <floor+0x98>
 800c570:	a325      	add	r3, pc, #148	; (adr r3, 800c608 <floor+0xf0>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f3 fe89 	bl	800028c <__adddf3>
 800c57a:	2200      	movs	r2, #0
 800c57c:	2300      	movs	r3, #0
 800c57e:	f7f4 facb 	bl	8000b18 <__aeabi_dcmpgt>
 800c582:	2800      	cmp	r0, #0
 800c584:	d0eb      	beq.n	800c55e <floor+0x46>
 800c586:	2c00      	cmp	r4, #0
 800c588:	bfbe      	ittt	lt
 800c58a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c58e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c592:	19a4      	addlt	r4, r4, r6
 800c594:	ea24 0407 	bic.w	r4, r4, r7
 800c598:	2500      	movs	r5, #0
 800c59a:	e7e0      	b.n	800c55e <floor+0x46>
 800c59c:	2e33      	cmp	r6, #51	; 0x33
 800c59e:	dd0b      	ble.n	800c5b8 <floor+0xa0>
 800c5a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c5a4:	d104      	bne.n	800c5b0 <floor+0x98>
 800c5a6:	ee10 2a10 	vmov	r2, s0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	f7f3 fe6e 	bl	800028c <__adddf3>
 800c5b0:	ec41 0b10 	vmov	d0, r0, r1
 800c5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c0:	fa23 f707 	lsr.w	r7, r3, r7
 800c5c4:	4207      	tst	r7, r0
 800c5c6:	d0f3      	beq.n	800c5b0 <floor+0x98>
 800c5c8:	a30f      	add	r3, pc, #60	; (adr r3, 800c608 <floor+0xf0>)
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	f7f3 fe5d 	bl	800028c <__adddf3>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f7f4 fa9f 	bl	8000b18 <__aeabi_dcmpgt>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d0bf      	beq.n	800c55e <floor+0x46>
 800c5de:	2c00      	cmp	r4, #0
 800c5e0:	da02      	bge.n	800c5e8 <floor+0xd0>
 800c5e2:	2e14      	cmp	r6, #20
 800c5e4:	d103      	bne.n	800c5ee <floor+0xd6>
 800c5e6:	3401      	adds	r4, #1
 800c5e8:	ea25 0507 	bic.w	r5, r5, r7
 800c5ec:	e7b7      	b.n	800c55e <floor+0x46>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5f4:	fa03 f606 	lsl.w	r6, r3, r6
 800c5f8:	4435      	add	r5, r6
 800c5fa:	4545      	cmp	r5, r8
 800c5fc:	bf38      	it	cc
 800c5fe:	18e4      	addcc	r4, r4, r3
 800c600:	e7f2      	b.n	800c5e8 <floor+0xd0>
 800c602:	2500      	movs	r5, #0
 800c604:	462c      	mov	r4, r5
 800c606:	e7aa      	b.n	800c55e <floor+0x46>
 800c608:	8800759c 	.word	0x8800759c
 800c60c:	7e37e43c 	.word	0x7e37e43c
 800c610:	bff00000 	.word	0xbff00000
 800c614:	000fffff 	.word	0x000fffff

0800c618 <nan>:
 800c618:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c620 <nan+0x8>
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	00000000 	.word	0x00000000
 800c624:	7ff80000 	.word	0x7ff80000

0800c628 <scalbn>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	ec55 4b10 	vmov	r4, r5, d0
 800c62e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c632:	4606      	mov	r6, r0
 800c634:	462b      	mov	r3, r5
 800c636:	b99a      	cbnz	r2, 800c660 <scalbn+0x38>
 800c638:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c63c:	4323      	orrs	r3, r4
 800c63e:	d036      	beq.n	800c6ae <scalbn+0x86>
 800c640:	4b39      	ldr	r3, [pc, #228]	; (800c728 <scalbn+0x100>)
 800c642:	4629      	mov	r1, r5
 800c644:	ee10 0a10 	vmov	r0, s0
 800c648:	2200      	movs	r2, #0
 800c64a:	f7f3 ffd5 	bl	80005f8 <__aeabi_dmul>
 800c64e:	4b37      	ldr	r3, [pc, #220]	; (800c72c <scalbn+0x104>)
 800c650:	429e      	cmp	r6, r3
 800c652:	4604      	mov	r4, r0
 800c654:	460d      	mov	r5, r1
 800c656:	da10      	bge.n	800c67a <scalbn+0x52>
 800c658:	a32b      	add	r3, pc, #172	; (adr r3, 800c708 <scalbn+0xe0>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	e03a      	b.n	800c6d6 <scalbn+0xae>
 800c660:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c664:	428a      	cmp	r2, r1
 800c666:	d10c      	bne.n	800c682 <scalbn+0x5a>
 800c668:	ee10 2a10 	vmov	r2, s0
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 fe0c 	bl	800028c <__adddf3>
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	e019      	b.n	800c6ae <scalbn+0x86>
 800c67a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c67e:	460b      	mov	r3, r1
 800c680:	3a36      	subs	r2, #54	; 0x36
 800c682:	4432      	add	r2, r6
 800c684:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c688:	428a      	cmp	r2, r1
 800c68a:	dd08      	ble.n	800c69e <scalbn+0x76>
 800c68c:	2d00      	cmp	r5, #0
 800c68e:	a120      	add	r1, pc, #128	; (adr r1, 800c710 <scalbn+0xe8>)
 800c690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c694:	da1c      	bge.n	800c6d0 <scalbn+0xa8>
 800c696:	a120      	add	r1, pc, #128	; (adr r1, 800c718 <scalbn+0xf0>)
 800c698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c69c:	e018      	b.n	800c6d0 <scalbn+0xa8>
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	dd08      	ble.n	800c6b4 <scalbn+0x8c>
 800c6a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c6ae:	ec45 4b10 	vmov	d0, r4, r5
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c6b8:	da19      	bge.n	800c6ee <scalbn+0xc6>
 800c6ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c6be:	429e      	cmp	r6, r3
 800c6c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6c4:	dd0a      	ble.n	800c6dc <scalbn+0xb4>
 800c6c6:	a112      	add	r1, pc, #72	; (adr r1, 800c710 <scalbn+0xe8>)
 800c6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1e2      	bne.n	800c696 <scalbn+0x6e>
 800c6d0:	a30f      	add	r3, pc, #60	; (adr r3, 800c710 <scalbn+0xe8>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	f7f3 ff8f 	bl	80005f8 <__aeabi_dmul>
 800c6da:	e7cb      	b.n	800c674 <scalbn+0x4c>
 800c6dc:	a10a      	add	r1, pc, #40	; (adr r1, 800c708 <scalbn+0xe0>)
 800c6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0b8      	beq.n	800c658 <scalbn+0x30>
 800c6e6:	a10e      	add	r1, pc, #56	; (adr r1, 800c720 <scalbn+0xf8>)
 800c6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ec:	e7b4      	b.n	800c658 <scalbn+0x30>
 800c6ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6f2:	3236      	adds	r2, #54	; 0x36
 800c6f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	4b0c      	ldr	r3, [pc, #48]	; (800c730 <scalbn+0x108>)
 800c700:	2200      	movs	r2, #0
 800c702:	e7e8      	b.n	800c6d6 <scalbn+0xae>
 800c704:	f3af 8000 	nop.w
 800c708:	c2f8f359 	.word	0xc2f8f359
 800c70c:	01a56e1f 	.word	0x01a56e1f
 800c710:	8800759c 	.word	0x8800759c
 800c714:	7e37e43c 	.word	0x7e37e43c
 800c718:	8800759c 	.word	0x8800759c
 800c71c:	fe37e43c 	.word	0xfe37e43c
 800c720:	c2f8f359 	.word	0xc2f8f359
 800c724:	81a56e1f 	.word	0x81a56e1f
 800c728:	43500000 	.word	0x43500000
 800c72c:	ffff3cb0 	.word	0xffff3cb0
 800c730:	3c900000 	.word	0x3c900000

0800c734 <fabsf>:
 800c734:	ee10 3a10 	vmov	r3, s0
 800c738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c73c:	ee00 3a10 	vmov	s0, r3
 800c740:	4770      	bx	lr
	...

0800c744 <floorf>:
 800c744:	ee10 3a10 	vmov	r3, s0
 800c748:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c74c:	3a7f      	subs	r2, #127	; 0x7f
 800c74e:	2a16      	cmp	r2, #22
 800c750:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c754:	dc2a      	bgt.n	800c7ac <floorf+0x68>
 800c756:	2a00      	cmp	r2, #0
 800c758:	da11      	bge.n	800c77e <floorf+0x3a>
 800c75a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c7bc <floorf+0x78>
 800c75e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c762:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c76a:	dd05      	ble.n	800c778 <floorf+0x34>
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da23      	bge.n	800c7b8 <floorf+0x74>
 800c770:	4a13      	ldr	r2, [pc, #76]	; (800c7c0 <floorf+0x7c>)
 800c772:	2900      	cmp	r1, #0
 800c774:	bf18      	it	ne
 800c776:	4613      	movne	r3, r2
 800c778:	ee00 3a10 	vmov	s0, r3
 800c77c:	4770      	bx	lr
 800c77e:	4911      	ldr	r1, [pc, #68]	; (800c7c4 <floorf+0x80>)
 800c780:	4111      	asrs	r1, r2
 800c782:	420b      	tst	r3, r1
 800c784:	d0fa      	beq.n	800c77c <floorf+0x38>
 800c786:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c7bc <floorf+0x78>
 800c78a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c78e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c796:	ddef      	ble.n	800c778 <floorf+0x34>
 800c798:	2b00      	cmp	r3, #0
 800c79a:	bfbe      	ittt	lt
 800c79c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c7a0:	fa40 f202 	asrlt.w	r2, r0, r2
 800c7a4:	189b      	addlt	r3, r3, r2
 800c7a6:	ea23 0301 	bic.w	r3, r3, r1
 800c7aa:	e7e5      	b.n	800c778 <floorf+0x34>
 800c7ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7b0:	d3e4      	bcc.n	800c77c <floorf+0x38>
 800c7b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7b6:	4770      	bx	lr
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e7dd      	b.n	800c778 <floorf+0x34>
 800c7bc:	7149f2ca 	.word	0x7149f2ca
 800c7c0:	bf800000 	.word	0xbf800000
 800c7c4:	007fffff 	.word	0x007fffff

0800c7c8 <scalbnf>:
 800c7c8:	ee10 3a10 	vmov	r3, s0
 800c7cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c7d0:	d025      	beq.n	800c81e <scalbnf+0x56>
 800c7d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7d6:	d302      	bcc.n	800c7de <scalbnf+0x16>
 800c7d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7dc:	4770      	bx	lr
 800c7de:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c7e2:	d122      	bne.n	800c82a <scalbnf+0x62>
 800c7e4:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <scalbnf+0xc8>)
 800c7e6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c894 <scalbnf+0xcc>
 800c7ea:	4298      	cmp	r0, r3
 800c7ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7f0:	db16      	blt.n	800c820 <scalbnf+0x58>
 800c7f2:	ee10 3a10 	vmov	r3, s0
 800c7f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c7fa:	3a19      	subs	r2, #25
 800c7fc:	4402      	add	r2, r0
 800c7fe:	2afe      	cmp	r2, #254	; 0xfe
 800c800:	dd15      	ble.n	800c82e <scalbnf+0x66>
 800c802:	ee10 3a10 	vmov	r3, s0
 800c806:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c898 <scalbnf+0xd0>
 800c80a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c89c <scalbnf+0xd4>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	eeb0 7a67 	vmov.f32	s14, s15
 800c814:	bfb8      	it	lt
 800c816:	eef0 7a66 	vmovlt.f32	s15, s13
 800c81a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c81e:	4770      	bx	lr
 800c820:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c8a0 <scalbnf+0xd8>
 800c824:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c828:	4770      	bx	lr
 800c82a:	0dd2      	lsrs	r2, r2, #23
 800c82c:	e7e6      	b.n	800c7fc <scalbnf+0x34>
 800c82e:	2a00      	cmp	r2, #0
 800c830:	dd06      	ble.n	800c840 <scalbnf+0x78>
 800c832:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c836:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c83a:	ee00 3a10 	vmov	s0, r3
 800c83e:	4770      	bx	lr
 800c840:	f112 0f16 	cmn.w	r2, #22
 800c844:	da1a      	bge.n	800c87c <scalbnf+0xb4>
 800c846:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c84a:	4298      	cmp	r0, r3
 800c84c:	ee10 3a10 	vmov	r3, s0
 800c850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c854:	dd0a      	ble.n	800c86c <scalbnf+0xa4>
 800c856:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c898 <scalbnf+0xd0>
 800c85a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c89c <scalbnf+0xd4>
 800c85e:	eef0 7a40 	vmov.f32	s15, s0
 800c862:	2b00      	cmp	r3, #0
 800c864:	bf18      	it	ne
 800c866:	eeb0 0a47 	vmovne.f32	s0, s14
 800c86a:	e7db      	b.n	800c824 <scalbnf+0x5c>
 800c86c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c8a0 <scalbnf+0xd8>
 800c870:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c8a4 <scalbnf+0xdc>
 800c874:	eef0 7a40 	vmov.f32	s15, s0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	e7f3      	b.n	800c864 <scalbnf+0x9c>
 800c87c:	3219      	adds	r2, #25
 800c87e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c882:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c886:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c8a8 <scalbnf+0xe0>
 800c88a:	ee07 3a10 	vmov	s14, r3
 800c88e:	e7c4      	b.n	800c81a <scalbnf+0x52>
 800c890:	ffff3cb0 	.word	0xffff3cb0
 800c894:	4c000000 	.word	0x4c000000
 800c898:	7149f2ca 	.word	0x7149f2ca
 800c89c:	f149f2ca 	.word	0xf149f2ca
 800c8a0:	0da24260 	.word	0x0da24260
 800c8a4:	8da24260 	.word	0x8da24260
 800c8a8:	33000000 	.word	0x33000000

0800c8ac <__errno>:
 800c8ac:	4b01      	ldr	r3, [pc, #4]	; (800c8b4 <__errno+0x8>)
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	2000001c 	.word	0x2000001c

0800c8b8 <__libc_init_array>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	4d0d      	ldr	r5, [pc, #52]	; (800c8f0 <__libc_init_array+0x38>)
 800c8bc:	4c0d      	ldr	r4, [pc, #52]	; (800c8f4 <__libc_init_array+0x3c>)
 800c8be:	1b64      	subs	r4, r4, r5
 800c8c0:	10a4      	asrs	r4, r4, #2
 800c8c2:	2600      	movs	r6, #0
 800c8c4:	42a6      	cmp	r6, r4
 800c8c6:	d109      	bne.n	800c8dc <__libc_init_array+0x24>
 800c8c8:	4d0b      	ldr	r5, [pc, #44]	; (800c8f8 <__libc_init_array+0x40>)
 800c8ca:	4c0c      	ldr	r4, [pc, #48]	; (800c8fc <__libc_init_array+0x44>)
 800c8cc:	f002 fcf8 	bl	800f2c0 <_init>
 800c8d0:	1b64      	subs	r4, r4, r5
 800c8d2:	10a4      	asrs	r4, r4, #2
 800c8d4:	2600      	movs	r6, #0
 800c8d6:	42a6      	cmp	r6, r4
 800c8d8:	d105      	bne.n	800c8e6 <__libc_init_array+0x2e>
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
 800c8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e0:	4798      	blx	r3
 800c8e2:	3601      	adds	r6, #1
 800c8e4:	e7ee      	b.n	800c8c4 <__libc_init_array+0xc>
 800c8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ea:	4798      	blx	r3
 800c8ec:	3601      	adds	r6, #1
 800c8ee:	e7f2      	b.n	800c8d6 <__libc_init_array+0x1e>
 800c8f0:	0800fccc 	.word	0x0800fccc
 800c8f4:	0800fccc 	.word	0x0800fccc
 800c8f8:	0800fccc 	.word	0x0800fccc
 800c8fc:	0800fcd4 	.word	0x0800fcd4

0800c900 <malloc>:
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <malloc+0xc>)
 800c902:	4601      	mov	r1, r0
 800c904:	6818      	ldr	r0, [r3, #0]
 800c906:	f000 b863 	b.w	800c9d0 <_malloc_r>
 800c90a:	bf00      	nop
 800c90c:	2000001c 	.word	0x2000001c

0800c910 <free>:
 800c910:	4b02      	ldr	r3, [pc, #8]	; (800c91c <free+0xc>)
 800c912:	4601      	mov	r1, r0
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f000 b80b 	b.w	800c930 <_free_r>
 800c91a:	bf00      	nop
 800c91c:	2000001c 	.word	0x2000001c

0800c920 <memset>:
 800c920:	4402      	add	r2, r0
 800c922:	4603      	mov	r3, r0
 800c924:	4293      	cmp	r3, r2
 800c926:	d100      	bne.n	800c92a <memset+0xa>
 800c928:	4770      	bx	lr
 800c92a:	f803 1b01 	strb.w	r1, [r3], #1
 800c92e:	e7f9      	b.n	800c924 <memset+0x4>

0800c930 <_free_r>:
 800c930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c932:	2900      	cmp	r1, #0
 800c934:	d048      	beq.n	800c9c8 <_free_r+0x98>
 800c936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c93a:	9001      	str	r0, [sp, #4]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f1a1 0404 	sub.w	r4, r1, #4
 800c942:	bfb8      	it	lt
 800c944:	18e4      	addlt	r4, r4, r3
 800c946:	f001 fba1 	bl	800e08c <__malloc_lock>
 800c94a:	4a20      	ldr	r2, [pc, #128]	; (800c9cc <_free_r+0x9c>)
 800c94c:	9801      	ldr	r0, [sp, #4]
 800c94e:	6813      	ldr	r3, [r2, #0]
 800c950:	4615      	mov	r5, r2
 800c952:	b933      	cbnz	r3, 800c962 <_free_r+0x32>
 800c954:	6063      	str	r3, [r4, #4]
 800c956:	6014      	str	r4, [r2, #0]
 800c958:	b003      	add	sp, #12
 800c95a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c95e:	f001 bb9b 	b.w	800e098 <__malloc_unlock>
 800c962:	42a3      	cmp	r3, r4
 800c964:	d90b      	bls.n	800c97e <_free_r+0x4e>
 800c966:	6821      	ldr	r1, [r4, #0]
 800c968:	1862      	adds	r2, r4, r1
 800c96a:	4293      	cmp	r3, r2
 800c96c:	bf04      	itt	eq
 800c96e:	681a      	ldreq	r2, [r3, #0]
 800c970:	685b      	ldreq	r3, [r3, #4]
 800c972:	6063      	str	r3, [r4, #4]
 800c974:	bf04      	itt	eq
 800c976:	1852      	addeq	r2, r2, r1
 800c978:	6022      	streq	r2, [r4, #0]
 800c97a:	602c      	str	r4, [r5, #0]
 800c97c:	e7ec      	b.n	800c958 <_free_r+0x28>
 800c97e:	461a      	mov	r2, r3
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	b10b      	cbz	r3, 800c988 <_free_r+0x58>
 800c984:	42a3      	cmp	r3, r4
 800c986:	d9fa      	bls.n	800c97e <_free_r+0x4e>
 800c988:	6811      	ldr	r1, [r2, #0]
 800c98a:	1855      	adds	r5, r2, r1
 800c98c:	42a5      	cmp	r5, r4
 800c98e:	d10b      	bne.n	800c9a8 <_free_r+0x78>
 800c990:	6824      	ldr	r4, [r4, #0]
 800c992:	4421      	add	r1, r4
 800c994:	1854      	adds	r4, r2, r1
 800c996:	42a3      	cmp	r3, r4
 800c998:	6011      	str	r1, [r2, #0]
 800c99a:	d1dd      	bne.n	800c958 <_free_r+0x28>
 800c99c:	681c      	ldr	r4, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	6053      	str	r3, [r2, #4]
 800c9a2:	4421      	add	r1, r4
 800c9a4:	6011      	str	r1, [r2, #0]
 800c9a6:	e7d7      	b.n	800c958 <_free_r+0x28>
 800c9a8:	d902      	bls.n	800c9b0 <_free_r+0x80>
 800c9aa:	230c      	movs	r3, #12
 800c9ac:	6003      	str	r3, [r0, #0]
 800c9ae:	e7d3      	b.n	800c958 <_free_r+0x28>
 800c9b0:	6825      	ldr	r5, [r4, #0]
 800c9b2:	1961      	adds	r1, r4, r5
 800c9b4:	428b      	cmp	r3, r1
 800c9b6:	bf04      	itt	eq
 800c9b8:	6819      	ldreq	r1, [r3, #0]
 800c9ba:	685b      	ldreq	r3, [r3, #4]
 800c9bc:	6063      	str	r3, [r4, #4]
 800c9be:	bf04      	itt	eq
 800c9c0:	1949      	addeq	r1, r1, r5
 800c9c2:	6021      	streq	r1, [r4, #0]
 800c9c4:	6054      	str	r4, [r2, #4]
 800c9c6:	e7c7      	b.n	800c958 <_free_r+0x28>
 800c9c8:	b003      	add	sp, #12
 800c9ca:	bd30      	pop	{r4, r5, pc}
 800c9cc:	2000098c 	.word	0x2000098c

0800c9d0 <_malloc_r>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	1ccd      	adds	r5, r1, #3
 800c9d4:	f025 0503 	bic.w	r5, r5, #3
 800c9d8:	3508      	adds	r5, #8
 800c9da:	2d0c      	cmp	r5, #12
 800c9dc:	bf38      	it	cc
 800c9de:	250c      	movcc	r5, #12
 800c9e0:	2d00      	cmp	r5, #0
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	db01      	blt.n	800c9ea <_malloc_r+0x1a>
 800c9e6:	42a9      	cmp	r1, r5
 800c9e8:	d903      	bls.n	800c9f2 <_malloc_r+0x22>
 800c9ea:	230c      	movs	r3, #12
 800c9ec:	6033      	str	r3, [r6, #0]
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9f2:	f001 fb4b 	bl	800e08c <__malloc_lock>
 800c9f6:	4921      	ldr	r1, [pc, #132]	; (800ca7c <_malloc_r+0xac>)
 800c9f8:	680a      	ldr	r2, [r1, #0]
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	b99c      	cbnz	r4, 800ca26 <_malloc_r+0x56>
 800c9fe:	4f20      	ldr	r7, [pc, #128]	; (800ca80 <_malloc_r+0xb0>)
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	b923      	cbnz	r3, 800ca0e <_malloc_r+0x3e>
 800ca04:	4621      	mov	r1, r4
 800ca06:	4630      	mov	r0, r6
 800ca08:	f000 fca6 	bl	800d358 <_sbrk_r>
 800ca0c:	6038      	str	r0, [r7, #0]
 800ca0e:	4629      	mov	r1, r5
 800ca10:	4630      	mov	r0, r6
 800ca12:	f000 fca1 	bl	800d358 <_sbrk_r>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d123      	bne.n	800ca62 <_malloc_r+0x92>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	6033      	str	r3, [r6, #0]
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f001 fb3a 	bl	800e098 <__malloc_unlock>
 800ca24:	e7e3      	b.n	800c9ee <_malloc_r+0x1e>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	1b5b      	subs	r3, r3, r5
 800ca2a:	d417      	bmi.n	800ca5c <_malloc_r+0x8c>
 800ca2c:	2b0b      	cmp	r3, #11
 800ca2e:	d903      	bls.n	800ca38 <_malloc_r+0x68>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	441c      	add	r4, r3
 800ca34:	6025      	str	r5, [r4, #0]
 800ca36:	e004      	b.n	800ca42 <_malloc_r+0x72>
 800ca38:	6863      	ldr	r3, [r4, #4]
 800ca3a:	42a2      	cmp	r2, r4
 800ca3c:	bf0c      	ite	eq
 800ca3e:	600b      	streq	r3, [r1, #0]
 800ca40:	6053      	strne	r3, [r2, #4]
 800ca42:	4630      	mov	r0, r6
 800ca44:	f001 fb28 	bl	800e098 <__malloc_unlock>
 800ca48:	f104 000b 	add.w	r0, r4, #11
 800ca4c:	1d23      	adds	r3, r4, #4
 800ca4e:	f020 0007 	bic.w	r0, r0, #7
 800ca52:	1ac2      	subs	r2, r0, r3
 800ca54:	d0cc      	beq.n	800c9f0 <_malloc_r+0x20>
 800ca56:	1a1b      	subs	r3, r3, r0
 800ca58:	50a3      	str	r3, [r4, r2]
 800ca5a:	e7c9      	b.n	800c9f0 <_malloc_r+0x20>
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	6864      	ldr	r4, [r4, #4]
 800ca60:	e7cc      	b.n	800c9fc <_malloc_r+0x2c>
 800ca62:	1cc4      	adds	r4, r0, #3
 800ca64:	f024 0403 	bic.w	r4, r4, #3
 800ca68:	42a0      	cmp	r0, r4
 800ca6a:	d0e3      	beq.n	800ca34 <_malloc_r+0x64>
 800ca6c:	1a21      	subs	r1, r4, r0
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f000 fc72 	bl	800d358 <_sbrk_r>
 800ca74:	3001      	adds	r0, #1
 800ca76:	d1dd      	bne.n	800ca34 <_malloc_r+0x64>
 800ca78:	e7cf      	b.n	800ca1a <_malloc_r+0x4a>
 800ca7a:	bf00      	nop
 800ca7c:	2000098c 	.word	0x2000098c
 800ca80:	20000990 	.word	0x20000990

0800ca84 <__cvt>:
 800ca84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca88:	ec55 4b10 	vmov	r4, r5, d0
 800ca8c:	2d00      	cmp	r5, #0
 800ca8e:	460e      	mov	r6, r1
 800ca90:	4619      	mov	r1, r3
 800ca92:	462b      	mov	r3, r5
 800ca94:	bfbb      	ittet	lt
 800ca96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca9a:	461d      	movlt	r5, r3
 800ca9c:	2300      	movge	r3, #0
 800ca9e:	232d      	movlt	r3, #45	; 0x2d
 800caa0:	700b      	strb	r3, [r1, #0]
 800caa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800caa8:	4691      	mov	r9, r2
 800caaa:	f023 0820 	bic.w	r8, r3, #32
 800caae:	bfbc      	itt	lt
 800cab0:	4622      	movlt	r2, r4
 800cab2:	4614      	movlt	r4, r2
 800cab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cab8:	d005      	beq.n	800cac6 <__cvt+0x42>
 800caba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cabe:	d100      	bne.n	800cac2 <__cvt+0x3e>
 800cac0:	3601      	adds	r6, #1
 800cac2:	2102      	movs	r1, #2
 800cac4:	e000      	b.n	800cac8 <__cvt+0x44>
 800cac6:	2103      	movs	r1, #3
 800cac8:	ab03      	add	r3, sp, #12
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	ab02      	add	r3, sp, #8
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	ec45 4b10 	vmov	d0, r4, r5
 800cad4:	4653      	mov	r3, sl
 800cad6:	4632      	mov	r2, r6
 800cad8:	f000 fcda 	bl	800d490 <_dtoa_r>
 800cadc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cae0:	4607      	mov	r7, r0
 800cae2:	d102      	bne.n	800caea <__cvt+0x66>
 800cae4:	f019 0f01 	tst.w	r9, #1
 800cae8:	d022      	beq.n	800cb30 <__cvt+0xac>
 800caea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caee:	eb07 0906 	add.w	r9, r7, r6
 800caf2:	d110      	bne.n	800cb16 <__cvt+0x92>
 800caf4:	783b      	ldrb	r3, [r7, #0]
 800caf6:	2b30      	cmp	r3, #48	; 0x30
 800caf8:	d10a      	bne.n	800cb10 <__cvt+0x8c>
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	4620      	mov	r0, r4
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7f3 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb06:	b918      	cbnz	r0, 800cb10 <__cvt+0x8c>
 800cb08:	f1c6 0601 	rsb	r6, r6, #1
 800cb0c:	f8ca 6000 	str.w	r6, [sl]
 800cb10:	f8da 3000 	ldr.w	r3, [sl]
 800cb14:	4499      	add	r9, r3
 800cb16:	2200      	movs	r2, #0
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f3 ffd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb22:	b108      	cbz	r0, 800cb28 <__cvt+0xa4>
 800cb24:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb28:	2230      	movs	r2, #48	; 0x30
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	454b      	cmp	r3, r9
 800cb2e:	d307      	bcc.n	800cb40 <__cvt+0xbc>
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb34:	1bdb      	subs	r3, r3, r7
 800cb36:	4638      	mov	r0, r7
 800cb38:	6013      	str	r3, [r2, #0]
 800cb3a:	b004      	add	sp, #16
 800cb3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb40:	1c59      	adds	r1, r3, #1
 800cb42:	9103      	str	r1, [sp, #12]
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	e7f0      	b.n	800cb2a <__cvt+0xa6>

0800cb48 <__exponent>:
 800cb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2900      	cmp	r1, #0
 800cb4e:	bfb8      	it	lt
 800cb50:	4249      	neglt	r1, r1
 800cb52:	f803 2b02 	strb.w	r2, [r3], #2
 800cb56:	bfb4      	ite	lt
 800cb58:	222d      	movlt	r2, #45	; 0x2d
 800cb5a:	222b      	movge	r2, #43	; 0x2b
 800cb5c:	2909      	cmp	r1, #9
 800cb5e:	7042      	strb	r2, [r0, #1]
 800cb60:	dd2a      	ble.n	800cbb8 <__exponent+0x70>
 800cb62:	f10d 0407 	add.w	r4, sp, #7
 800cb66:	46a4      	mov	ip, r4
 800cb68:	270a      	movs	r7, #10
 800cb6a:	46a6      	mov	lr, r4
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb72:	fb07 1516 	mls	r5, r7, r6, r1
 800cb76:	3530      	adds	r5, #48	; 0x30
 800cb78:	2a63      	cmp	r2, #99	; 0x63
 800cb7a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb82:	4631      	mov	r1, r6
 800cb84:	dcf1      	bgt.n	800cb6a <__exponent+0x22>
 800cb86:	3130      	adds	r1, #48	; 0x30
 800cb88:	f1ae 0502 	sub.w	r5, lr, #2
 800cb8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb90:	1c44      	adds	r4, r0, #1
 800cb92:	4629      	mov	r1, r5
 800cb94:	4561      	cmp	r1, ip
 800cb96:	d30a      	bcc.n	800cbae <__exponent+0x66>
 800cb98:	f10d 0209 	add.w	r2, sp, #9
 800cb9c:	eba2 020e 	sub.w	r2, r2, lr
 800cba0:	4565      	cmp	r5, ip
 800cba2:	bf88      	it	hi
 800cba4:	2200      	movhi	r2, #0
 800cba6:	4413      	add	r3, r2
 800cba8:	1a18      	subs	r0, r3, r0
 800cbaa:	b003      	add	sp, #12
 800cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cbb6:	e7ed      	b.n	800cb94 <__exponent+0x4c>
 800cbb8:	2330      	movs	r3, #48	; 0x30
 800cbba:	3130      	adds	r1, #48	; 0x30
 800cbbc:	7083      	strb	r3, [r0, #2]
 800cbbe:	70c1      	strb	r1, [r0, #3]
 800cbc0:	1d03      	adds	r3, r0, #4
 800cbc2:	e7f1      	b.n	800cba8 <__exponent+0x60>

0800cbc4 <_printf_float>:
 800cbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	ed2d 8b02 	vpush	{d8}
 800cbcc:	b08d      	sub	sp, #52	; 0x34
 800cbce:	460c      	mov	r4, r1
 800cbd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	461f      	mov	r7, r3
 800cbd8:	4605      	mov	r5, r0
 800cbda:	f001 fa45 	bl	800e068 <_localeconv_r>
 800cbde:	f8d0 a000 	ldr.w	sl, [r0]
 800cbe2:	4650      	mov	r0, sl
 800cbe4:	f7f3 faf4 	bl	80001d0 <strlen>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	930a      	str	r3, [sp, #40]	; 0x28
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbf8:	3307      	adds	r3, #7
 800cbfa:	f023 0307 	bic.w	r3, r3, #7
 800cbfe:	f103 0208 	add.w	r2, r3, #8
 800cc02:	f8c8 2000 	str.w	r2, [r8]
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc16:	9307      	str	r3, [sp, #28]
 800cc18:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc1c:	ee08 0a10 	vmov	s16, r0
 800cc20:	4b9f      	ldr	r3, [pc, #636]	; (800cea0 <_printf_float+0x2dc>)
 800cc22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc26:	f04f 32ff 	mov.w	r2, #4294967295
 800cc2a:	f7f3 ff7f 	bl	8000b2c <__aeabi_dcmpun>
 800cc2e:	bb88      	cbnz	r0, 800cc94 <_printf_float+0xd0>
 800cc30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc34:	4b9a      	ldr	r3, [pc, #616]	; (800cea0 <_printf_float+0x2dc>)
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3a:	f7f3 ff59 	bl	8000af0 <__aeabi_dcmple>
 800cc3e:	bb48      	cbnz	r0, 800cc94 <_printf_float+0xd0>
 800cc40:	2200      	movs	r2, #0
 800cc42:	2300      	movs	r3, #0
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 ff48 	bl	8000adc <__aeabi_dcmplt>
 800cc4c:	b110      	cbz	r0, 800cc54 <_printf_float+0x90>
 800cc4e:	232d      	movs	r3, #45	; 0x2d
 800cc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc54:	4b93      	ldr	r3, [pc, #588]	; (800cea4 <_printf_float+0x2e0>)
 800cc56:	4894      	ldr	r0, [pc, #592]	; (800cea8 <_printf_float+0x2e4>)
 800cc58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc5c:	bf94      	ite	ls
 800cc5e:	4698      	movls	r8, r3
 800cc60:	4680      	movhi	r8, r0
 800cc62:	2303      	movs	r3, #3
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	9b05      	ldr	r3, [sp, #20]
 800cc68:	f023 0204 	bic.w	r2, r3, #4
 800cc6c:	6022      	str	r2, [r4, #0]
 800cc6e:	f04f 0900 	mov.w	r9, #0
 800cc72:	9700      	str	r7, [sp, #0]
 800cc74:	4633      	mov	r3, r6
 800cc76:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	f000 f9d8 	bl	800d030 <_printf_common>
 800cc80:	3001      	adds	r0, #1
 800cc82:	f040 8090 	bne.w	800cda6 <_printf_float+0x1e2>
 800cc86:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8a:	b00d      	add	sp, #52	; 0x34
 800cc8c:	ecbd 8b02 	vpop	{d8}
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	4642      	mov	r2, r8
 800cc96:	464b      	mov	r3, r9
 800cc98:	4640      	mov	r0, r8
 800cc9a:	4649      	mov	r1, r9
 800cc9c:	f7f3 ff46 	bl	8000b2c <__aeabi_dcmpun>
 800cca0:	b140      	cbz	r0, 800ccb4 <_printf_float+0xf0>
 800cca2:	464b      	mov	r3, r9
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	bfbc      	itt	lt
 800cca8:	232d      	movlt	r3, #45	; 0x2d
 800ccaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ccae:	487f      	ldr	r0, [pc, #508]	; (800ceac <_printf_float+0x2e8>)
 800ccb0:	4b7f      	ldr	r3, [pc, #508]	; (800ceb0 <_printf_float+0x2ec>)
 800ccb2:	e7d1      	b.n	800cc58 <_printf_float+0x94>
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccba:	9206      	str	r2, [sp, #24]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	d13f      	bne.n	800cd40 <_printf_float+0x17c>
 800ccc0:	2306      	movs	r3, #6
 800ccc2:	6063      	str	r3, [r4, #4]
 800ccc4:	9b05      	ldr	r3, [sp, #20]
 800ccc6:	6861      	ldr	r1, [r4, #4]
 800ccc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cccc:	2300      	movs	r3, #0
 800ccce:	9303      	str	r3, [sp, #12]
 800ccd0:	ab0a      	add	r3, sp, #40	; 0x28
 800ccd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccd6:	ab09      	add	r3, sp, #36	; 0x24
 800ccd8:	ec49 8b10 	vmov	d0, r8, r9
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	6022      	str	r2, [r4, #0]
 800cce0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7ff fecd 	bl	800ca84 <__cvt>
 800ccea:	9b06      	ldr	r3, [sp, #24]
 800ccec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccee:	2b47      	cmp	r3, #71	; 0x47
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	d108      	bne.n	800cd06 <_printf_float+0x142>
 800ccf4:	1cc8      	adds	r0, r1, #3
 800ccf6:	db02      	blt.n	800ccfe <_printf_float+0x13a>
 800ccf8:	6863      	ldr	r3, [r4, #4]
 800ccfa:	4299      	cmp	r1, r3
 800ccfc:	dd41      	ble.n	800cd82 <_printf_float+0x1be>
 800ccfe:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd02:	fa5f fb8b 	uxtb.w	fp, fp
 800cd06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd0a:	d820      	bhi.n	800cd4e <_printf_float+0x18a>
 800cd0c:	3901      	subs	r1, #1
 800cd0e:	465a      	mov	r2, fp
 800cd10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd14:	9109      	str	r1, [sp, #36]	; 0x24
 800cd16:	f7ff ff17 	bl	800cb48 <__exponent>
 800cd1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd1c:	1813      	adds	r3, r2, r0
 800cd1e:	2a01      	cmp	r2, #1
 800cd20:	4681      	mov	r9, r0
 800cd22:	6123      	str	r3, [r4, #16]
 800cd24:	dc02      	bgt.n	800cd2c <_printf_float+0x168>
 800cd26:	6822      	ldr	r2, [r4, #0]
 800cd28:	07d2      	lsls	r2, r2, #31
 800cd2a:	d501      	bpl.n	800cd30 <_printf_float+0x16c>
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	6123      	str	r3, [r4, #16]
 800cd30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d09c      	beq.n	800cc72 <_printf_float+0xae>
 800cd38:	232d      	movs	r3, #45	; 0x2d
 800cd3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd3e:	e798      	b.n	800cc72 <_printf_float+0xae>
 800cd40:	9a06      	ldr	r2, [sp, #24]
 800cd42:	2a47      	cmp	r2, #71	; 0x47
 800cd44:	d1be      	bne.n	800ccc4 <_printf_float+0x100>
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1bc      	bne.n	800ccc4 <_printf_float+0x100>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e7b9      	b.n	800ccc2 <_printf_float+0xfe>
 800cd4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd52:	d118      	bne.n	800cd86 <_printf_float+0x1c2>
 800cd54:	2900      	cmp	r1, #0
 800cd56:	6863      	ldr	r3, [r4, #4]
 800cd58:	dd0b      	ble.n	800cd72 <_printf_float+0x1ae>
 800cd5a:	6121      	str	r1, [r4, #16]
 800cd5c:	b913      	cbnz	r3, 800cd64 <_printf_float+0x1a0>
 800cd5e:	6822      	ldr	r2, [r4, #0]
 800cd60:	07d0      	lsls	r0, r2, #31
 800cd62:	d502      	bpl.n	800cd6a <_printf_float+0x1a6>
 800cd64:	3301      	adds	r3, #1
 800cd66:	440b      	add	r3, r1
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd6c:	f04f 0900 	mov.w	r9, #0
 800cd70:	e7de      	b.n	800cd30 <_printf_float+0x16c>
 800cd72:	b913      	cbnz	r3, 800cd7a <_printf_float+0x1b6>
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	07d2      	lsls	r2, r2, #31
 800cd78:	d501      	bpl.n	800cd7e <_printf_float+0x1ba>
 800cd7a:	3302      	adds	r3, #2
 800cd7c:	e7f4      	b.n	800cd68 <_printf_float+0x1a4>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e7f2      	b.n	800cd68 <_printf_float+0x1a4>
 800cd82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd88:	4299      	cmp	r1, r3
 800cd8a:	db05      	blt.n	800cd98 <_printf_float+0x1d4>
 800cd8c:	6823      	ldr	r3, [r4, #0]
 800cd8e:	6121      	str	r1, [r4, #16]
 800cd90:	07d8      	lsls	r0, r3, #31
 800cd92:	d5ea      	bpl.n	800cd6a <_printf_float+0x1a6>
 800cd94:	1c4b      	adds	r3, r1, #1
 800cd96:	e7e7      	b.n	800cd68 <_printf_float+0x1a4>
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	bfd4      	ite	le
 800cd9c:	f1c1 0202 	rsble	r2, r1, #2
 800cda0:	2201      	movgt	r2, #1
 800cda2:	4413      	add	r3, r2
 800cda4:	e7e0      	b.n	800cd68 <_printf_float+0x1a4>
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	055a      	lsls	r2, r3, #21
 800cdaa:	d407      	bmi.n	800cdbc <_printf_float+0x1f8>
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	4642      	mov	r2, r8
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b8      	blx	r7
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d12c      	bne.n	800ce14 <_printf_float+0x250>
 800cdba:	e764      	b.n	800cc86 <_printf_float+0xc2>
 800cdbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdc0:	f240 80e0 	bls.w	800cf84 <_printf_float+0x3c0>
 800cdc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f7f3 fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d034      	beq.n	800ce3e <_printf_float+0x27a>
 800cdd4:	4a37      	ldr	r2, [pc, #220]	; (800ceb4 <_printf_float+0x2f0>)
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f af51 	beq.w	800cc86 <_printf_float+0xc2>
 800cde4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cde8:	429a      	cmp	r2, r3
 800cdea:	db02      	blt.n	800cdf2 <_printf_float+0x22e>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	07d8      	lsls	r0, r3, #31
 800cdf0:	d510      	bpl.n	800ce14 <_printf_float+0x250>
 800cdf2:	ee18 3a10 	vmov	r3, s16
 800cdf6:	4652      	mov	r2, sl
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47b8      	blx	r7
 800cdfe:	3001      	adds	r0, #1
 800ce00:	f43f af41 	beq.w	800cc86 <_printf_float+0xc2>
 800ce04:	f04f 0800 	mov.w	r8, #0
 800ce08:	f104 091a 	add.w	r9, r4, #26
 800ce0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	4543      	cmp	r3, r8
 800ce12:	dc09      	bgt.n	800ce28 <_printf_float+0x264>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	079b      	lsls	r3, r3, #30
 800ce18:	f100 8105 	bmi.w	800d026 <_printf_float+0x462>
 800ce1c:	68e0      	ldr	r0, [r4, #12]
 800ce1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce20:	4298      	cmp	r0, r3
 800ce22:	bfb8      	it	lt
 800ce24:	4618      	movlt	r0, r3
 800ce26:	e730      	b.n	800cc8a <_printf_float+0xc6>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	464a      	mov	r2, r9
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b8      	blx	r7
 800ce32:	3001      	adds	r0, #1
 800ce34:	f43f af27 	beq.w	800cc86 <_printf_float+0xc2>
 800ce38:	f108 0801 	add.w	r8, r8, #1
 800ce3c:	e7e6      	b.n	800ce0c <_printf_float+0x248>
 800ce3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	dc39      	bgt.n	800ceb8 <_printf_float+0x2f4>
 800ce44:	4a1b      	ldr	r2, [pc, #108]	; (800ceb4 <_printf_float+0x2f0>)
 800ce46:	2301      	movs	r3, #1
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f43f af19 	beq.w	800cc86 <_printf_float+0xc2>
 800ce54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	d102      	bne.n	800ce62 <_printf_float+0x29e>
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	07d9      	lsls	r1, r3, #31
 800ce60:	d5d8      	bpl.n	800ce14 <_printf_float+0x250>
 800ce62:	ee18 3a10 	vmov	r3, s16
 800ce66:	4652      	mov	r2, sl
 800ce68:	4631      	mov	r1, r6
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	47b8      	blx	r7
 800ce6e:	3001      	adds	r0, #1
 800ce70:	f43f af09 	beq.w	800cc86 <_printf_float+0xc2>
 800ce74:	f04f 0900 	mov.w	r9, #0
 800ce78:	f104 0a1a 	add.w	sl, r4, #26
 800ce7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce7e:	425b      	negs	r3, r3
 800ce80:	454b      	cmp	r3, r9
 800ce82:	dc01      	bgt.n	800ce88 <_printf_float+0x2c4>
 800ce84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce86:	e792      	b.n	800cdae <_printf_float+0x1ea>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	47b8      	blx	r7
 800ce92:	3001      	adds	r0, #1
 800ce94:	f43f aef7 	beq.w	800cc86 <_printf_float+0xc2>
 800ce98:	f109 0901 	add.w	r9, r9, #1
 800ce9c:	e7ee      	b.n	800ce7c <_printf_float+0x2b8>
 800ce9e:	bf00      	nop
 800cea0:	7fefffff 	.word	0x7fefffff
 800cea4:	0800f8ec 	.word	0x0800f8ec
 800cea8:	0800f8f0 	.word	0x0800f8f0
 800ceac:	0800f8f8 	.word	0x0800f8f8
 800ceb0:	0800f8f4 	.word	0x0800f8f4
 800ceb4:	0800f8fc 	.word	0x0800f8fc
 800ceb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cebc:	429a      	cmp	r2, r3
 800cebe:	bfa8      	it	ge
 800cec0:	461a      	movge	r2, r3
 800cec2:	2a00      	cmp	r2, #0
 800cec4:	4691      	mov	r9, r2
 800cec6:	dc37      	bgt.n	800cf38 <_printf_float+0x374>
 800cec8:	f04f 0b00 	mov.w	fp, #0
 800cecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ced0:	f104 021a 	add.w	r2, r4, #26
 800ced4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ced6:	9305      	str	r3, [sp, #20]
 800ced8:	eba3 0309 	sub.w	r3, r3, r9
 800cedc:	455b      	cmp	r3, fp
 800cede:	dc33      	bgt.n	800cf48 <_printf_float+0x384>
 800cee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee4:	429a      	cmp	r2, r3
 800cee6:	db3b      	blt.n	800cf60 <_printf_float+0x39c>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	07da      	lsls	r2, r3, #31
 800ceec:	d438      	bmi.n	800cf60 <_printf_float+0x39c>
 800ceee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cef0:	9b05      	ldr	r3, [sp, #20]
 800cef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	eba2 0901 	sub.w	r9, r2, r1
 800cefa:	4599      	cmp	r9, r3
 800cefc:	bfa8      	it	ge
 800cefe:	4699      	movge	r9, r3
 800cf00:	f1b9 0f00 	cmp.w	r9, #0
 800cf04:	dc35      	bgt.n	800cf72 <_printf_float+0x3ae>
 800cf06:	f04f 0800 	mov.w	r8, #0
 800cf0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf0e:	f104 0a1a 	add.w	sl, r4, #26
 800cf12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf16:	1a9b      	subs	r3, r3, r2
 800cf18:	eba3 0309 	sub.w	r3, r3, r9
 800cf1c:	4543      	cmp	r3, r8
 800cf1e:	f77f af79 	ble.w	800ce14 <_printf_float+0x250>
 800cf22:	2301      	movs	r3, #1
 800cf24:	4652      	mov	r2, sl
 800cf26:	4631      	mov	r1, r6
 800cf28:	4628      	mov	r0, r5
 800cf2a:	47b8      	blx	r7
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	f43f aeaa 	beq.w	800cc86 <_printf_float+0xc2>
 800cf32:	f108 0801 	add.w	r8, r8, #1
 800cf36:	e7ec      	b.n	800cf12 <_printf_float+0x34e>
 800cf38:	4613      	mov	r3, r2
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4642      	mov	r2, r8
 800cf3e:	4628      	mov	r0, r5
 800cf40:	47b8      	blx	r7
 800cf42:	3001      	adds	r0, #1
 800cf44:	d1c0      	bne.n	800cec8 <_printf_float+0x304>
 800cf46:	e69e      	b.n	800cc86 <_printf_float+0xc2>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	9205      	str	r2, [sp, #20]
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	f43f ae97 	beq.w	800cc86 <_printf_float+0xc2>
 800cf58:	9a05      	ldr	r2, [sp, #20]
 800cf5a:	f10b 0b01 	add.w	fp, fp, #1
 800cf5e:	e7b9      	b.n	800ced4 <_printf_float+0x310>
 800cf60:	ee18 3a10 	vmov	r3, s16
 800cf64:	4652      	mov	r2, sl
 800cf66:	4631      	mov	r1, r6
 800cf68:	4628      	mov	r0, r5
 800cf6a:	47b8      	blx	r7
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d1be      	bne.n	800ceee <_printf_float+0x32a>
 800cf70:	e689      	b.n	800cc86 <_printf_float+0xc2>
 800cf72:	9a05      	ldr	r2, [sp, #20]
 800cf74:	464b      	mov	r3, r9
 800cf76:	4442      	add	r2, r8
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b8      	blx	r7
 800cf7e:	3001      	adds	r0, #1
 800cf80:	d1c1      	bne.n	800cf06 <_printf_float+0x342>
 800cf82:	e680      	b.n	800cc86 <_printf_float+0xc2>
 800cf84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf86:	2a01      	cmp	r2, #1
 800cf88:	dc01      	bgt.n	800cf8e <_printf_float+0x3ca>
 800cf8a:	07db      	lsls	r3, r3, #31
 800cf8c:	d538      	bpl.n	800d000 <_printf_float+0x43c>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	4642      	mov	r2, r8
 800cf92:	4631      	mov	r1, r6
 800cf94:	4628      	mov	r0, r5
 800cf96:	47b8      	blx	r7
 800cf98:	3001      	adds	r0, #1
 800cf9a:	f43f ae74 	beq.w	800cc86 <_printf_float+0xc2>
 800cf9e:	ee18 3a10 	vmov	r3, s16
 800cfa2:	4652      	mov	r2, sl
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	47b8      	blx	r7
 800cfaa:	3001      	adds	r0, #1
 800cfac:	f43f ae6b 	beq.w	800cc86 <_printf_float+0xc2>
 800cfb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f7f3 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfbc:	b9d8      	cbnz	r0, 800cff6 <_printf_float+0x432>
 800cfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc0:	f108 0201 	add.w	r2, r8, #1
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	d10e      	bne.n	800cfee <_printf_float+0x42a>
 800cfd0:	e659      	b.n	800cc86 <_printf_float+0xc2>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4628      	mov	r0, r5
 800cfda:	47b8      	blx	r7
 800cfdc:	3001      	adds	r0, #1
 800cfde:	f43f ae52 	beq.w	800cc86 <_printf_float+0xc2>
 800cfe2:	f108 0801 	add.w	r8, r8, #1
 800cfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	4543      	cmp	r3, r8
 800cfec:	dcf1      	bgt.n	800cfd2 <_printf_float+0x40e>
 800cfee:	464b      	mov	r3, r9
 800cff0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cff4:	e6dc      	b.n	800cdb0 <_printf_float+0x1ec>
 800cff6:	f04f 0800 	mov.w	r8, #0
 800cffa:	f104 0a1a 	add.w	sl, r4, #26
 800cffe:	e7f2      	b.n	800cfe6 <_printf_float+0x422>
 800d000:	2301      	movs	r3, #1
 800d002:	4642      	mov	r2, r8
 800d004:	e7df      	b.n	800cfc6 <_printf_float+0x402>
 800d006:	2301      	movs	r3, #1
 800d008:	464a      	mov	r2, r9
 800d00a:	4631      	mov	r1, r6
 800d00c:	4628      	mov	r0, r5
 800d00e:	47b8      	blx	r7
 800d010:	3001      	adds	r0, #1
 800d012:	f43f ae38 	beq.w	800cc86 <_printf_float+0xc2>
 800d016:	f108 0801 	add.w	r8, r8, #1
 800d01a:	68e3      	ldr	r3, [r4, #12]
 800d01c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d01e:	1a5b      	subs	r3, r3, r1
 800d020:	4543      	cmp	r3, r8
 800d022:	dcf0      	bgt.n	800d006 <_printf_float+0x442>
 800d024:	e6fa      	b.n	800ce1c <_printf_float+0x258>
 800d026:	f04f 0800 	mov.w	r8, #0
 800d02a:	f104 0919 	add.w	r9, r4, #25
 800d02e:	e7f4      	b.n	800d01a <_printf_float+0x456>

0800d030 <_printf_common>:
 800d030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d034:	4616      	mov	r6, r2
 800d036:	4699      	mov	r9, r3
 800d038:	688a      	ldr	r2, [r1, #8]
 800d03a:	690b      	ldr	r3, [r1, #16]
 800d03c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d040:	4293      	cmp	r3, r2
 800d042:	bfb8      	it	lt
 800d044:	4613      	movlt	r3, r2
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d04c:	4607      	mov	r7, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	b10a      	cbz	r2, 800d056 <_printf_common+0x26>
 800d052:	3301      	adds	r3, #1
 800d054:	6033      	str	r3, [r6, #0]
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	0699      	lsls	r1, r3, #26
 800d05a:	bf42      	ittt	mi
 800d05c:	6833      	ldrmi	r3, [r6, #0]
 800d05e:	3302      	addmi	r3, #2
 800d060:	6033      	strmi	r3, [r6, #0]
 800d062:	6825      	ldr	r5, [r4, #0]
 800d064:	f015 0506 	ands.w	r5, r5, #6
 800d068:	d106      	bne.n	800d078 <_printf_common+0x48>
 800d06a:	f104 0a19 	add.w	sl, r4, #25
 800d06e:	68e3      	ldr	r3, [r4, #12]
 800d070:	6832      	ldr	r2, [r6, #0]
 800d072:	1a9b      	subs	r3, r3, r2
 800d074:	42ab      	cmp	r3, r5
 800d076:	dc26      	bgt.n	800d0c6 <_printf_common+0x96>
 800d078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d07c:	1e13      	subs	r3, r2, #0
 800d07e:	6822      	ldr	r2, [r4, #0]
 800d080:	bf18      	it	ne
 800d082:	2301      	movne	r3, #1
 800d084:	0692      	lsls	r2, r2, #26
 800d086:	d42b      	bmi.n	800d0e0 <_printf_common+0xb0>
 800d088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d08c:	4649      	mov	r1, r9
 800d08e:	4638      	mov	r0, r7
 800d090:	47c0      	blx	r8
 800d092:	3001      	adds	r0, #1
 800d094:	d01e      	beq.n	800d0d4 <_printf_common+0xa4>
 800d096:	6823      	ldr	r3, [r4, #0]
 800d098:	68e5      	ldr	r5, [r4, #12]
 800d09a:	6832      	ldr	r2, [r6, #0]
 800d09c:	f003 0306 	and.w	r3, r3, #6
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	bf08      	it	eq
 800d0a4:	1aad      	subeq	r5, r5, r2
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	6922      	ldr	r2, [r4, #16]
 800d0aa:	bf0c      	ite	eq
 800d0ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0b0:	2500      	movne	r5, #0
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	bfc4      	itt	gt
 800d0b6:	1a9b      	subgt	r3, r3, r2
 800d0b8:	18ed      	addgt	r5, r5, r3
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	341a      	adds	r4, #26
 800d0be:	42b5      	cmp	r5, r6
 800d0c0:	d11a      	bne.n	800d0f8 <_printf_common+0xc8>
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	e008      	b.n	800d0d8 <_printf_common+0xa8>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4652      	mov	r2, sl
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	47c0      	blx	r8
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d103      	bne.n	800d0dc <_printf_common+0xac>
 800d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0dc:	3501      	adds	r5, #1
 800d0de:	e7c6      	b.n	800d06e <_printf_common+0x3e>
 800d0e0:	18e1      	adds	r1, r4, r3
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	2030      	movs	r0, #48	; 0x30
 800d0e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0ea:	4422      	add	r2, r4
 800d0ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0f4:	3302      	adds	r3, #2
 800d0f6:	e7c7      	b.n	800d088 <_printf_common+0x58>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	4638      	mov	r0, r7
 800d100:	47c0      	blx	r8
 800d102:	3001      	adds	r0, #1
 800d104:	d0e6      	beq.n	800d0d4 <_printf_common+0xa4>
 800d106:	3601      	adds	r6, #1
 800d108:	e7d9      	b.n	800d0be <_printf_common+0x8e>
	...

0800d10c <_printf_i>:
 800d10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d110:	460c      	mov	r4, r1
 800d112:	4691      	mov	r9, r2
 800d114:	7e27      	ldrb	r7, [r4, #24]
 800d116:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d118:	2f78      	cmp	r7, #120	; 0x78
 800d11a:	4680      	mov	r8, r0
 800d11c:	469a      	mov	sl, r3
 800d11e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d122:	d807      	bhi.n	800d134 <_printf_i+0x28>
 800d124:	2f62      	cmp	r7, #98	; 0x62
 800d126:	d80a      	bhi.n	800d13e <_printf_i+0x32>
 800d128:	2f00      	cmp	r7, #0
 800d12a:	f000 80d8 	beq.w	800d2de <_printf_i+0x1d2>
 800d12e:	2f58      	cmp	r7, #88	; 0x58
 800d130:	f000 80a3 	beq.w	800d27a <_printf_i+0x16e>
 800d134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d13c:	e03a      	b.n	800d1b4 <_printf_i+0xa8>
 800d13e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d142:	2b15      	cmp	r3, #21
 800d144:	d8f6      	bhi.n	800d134 <_printf_i+0x28>
 800d146:	a001      	add	r0, pc, #4	; (adr r0, 800d14c <_printf_i+0x40>)
 800d148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d14c:	0800d1a5 	.word	0x0800d1a5
 800d150:	0800d1b9 	.word	0x0800d1b9
 800d154:	0800d135 	.word	0x0800d135
 800d158:	0800d135 	.word	0x0800d135
 800d15c:	0800d135 	.word	0x0800d135
 800d160:	0800d135 	.word	0x0800d135
 800d164:	0800d1b9 	.word	0x0800d1b9
 800d168:	0800d135 	.word	0x0800d135
 800d16c:	0800d135 	.word	0x0800d135
 800d170:	0800d135 	.word	0x0800d135
 800d174:	0800d135 	.word	0x0800d135
 800d178:	0800d2c5 	.word	0x0800d2c5
 800d17c:	0800d1e9 	.word	0x0800d1e9
 800d180:	0800d2a7 	.word	0x0800d2a7
 800d184:	0800d135 	.word	0x0800d135
 800d188:	0800d135 	.word	0x0800d135
 800d18c:	0800d2e7 	.word	0x0800d2e7
 800d190:	0800d135 	.word	0x0800d135
 800d194:	0800d1e9 	.word	0x0800d1e9
 800d198:	0800d135 	.word	0x0800d135
 800d19c:	0800d135 	.word	0x0800d135
 800d1a0:	0800d2af 	.word	0x0800d2af
 800d1a4:	680b      	ldr	r3, [r1, #0]
 800d1a6:	1d1a      	adds	r2, r3, #4
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	600a      	str	r2, [r1, #0]
 800d1ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e0a3      	b.n	800d300 <_printf_i+0x1f4>
 800d1b8:	6825      	ldr	r5, [r4, #0]
 800d1ba:	6808      	ldr	r0, [r1, #0]
 800d1bc:	062e      	lsls	r6, r5, #24
 800d1be:	f100 0304 	add.w	r3, r0, #4
 800d1c2:	d50a      	bpl.n	800d1da <_printf_i+0xce>
 800d1c4:	6805      	ldr	r5, [r0, #0]
 800d1c6:	600b      	str	r3, [r1, #0]
 800d1c8:	2d00      	cmp	r5, #0
 800d1ca:	da03      	bge.n	800d1d4 <_printf_i+0xc8>
 800d1cc:	232d      	movs	r3, #45	; 0x2d
 800d1ce:	426d      	negs	r5, r5
 800d1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d4:	485e      	ldr	r0, [pc, #376]	; (800d350 <_printf_i+0x244>)
 800d1d6:	230a      	movs	r3, #10
 800d1d8:	e019      	b.n	800d20e <_printf_i+0x102>
 800d1da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1de:	6805      	ldr	r5, [r0, #0]
 800d1e0:	600b      	str	r3, [r1, #0]
 800d1e2:	bf18      	it	ne
 800d1e4:	b22d      	sxthne	r5, r5
 800d1e6:	e7ef      	b.n	800d1c8 <_printf_i+0xbc>
 800d1e8:	680b      	ldr	r3, [r1, #0]
 800d1ea:	6825      	ldr	r5, [r4, #0]
 800d1ec:	1d18      	adds	r0, r3, #4
 800d1ee:	6008      	str	r0, [r1, #0]
 800d1f0:	0628      	lsls	r0, r5, #24
 800d1f2:	d501      	bpl.n	800d1f8 <_printf_i+0xec>
 800d1f4:	681d      	ldr	r5, [r3, #0]
 800d1f6:	e002      	b.n	800d1fe <_printf_i+0xf2>
 800d1f8:	0669      	lsls	r1, r5, #25
 800d1fa:	d5fb      	bpl.n	800d1f4 <_printf_i+0xe8>
 800d1fc:	881d      	ldrh	r5, [r3, #0]
 800d1fe:	4854      	ldr	r0, [pc, #336]	; (800d350 <_printf_i+0x244>)
 800d200:	2f6f      	cmp	r7, #111	; 0x6f
 800d202:	bf0c      	ite	eq
 800d204:	2308      	moveq	r3, #8
 800d206:	230a      	movne	r3, #10
 800d208:	2100      	movs	r1, #0
 800d20a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d20e:	6866      	ldr	r6, [r4, #4]
 800d210:	60a6      	str	r6, [r4, #8]
 800d212:	2e00      	cmp	r6, #0
 800d214:	bfa2      	ittt	ge
 800d216:	6821      	ldrge	r1, [r4, #0]
 800d218:	f021 0104 	bicge.w	r1, r1, #4
 800d21c:	6021      	strge	r1, [r4, #0]
 800d21e:	b90d      	cbnz	r5, 800d224 <_printf_i+0x118>
 800d220:	2e00      	cmp	r6, #0
 800d222:	d04d      	beq.n	800d2c0 <_printf_i+0x1b4>
 800d224:	4616      	mov	r6, r2
 800d226:	fbb5 f1f3 	udiv	r1, r5, r3
 800d22a:	fb03 5711 	mls	r7, r3, r1, r5
 800d22e:	5dc7      	ldrb	r7, [r0, r7]
 800d230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d234:	462f      	mov	r7, r5
 800d236:	42bb      	cmp	r3, r7
 800d238:	460d      	mov	r5, r1
 800d23a:	d9f4      	bls.n	800d226 <_printf_i+0x11a>
 800d23c:	2b08      	cmp	r3, #8
 800d23e:	d10b      	bne.n	800d258 <_printf_i+0x14c>
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	07df      	lsls	r7, r3, #31
 800d244:	d508      	bpl.n	800d258 <_printf_i+0x14c>
 800d246:	6923      	ldr	r3, [r4, #16]
 800d248:	6861      	ldr	r1, [r4, #4]
 800d24a:	4299      	cmp	r1, r3
 800d24c:	bfde      	ittt	le
 800d24e:	2330      	movle	r3, #48	; 0x30
 800d250:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d254:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d258:	1b92      	subs	r2, r2, r6
 800d25a:	6122      	str	r2, [r4, #16]
 800d25c:	f8cd a000 	str.w	sl, [sp]
 800d260:	464b      	mov	r3, r9
 800d262:	aa03      	add	r2, sp, #12
 800d264:	4621      	mov	r1, r4
 800d266:	4640      	mov	r0, r8
 800d268:	f7ff fee2 	bl	800d030 <_printf_common>
 800d26c:	3001      	adds	r0, #1
 800d26e:	d14c      	bne.n	800d30a <_printf_i+0x1fe>
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
 800d274:	b004      	add	sp, #16
 800d276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d27a:	4835      	ldr	r0, [pc, #212]	; (800d350 <_printf_i+0x244>)
 800d27c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d280:	6823      	ldr	r3, [r4, #0]
 800d282:	680e      	ldr	r6, [r1, #0]
 800d284:	061f      	lsls	r7, r3, #24
 800d286:	f856 5b04 	ldr.w	r5, [r6], #4
 800d28a:	600e      	str	r6, [r1, #0]
 800d28c:	d514      	bpl.n	800d2b8 <_printf_i+0x1ac>
 800d28e:	07d9      	lsls	r1, r3, #31
 800d290:	bf44      	itt	mi
 800d292:	f043 0320 	orrmi.w	r3, r3, #32
 800d296:	6023      	strmi	r3, [r4, #0]
 800d298:	b91d      	cbnz	r5, 800d2a2 <_printf_i+0x196>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	f023 0320 	bic.w	r3, r3, #32
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	e7b0      	b.n	800d208 <_printf_i+0xfc>
 800d2a6:	6823      	ldr	r3, [r4, #0]
 800d2a8:	f043 0320 	orr.w	r3, r3, #32
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	2378      	movs	r3, #120	; 0x78
 800d2b0:	4828      	ldr	r0, [pc, #160]	; (800d354 <_printf_i+0x248>)
 800d2b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2b6:	e7e3      	b.n	800d280 <_printf_i+0x174>
 800d2b8:	065e      	lsls	r6, r3, #25
 800d2ba:	bf48      	it	mi
 800d2bc:	b2ad      	uxthmi	r5, r5
 800d2be:	e7e6      	b.n	800d28e <_printf_i+0x182>
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	e7bb      	b.n	800d23c <_printf_i+0x130>
 800d2c4:	680b      	ldr	r3, [r1, #0]
 800d2c6:	6826      	ldr	r6, [r4, #0]
 800d2c8:	6960      	ldr	r0, [r4, #20]
 800d2ca:	1d1d      	adds	r5, r3, #4
 800d2cc:	600d      	str	r5, [r1, #0]
 800d2ce:	0635      	lsls	r5, r6, #24
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	d501      	bpl.n	800d2d8 <_printf_i+0x1cc>
 800d2d4:	6018      	str	r0, [r3, #0]
 800d2d6:	e002      	b.n	800d2de <_printf_i+0x1d2>
 800d2d8:	0671      	lsls	r1, r6, #25
 800d2da:	d5fb      	bpl.n	800d2d4 <_printf_i+0x1c8>
 800d2dc:	8018      	strh	r0, [r3, #0]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6123      	str	r3, [r4, #16]
 800d2e2:	4616      	mov	r6, r2
 800d2e4:	e7ba      	b.n	800d25c <_printf_i+0x150>
 800d2e6:	680b      	ldr	r3, [r1, #0]
 800d2e8:	1d1a      	adds	r2, r3, #4
 800d2ea:	600a      	str	r2, [r1, #0]
 800d2ec:	681e      	ldr	r6, [r3, #0]
 800d2ee:	6862      	ldr	r2, [r4, #4]
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7f2 ff74 	bl	80001e0 <memchr>
 800d2f8:	b108      	cbz	r0, 800d2fe <_printf_i+0x1f2>
 800d2fa:	1b80      	subs	r0, r0, r6
 800d2fc:	6060      	str	r0, [r4, #4]
 800d2fe:	6863      	ldr	r3, [r4, #4]
 800d300:	6123      	str	r3, [r4, #16]
 800d302:	2300      	movs	r3, #0
 800d304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d308:	e7a8      	b.n	800d25c <_printf_i+0x150>
 800d30a:	6923      	ldr	r3, [r4, #16]
 800d30c:	4632      	mov	r2, r6
 800d30e:	4649      	mov	r1, r9
 800d310:	4640      	mov	r0, r8
 800d312:	47d0      	blx	sl
 800d314:	3001      	adds	r0, #1
 800d316:	d0ab      	beq.n	800d270 <_printf_i+0x164>
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	079b      	lsls	r3, r3, #30
 800d31c:	d413      	bmi.n	800d346 <_printf_i+0x23a>
 800d31e:	68e0      	ldr	r0, [r4, #12]
 800d320:	9b03      	ldr	r3, [sp, #12]
 800d322:	4298      	cmp	r0, r3
 800d324:	bfb8      	it	lt
 800d326:	4618      	movlt	r0, r3
 800d328:	e7a4      	b.n	800d274 <_printf_i+0x168>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4632      	mov	r2, r6
 800d32e:	4649      	mov	r1, r9
 800d330:	4640      	mov	r0, r8
 800d332:	47d0      	blx	sl
 800d334:	3001      	adds	r0, #1
 800d336:	d09b      	beq.n	800d270 <_printf_i+0x164>
 800d338:	3501      	adds	r5, #1
 800d33a:	68e3      	ldr	r3, [r4, #12]
 800d33c:	9903      	ldr	r1, [sp, #12]
 800d33e:	1a5b      	subs	r3, r3, r1
 800d340:	42ab      	cmp	r3, r5
 800d342:	dcf2      	bgt.n	800d32a <_printf_i+0x21e>
 800d344:	e7eb      	b.n	800d31e <_printf_i+0x212>
 800d346:	2500      	movs	r5, #0
 800d348:	f104 0619 	add.w	r6, r4, #25
 800d34c:	e7f5      	b.n	800d33a <_printf_i+0x22e>
 800d34e:	bf00      	nop
 800d350:	0800f8fe 	.word	0x0800f8fe
 800d354:	0800f90f 	.word	0x0800f90f

0800d358 <_sbrk_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d06      	ldr	r5, [pc, #24]	; (800d374 <_sbrk_r+0x1c>)
 800d35c:	2300      	movs	r3, #0
 800d35e:	4604      	mov	r4, r0
 800d360:	4608      	mov	r0, r1
 800d362:	602b      	str	r3, [r5, #0]
 800d364:	f7f7 fdbe 	bl	8004ee4 <_sbrk>
 800d368:	1c43      	adds	r3, r0, #1
 800d36a:	d102      	bne.n	800d372 <_sbrk_r+0x1a>
 800d36c:	682b      	ldr	r3, [r5, #0]
 800d36e:	b103      	cbz	r3, 800d372 <_sbrk_r+0x1a>
 800d370:	6023      	str	r3, [r4, #0]
 800d372:	bd38      	pop	{r3, r4, r5, pc}
 800d374:	200009f8 	.word	0x200009f8

0800d378 <quorem>:
 800d378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	6903      	ldr	r3, [r0, #16]
 800d37e:	690c      	ldr	r4, [r1, #16]
 800d380:	42a3      	cmp	r3, r4
 800d382:	4607      	mov	r7, r0
 800d384:	f2c0 8081 	blt.w	800d48a <quorem+0x112>
 800d388:	3c01      	subs	r4, #1
 800d38a:	f101 0814 	add.w	r8, r1, #20
 800d38e:	f100 0514 	add.w	r5, r0, #20
 800d392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d39c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3b0:	d331      	bcc.n	800d416 <quorem+0x9e>
 800d3b2:	f04f 0e00 	mov.w	lr, #0
 800d3b6:	4640      	mov	r0, r8
 800d3b8:	46ac      	mov	ip, r5
 800d3ba:	46f2      	mov	sl, lr
 800d3bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3c0:	b293      	uxth	r3, r2
 800d3c2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d3d0:	0c12      	lsrs	r2, r2, #16
 800d3d2:	f8dc a000 	ldr.w	sl, [ip]
 800d3d6:	fb06 e202 	mla	r2, r6, r2, lr
 800d3da:	fa13 f38a 	uxtah	r3, r3, sl
 800d3de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3e2:	fa1f fa82 	uxth.w	sl, r2
 800d3e6:	f8dc 2000 	ldr.w	r2, [ip]
 800d3ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d3ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3f8:	4581      	cmp	r9, r0
 800d3fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d3fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d402:	d2db      	bcs.n	800d3bc <quorem+0x44>
 800d404:	f855 300b 	ldr.w	r3, [r5, fp]
 800d408:	b92b      	cbnz	r3, 800d416 <quorem+0x9e>
 800d40a:	9b01      	ldr	r3, [sp, #4]
 800d40c:	3b04      	subs	r3, #4
 800d40e:	429d      	cmp	r5, r3
 800d410:	461a      	mov	r2, r3
 800d412:	d32e      	bcc.n	800d472 <quorem+0xfa>
 800d414:	613c      	str	r4, [r7, #16]
 800d416:	4638      	mov	r0, r7
 800d418:	f001 f8c2 	bl	800e5a0 <__mcmp>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	db24      	blt.n	800d46a <quorem+0xf2>
 800d420:	3601      	adds	r6, #1
 800d422:	4628      	mov	r0, r5
 800d424:	f04f 0c00 	mov.w	ip, #0
 800d428:	f858 2b04 	ldr.w	r2, [r8], #4
 800d42c:	f8d0 e000 	ldr.w	lr, [r0]
 800d430:	b293      	uxth	r3, r2
 800d432:	ebac 0303 	sub.w	r3, ip, r3
 800d436:	0c12      	lsrs	r2, r2, #16
 800d438:	fa13 f38e 	uxtah	r3, r3, lr
 800d43c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d444:	b29b      	uxth	r3, r3
 800d446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d44a:	45c1      	cmp	r9, r8
 800d44c:	f840 3b04 	str.w	r3, [r0], #4
 800d450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d454:	d2e8      	bcs.n	800d428 <quorem+0xb0>
 800d456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d45e:	b922      	cbnz	r2, 800d46a <quorem+0xf2>
 800d460:	3b04      	subs	r3, #4
 800d462:	429d      	cmp	r5, r3
 800d464:	461a      	mov	r2, r3
 800d466:	d30a      	bcc.n	800d47e <quorem+0x106>
 800d468:	613c      	str	r4, [r7, #16]
 800d46a:	4630      	mov	r0, r6
 800d46c:	b003      	add	sp, #12
 800d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d472:	6812      	ldr	r2, [r2, #0]
 800d474:	3b04      	subs	r3, #4
 800d476:	2a00      	cmp	r2, #0
 800d478:	d1cc      	bne.n	800d414 <quorem+0x9c>
 800d47a:	3c01      	subs	r4, #1
 800d47c:	e7c7      	b.n	800d40e <quorem+0x96>
 800d47e:	6812      	ldr	r2, [r2, #0]
 800d480:	3b04      	subs	r3, #4
 800d482:	2a00      	cmp	r2, #0
 800d484:	d1f0      	bne.n	800d468 <quorem+0xf0>
 800d486:	3c01      	subs	r4, #1
 800d488:	e7eb      	b.n	800d462 <quorem+0xea>
 800d48a:	2000      	movs	r0, #0
 800d48c:	e7ee      	b.n	800d46c <quorem+0xf4>
	...

0800d490 <_dtoa_r>:
 800d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d494:	ed2d 8b02 	vpush	{d8}
 800d498:	ec57 6b10 	vmov	r6, r7, d0
 800d49c:	b095      	sub	sp, #84	; 0x54
 800d49e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4a4:	9105      	str	r1, [sp, #20]
 800d4a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4b0:	b975      	cbnz	r5, 800d4d0 <_dtoa_r+0x40>
 800d4b2:	2010      	movs	r0, #16
 800d4b4:	f7ff fa24 	bl	800c900 <malloc>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	6260      	str	r0, [r4, #36]	; 0x24
 800d4bc:	b920      	cbnz	r0, 800d4c8 <_dtoa_r+0x38>
 800d4be:	4bb2      	ldr	r3, [pc, #712]	; (800d788 <_dtoa_r+0x2f8>)
 800d4c0:	21ea      	movs	r1, #234	; 0xea
 800d4c2:	48b2      	ldr	r0, [pc, #712]	; (800d78c <_dtoa_r+0x2fc>)
 800d4c4:	f001 f97c 	bl	800e7c0 <__assert_func>
 800d4c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4cc:	6005      	str	r5, [r0, #0]
 800d4ce:	60c5      	str	r5, [r0, #12]
 800d4d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	b151      	cbz	r1, 800d4ec <_dtoa_r+0x5c>
 800d4d6:	685a      	ldr	r2, [r3, #4]
 800d4d8:	604a      	str	r2, [r1, #4]
 800d4da:	2301      	movs	r3, #1
 800d4dc:	4093      	lsls	r3, r2
 800d4de:	608b      	str	r3, [r1, #8]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fe1f 	bl	800e124 <_Bfree>
 800d4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	1e3b      	subs	r3, r7, #0
 800d4ee:	bfb9      	ittee	lt
 800d4f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d4f4:	9303      	strlt	r3, [sp, #12]
 800d4f6:	2300      	movge	r3, #0
 800d4f8:	f8c8 3000 	strge.w	r3, [r8]
 800d4fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d500:	4ba3      	ldr	r3, [pc, #652]	; (800d790 <_dtoa_r+0x300>)
 800d502:	bfbc      	itt	lt
 800d504:	2201      	movlt	r2, #1
 800d506:	f8c8 2000 	strlt.w	r2, [r8]
 800d50a:	ea33 0309 	bics.w	r3, r3, r9
 800d50e:	d11b      	bne.n	800d548 <_dtoa_r+0xb8>
 800d510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d512:	f242 730f 	movw	r3, #9999	; 0x270f
 800d516:	6013      	str	r3, [r2, #0]
 800d518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d51c:	4333      	orrs	r3, r6
 800d51e:	f000 857a 	beq.w	800e016 <_dtoa_r+0xb86>
 800d522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d524:	b963      	cbnz	r3, 800d540 <_dtoa_r+0xb0>
 800d526:	4b9b      	ldr	r3, [pc, #620]	; (800d794 <_dtoa_r+0x304>)
 800d528:	e024      	b.n	800d574 <_dtoa_r+0xe4>
 800d52a:	4b9b      	ldr	r3, [pc, #620]	; (800d798 <_dtoa_r+0x308>)
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	3308      	adds	r3, #8
 800d530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d532:	6013      	str	r3, [r2, #0]
 800d534:	9800      	ldr	r0, [sp, #0]
 800d536:	b015      	add	sp, #84	; 0x54
 800d538:	ecbd 8b02 	vpop	{d8}
 800d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d540:	4b94      	ldr	r3, [pc, #592]	; (800d794 <_dtoa_r+0x304>)
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	3303      	adds	r3, #3
 800d546:	e7f3      	b.n	800d530 <_dtoa_r+0xa0>
 800d548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d54c:	2200      	movs	r2, #0
 800d54e:	ec51 0b17 	vmov	r0, r1, d7
 800d552:	2300      	movs	r3, #0
 800d554:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d558:	f7f3 fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d55c:	4680      	mov	r8, r0
 800d55e:	b158      	cbz	r0, 800d578 <_dtoa_r+0xe8>
 800d560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d562:	2301      	movs	r3, #1
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8551 	beq.w	800e010 <_dtoa_r+0xb80>
 800d56e:	488b      	ldr	r0, [pc, #556]	; (800d79c <_dtoa_r+0x30c>)
 800d570:	6018      	str	r0, [r3, #0]
 800d572:	1e43      	subs	r3, r0, #1
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	e7dd      	b.n	800d534 <_dtoa_r+0xa4>
 800d578:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d57c:	aa12      	add	r2, sp, #72	; 0x48
 800d57e:	a913      	add	r1, sp, #76	; 0x4c
 800d580:	4620      	mov	r0, r4
 800d582:	f001 f8b1 	bl	800e6e8 <__d2b>
 800d586:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d58a:	4683      	mov	fp, r0
 800d58c:	2d00      	cmp	r5, #0
 800d58e:	d07c      	beq.n	800d68a <_dtoa_r+0x1fa>
 800d590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d592:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d59a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d59e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5aa:	4b7d      	ldr	r3, [pc, #500]	; (800d7a0 <_dtoa_r+0x310>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	f7f2 fe69 	bl	8000288 <__aeabi_dsub>
 800d5b6:	a36e      	add	r3, pc, #440	; (adr r3, 800d770 <_dtoa_r+0x2e0>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	f7f3 f81c 	bl	80005f8 <__aeabi_dmul>
 800d5c0:	a36d      	add	r3, pc, #436	; (adr r3, 800d778 <_dtoa_r+0x2e8>)
 800d5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c6:	f7f2 fe61 	bl	800028c <__adddf3>
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	460f      	mov	r7, r1
 800d5d0:	f7f2 ffa8 	bl	8000524 <__aeabi_i2d>
 800d5d4:	a36a      	add	r3, pc, #424	; (adr r3, 800d780 <_dtoa_r+0x2f0>)
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f3 f80d 	bl	80005f8 <__aeabi_dmul>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	4639      	mov	r1, r7
 800d5e6:	f7f2 fe51 	bl	800028c <__adddf3>
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	f7f3 fab3 	bl	8000b58 <__aeabi_d2iz>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4682      	mov	sl, r0
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f7f3 fa6e 	bl	8000adc <__aeabi_dcmplt>
 800d600:	b148      	cbz	r0, 800d616 <_dtoa_r+0x186>
 800d602:	4650      	mov	r0, sl
 800d604:	f7f2 ff8e 	bl	8000524 <__aeabi_i2d>
 800d608:	4632      	mov	r2, r6
 800d60a:	463b      	mov	r3, r7
 800d60c:	f7f3 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d610:	b908      	cbnz	r0, 800d616 <_dtoa_r+0x186>
 800d612:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d616:	f1ba 0f16 	cmp.w	sl, #22
 800d61a:	d854      	bhi.n	800d6c6 <_dtoa_r+0x236>
 800d61c:	4b61      	ldr	r3, [pc, #388]	; (800d7a4 <_dtoa_r+0x314>)
 800d61e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d62a:	f7f3 fa57 	bl	8000adc <__aeabi_dcmplt>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d04b      	beq.n	800d6ca <_dtoa_r+0x23a>
 800d632:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d636:	2300      	movs	r3, #0
 800d638:	930e      	str	r3, [sp, #56]	; 0x38
 800d63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d63c:	1b5d      	subs	r5, r3, r5
 800d63e:	1e6b      	subs	r3, r5, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	bf43      	ittte	mi
 800d644:	2300      	movmi	r3, #0
 800d646:	f1c5 0801 	rsbmi	r8, r5, #1
 800d64a:	9304      	strmi	r3, [sp, #16]
 800d64c:	f04f 0800 	movpl.w	r8, #0
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	db3b      	blt.n	800d6ce <_dtoa_r+0x23e>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d65c:	4453      	add	r3, sl
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	2300      	movs	r3, #0
 800d662:	9306      	str	r3, [sp, #24]
 800d664:	9b05      	ldr	r3, [sp, #20]
 800d666:	2b09      	cmp	r3, #9
 800d668:	d869      	bhi.n	800d73e <_dtoa_r+0x2ae>
 800d66a:	2b05      	cmp	r3, #5
 800d66c:	bfc4      	itt	gt
 800d66e:	3b04      	subgt	r3, #4
 800d670:	9305      	strgt	r3, [sp, #20]
 800d672:	9b05      	ldr	r3, [sp, #20]
 800d674:	f1a3 0302 	sub.w	r3, r3, #2
 800d678:	bfcc      	ite	gt
 800d67a:	2500      	movgt	r5, #0
 800d67c:	2501      	movle	r5, #1
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d869      	bhi.n	800d756 <_dtoa_r+0x2c6>
 800d682:	e8df f003 	tbb	[pc, r3]
 800d686:	4e2c      	.short	0x4e2c
 800d688:	5a4c      	.short	0x5a4c
 800d68a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d68e:	441d      	add	r5, r3
 800d690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d694:	2b20      	cmp	r3, #32
 800d696:	bfc1      	itttt	gt
 800d698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d69c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6a0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d6a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6a8:	bfda      	itte	le
 800d6aa:	f1c3 0320 	rsble	r3, r3, #32
 800d6ae:	fa06 f003 	lslle.w	r0, r6, r3
 800d6b2:	4318      	orrgt	r0, r3
 800d6b4:	f7f2 ff26 	bl	8000504 <__aeabi_ui2d>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6c0:	3d01      	subs	r5, #1
 800d6c2:	9310      	str	r3, [sp, #64]	; 0x40
 800d6c4:	e771      	b.n	800d5aa <_dtoa_r+0x11a>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e7b6      	b.n	800d638 <_dtoa_r+0x1a8>
 800d6ca:	900e      	str	r0, [sp, #56]	; 0x38
 800d6cc:	e7b5      	b.n	800d63a <_dtoa_r+0x1aa>
 800d6ce:	f1ca 0300 	rsb	r3, sl, #0
 800d6d2:	9306      	str	r3, [sp, #24]
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	eba8 080a 	sub.w	r8, r8, sl
 800d6da:	930d      	str	r3, [sp, #52]	; 0x34
 800d6dc:	e7c2      	b.n	800d664 <_dtoa_r+0x1d4>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	9308      	str	r3, [sp, #32]
 800d6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	dc39      	bgt.n	800d75c <_dtoa_r+0x2cc>
 800d6e8:	f04f 0901 	mov.w	r9, #1
 800d6ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800d6f0:	464b      	mov	r3, r9
 800d6f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d6f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	6042      	str	r2, [r0, #4]
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	f102 0614 	add.w	r6, r2, #20
 800d702:	429e      	cmp	r6, r3
 800d704:	6841      	ldr	r1, [r0, #4]
 800d706:	d92f      	bls.n	800d768 <_dtoa_r+0x2d8>
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 fccb 	bl	800e0a4 <_Balloc>
 800d70e:	9000      	str	r0, [sp, #0]
 800d710:	2800      	cmp	r0, #0
 800d712:	d14b      	bne.n	800d7ac <_dtoa_r+0x31c>
 800d714:	4b24      	ldr	r3, [pc, #144]	; (800d7a8 <_dtoa_r+0x318>)
 800d716:	4602      	mov	r2, r0
 800d718:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d71c:	e6d1      	b.n	800d4c2 <_dtoa_r+0x32>
 800d71e:	2301      	movs	r3, #1
 800d720:	e7de      	b.n	800d6e0 <_dtoa_r+0x250>
 800d722:	2300      	movs	r3, #0
 800d724:	9308      	str	r3, [sp, #32]
 800d726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d728:	eb0a 0903 	add.w	r9, sl, r3
 800d72c:	f109 0301 	add.w	r3, r9, #1
 800d730:	2b01      	cmp	r3, #1
 800d732:	9301      	str	r3, [sp, #4]
 800d734:	bfb8      	it	lt
 800d736:	2301      	movlt	r3, #1
 800d738:	e7dd      	b.n	800d6f6 <_dtoa_r+0x266>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e7f2      	b.n	800d724 <_dtoa_r+0x294>
 800d73e:	2501      	movs	r5, #1
 800d740:	2300      	movs	r3, #0
 800d742:	9305      	str	r3, [sp, #20]
 800d744:	9508      	str	r5, [sp, #32]
 800d746:	f04f 39ff 	mov.w	r9, #4294967295
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d750:	2312      	movs	r3, #18
 800d752:	9209      	str	r2, [sp, #36]	; 0x24
 800d754:	e7cf      	b.n	800d6f6 <_dtoa_r+0x266>
 800d756:	2301      	movs	r3, #1
 800d758:	9308      	str	r3, [sp, #32]
 800d75a:	e7f4      	b.n	800d746 <_dtoa_r+0x2b6>
 800d75c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d760:	f8cd 9004 	str.w	r9, [sp, #4]
 800d764:	464b      	mov	r3, r9
 800d766:	e7c6      	b.n	800d6f6 <_dtoa_r+0x266>
 800d768:	3101      	adds	r1, #1
 800d76a:	6041      	str	r1, [r0, #4]
 800d76c:	0052      	lsls	r2, r2, #1
 800d76e:	e7c6      	b.n	800d6fe <_dtoa_r+0x26e>
 800d770:	636f4361 	.word	0x636f4361
 800d774:	3fd287a7 	.word	0x3fd287a7
 800d778:	8b60c8b3 	.word	0x8b60c8b3
 800d77c:	3fc68a28 	.word	0x3fc68a28
 800d780:	509f79fb 	.word	0x509f79fb
 800d784:	3fd34413 	.word	0x3fd34413
 800d788:	0800f92d 	.word	0x0800f92d
 800d78c:	0800f944 	.word	0x0800f944
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	0800f929 	.word	0x0800f929
 800d798:	0800f920 	.word	0x0800f920
 800d79c:	0800f8fd 	.word	0x0800f8fd
 800d7a0:	3ff80000 	.word	0x3ff80000
 800d7a4:	0800fa40 	.word	0x0800fa40
 800d7a8:	0800f9a3 	.word	0x0800f9a3
 800d7ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7ae:	9a00      	ldr	r2, [sp, #0]
 800d7b0:	601a      	str	r2, [r3, #0]
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	2b0e      	cmp	r3, #14
 800d7b6:	f200 80ad 	bhi.w	800d914 <_dtoa_r+0x484>
 800d7ba:	2d00      	cmp	r5, #0
 800d7bc:	f000 80aa 	beq.w	800d914 <_dtoa_r+0x484>
 800d7c0:	f1ba 0f00 	cmp.w	sl, #0
 800d7c4:	dd36      	ble.n	800d834 <_dtoa_r+0x3a4>
 800d7c6:	4ac3      	ldr	r2, [pc, #780]	; (800dad4 <_dtoa_r+0x644>)
 800d7c8:	f00a 030f 	and.w	r3, sl, #15
 800d7cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7d0:	ed93 7b00 	vldr	d7, [r3]
 800d7d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d7d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d7dc:	eeb0 8a47 	vmov.f32	s16, s14
 800d7e0:	eef0 8a67 	vmov.f32	s17, s15
 800d7e4:	d016      	beq.n	800d814 <_dtoa_r+0x384>
 800d7e6:	4bbc      	ldr	r3, [pc, #752]	; (800dad8 <_dtoa_r+0x648>)
 800d7e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7f0:	f7f3 f82c 	bl	800084c <__aeabi_ddiv>
 800d7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f8:	f007 070f 	and.w	r7, r7, #15
 800d7fc:	2503      	movs	r5, #3
 800d7fe:	4eb6      	ldr	r6, [pc, #728]	; (800dad8 <_dtoa_r+0x648>)
 800d800:	b957      	cbnz	r7, 800d818 <_dtoa_r+0x388>
 800d802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d806:	ec53 2b18 	vmov	r2, r3, d8
 800d80a:	f7f3 f81f 	bl	800084c <__aeabi_ddiv>
 800d80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d812:	e029      	b.n	800d868 <_dtoa_r+0x3d8>
 800d814:	2502      	movs	r5, #2
 800d816:	e7f2      	b.n	800d7fe <_dtoa_r+0x36e>
 800d818:	07f9      	lsls	r1, r7, #31
 800d81a:	d508      	bpl.n	800d82e <_dtoa_r+0x39e>
 800d81c:	ec51 0b18 	vmov	r0, r1, d8
 800d820:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d824:	f7f2 fee8 	bl	80005f8 <__aeabi_dmul>
 800d828:	ec41 0b18 	vmov	d8, r0, r1
 800d82c:	3501      	adds	r5, #1
 800d82e:	107f      	asrs	r7, r7, #1
 800d830:	3608      	adds	r6, #8
 800d832:	e7e5      	b.n	800d800 <_dtoa_r+0x370>
 800d834:	f000 80a6 	beq.w	800d984 <_dtoa_r+0x4f4>
 800d838:	f1ca 0600 	rsb	r6, sl, #0
 800d83c:	4ba5      	ldr	r3, [pc, #660]	; (800dad4 <_dtoa_r+0x644>)
 800d83e:	4fa6      	ldr	r7, [pc, #664]	; (800dad8 <_dtoa_r+0x648>)
 800d840:	f006 020f 	and.w	r2, r6, #15
 800d844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d850:	f7f2 fed2 	bl	80005f8 <__aeabi_dmul>
 800d854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d858:	1136      	asrs	r6, r6, #4
 800d85a:	2300      	movs	r3, #0
 800d85c:	2502      	movs	r5, #2
 800d85e:	2e00      	cmp	r6, #0
 800d860:	f040 8085 	bne.w	800d96e <_dtoa_r+0x4de>
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1d2      	bne.n	800d80e <_dtoa_r+0x37e>
 800d868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 808c 	beq.w	800d988 <_dtoa_r+0x4f8>
 800d870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d874:	4b99      	ldr	r3, [pc, #612]	; (800dadc <_dtoa_r+0x64c>)
 800d876:	2200      	movs	r2, #0
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f3 f92e 	bl	8000adc <__aeabi_dcmplt>
 800d880:	2800      	cmp	r0, #0
 800d882:	f000 8081 	beq.w	800d988 <_dtoa_r+0x4f8>
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d07d      	beq.n	800d988 <_dtoa_r+0x4f8>
 800d88c:	f1b9 0f00 	cmp.w	r9, #0
 800d890:	dd3c      	ble.n	800d90c <_dtoa_r+0x47c>
 800d892:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d896:	9307      	str	r3, [sp, #28]
 800d898:	2200      	movs	r2, #0
 800d89a:	4b91      	ldr	r3, [pc, #580]	; (800dae0 <_dtoa_r+0x650>)
 800d89c:	4630      	mov	r0, r6
 800d89e:	4639      	mov	r1, r7
 800d8a0:	f7f2 feaa 	bl	80005f8 <__aeabi_dmul>
 800d8a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8a8:	3501      	adds	r5, #1
 800d8aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d8ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f7f2 fe36 	bl	8000524 <__aeabi_i2d>
 800d8b8:	4632      	mov	r2, r6
 800d8ba:	463b      	mov	r3, r7
 800d8bc:	f7f2 fe9c 	bl	80005f8 <__aeabi_dmul>
 800d8c0:	4b88      	ldr	r3, [pc, #544]	; (800dae4 <_dtoa_r+0x654>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f7f2 fce2 	bl	800028c <__adddf3>
 800d8c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8d0:	9303      	str	r3, [sp, #12]
 800d8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d15c      	bne.n	800d992 <_dtoa_r+0x502>
 800d8d8:	4b83      	ldr	r3, [pc, #524]	; (800dae8 <_dtoa_r+0x658>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	4630      	mov	r0, r6
 800d8de:	4639      	mov	r1, r7
 800d8e0:	f7f2 fcd2 	bl	8000288 <__aeabi_dsub>
 800d8e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	f7f3 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	f040 8296 	bne.w	800de22 <_dtoa_r+0x992>
 800d8f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d900:	4639      	mov	r1, r7
 800d902:	f7f3 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800d906:	2800      	cmp	r0, #0
 800d908:	f040 8288 	bne.w	800de1c <_dtoa_r+0x98c>
 800d90c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d916:	2b00      	cmp	r3, #0
 800d918:	f2c0 8158 	blt.w	800dbcc <_dtoa_r+0x73c>
 800d91c:	f1ba 0f0e 	cmp.w	sl, #14
 800d920:	f300 8154 	bgt.w	800dbcc <_dtoa_r+0x73c>
 800d924:	4b6b      	ldr	r3, [pc, #428]	; (800dad4 <_dtoa_r+0x644>)
 800d926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d92a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d930:	2b00      	cmp	r3, #0
 800d932:	f280 80e3 	bge.w	800dafc <_dtoa_r+0x66c>
 800d936:	9b01      	ldr	r3, [sp, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f300 80df 	bgt.w	800dafc <_dtoa_r+0x66c>
 800d93e:	f040 826d 	bne.w	800de1c <_dtoa_r+0x98c>
 800d942:	4b69      	ldr	r3, [pc, #420]	; (800dae8 <_dtoa_r+0x658>)
 800d944:	2200      	movs	r2, #0
 800d946:	4640      	mov	r0, r8
 800d948:	4649      	mov	r1, r9
 800d94a:	f7f2 fe55 	bl	80005f8 <__aeabi_dmul>
 800d94e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d952:	f7f3 f8d7 	bl	8000b04 <__aeabi_dcmpge>
 800d956:	9e01      	ldr	r6, [sp, #4]
 800d958:	4637      	mov	r7, r6
 800d95a:	2800      	cmp	r0, #0
 800d95c:	f040 8243 	bne.w	800dde6 <_dtoa_r+0x956>
 800d960:	9d00      	ldr	r5, [sp, #0]
 800d962:	2331      	movs	r3, #49	; 0x31
 800d964:	f805 3b01 	strb.w	r3, [r5], #1
 800d968:	f10a 0a01 	add.w	sl, sl, #1
 800d96c:	e23f      	b.n	800ddee <_dtoa_r+0x95e>
 800d96e:	07f2      	lsls	r2, r6, #31
 800d970:	d505      	bpl.n	800d97e <_dtoa_r+0x4ee>
 800d972:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	3501      	adds	r5, #1
 800d97c:	2301      	movs	r3, #1
 800d97e:	1076      	asrs	r6, r6, #1
 800d980:	3708      	adds	r7, #8
 800d982:	e76c      	b.n	800d85e <_dtoa_r+0x3ce>
 800d984:	2502      	movs	r5, #2
 800d986:	e76f      	b.n	800d868 <_dtoa_r+0x3d8>
 800d988:	9b01      	ldr	r3, [sp, #4]
 800d98a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d98e:	930c      	str	r3, [sp, #48]	; 0x30
 800d990:	e78d      	b.n	800d8ae <_dtoa_r+0x41e>
 800d992:	9900      	ldr	r1, [sp, #0]
 800d994:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d998:	4b4e      	ldr	r3, [pc, #312]	; (800dad4 <_dtoa_r+0x644>)
 800d99a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d99e:	4401      	add	r1, r0
 800d9a0:	9102      	str	r1, [sp, #8]
 800d9a2:	9908      	ldr	r1, [sp, #32]
 800d9a4:	eeb0 8a47 	vmov.f32	s16, s14
 800d9a8:	eef0 8a67 	vmov.f32	s17, s15
 800d9ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	d045      	beq.n	800da44 <_dtoa_r+0x5b4>
 800d9b8:	494c      	ldr	r1, [pc, #304]	; (800daec <_dtoa_r+0x65c>)
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	f7f2 ff46 	bl	800084c <__aeabi_ddiv>
 800d9c0:	ec53 2b18 	vmov	r2, r3, d8
 800d9c4:	f7f2 fc60 	bl	8000288 <__aeabi_dsub>
 800d9c8:	9d00      	ldr	r5, [sp, #0]
 800d9ca:	ec41 0b18 	vmov	d8, r0, r1
 800d9ce:	4639      	mov	r1, r7
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7f3 f8c1 	bl	8000b58 <__aeabi_d2iz>
 800d9d6:	900c      	str	r0, [sp, #48]	; 0x30
 800d9d8:	f7f2 fda4 	bl	8000524 <__aeabi_i2d>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	f7f2 fc50 	bl	8000288 <__aeabi_dsub>
 800d9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ea:	3330      	adds	r3, #48	; 0x30
 800d9ec:	f805 3b01 	strb.w	r3, [r5], #1
 800d9f0:	ec53 2b18 	vmov	r2, r3, d8
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	f7f3 f870 	bl	8000adc <__aeabi_dcmplt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d165      	bne.n	800dacc <_dtoa_r+0x63c>
 800da00:	4632      	mov	r2, r6
 800da02:	463b      	mov	r3, r7
 800da04:	4935      	ldr	r1, [pc, #212]	; (800dadc <_dtoa_r+0x64c>)
 800da06:	2000      	movs	r0, #0
 800da08:	f7f2 fc3e 	bl	8000288 <__aeabi_dsub>
 800da0c:	ec53 2b18 	vmov	r2, r3, d8
 800da10:	f7f3 f864 	bl	8000adc <__aeabi_dcmplt>
 800da14:	2800      	cmp	r0, #0
 800da16:	f040 80b9 	bne.w	800db8c <_dtoa_r+0x6fc>
 800da1a:	9b02      	ldr	r3, [sp, #8]
 800da1c:	429d      	cmp	r5, r3
 800da1e:	f43f af75 	beq.w	800d90c <_dtoa_r+0x47c>
 800da22:	4b2f      	ldr	r3, [pc, #188]	; (800dae0 <_dtoa_r+0x650>)
 800da24:	ec51 0b18 	vmov	r0, r1, d8
 800da28:	2200      	movs	r2, #0
 800da2a:	f7f2 fde5 	bl	80005f8 <__aeabi_dmul>
 800da2e:	4b2c      	ldr	r3, [pc, #176]	; (800dae0 <_dtoa_r+0x650>)
 800da30:	ec41 0b18 	vmov	d8, r0, r1
 800da34:	2200      	movs	r2, #0
 800da36:	4630      	mov	r0, r6
 800da38:	4639      	mov	r1, r7
 800da3a:	f7f2 fddd 	bl	80005f8 <__aeabi_dmul>
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	e7c4      	b.n	800d9ce <_dtoa_r+0x53e>
 800da44:	ec51 0b17 	vmov	r0, r1, d7
 800da48:	f7f2 fdd6 	bl	80005f8 <__aeabi_dmul>
 800da4c:	9b02      	ldr	r3, [sp, #8]
 800da4e:	9d00      	ldr	r5, [sp, #0]
 800da50:	930c      	str	r3, [sp, #48]	; 0x30
 800da52:	ec41 0b18 	vmov	d8, r0, r1
 800da56:	4639      	mov	r1, r7
 800da58:	4630      	mov	r0, r6
 800da5a:	f7f3 f87d 	bl	8000b58 <__aeabi_d2iz>
 800da5e:	9011      	str	r0, [sp, #68]	; 0x44
 800da60:	f7f2 fd60 	bl	8000524 <__aeabi_i2d>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4630      	mov	r0, r6
 800da6a:	4639      	mov	r1, r7
 800da6c:	f7f2 fc0c 	bl	8000288 <__aeabi_dsub>
 800da70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da72:	3330      	adds	r3, #48	; 0x30
 800da74:	f805 3b01 	strb.w	r3, [r5], #1
 800da78:	9b02      	ldr	r3, [sp, #8]
 800da7a:	429d      	cmp	r5, r3
 800da7c:	4606      	mov	r6, r0
 800da7e:	460f      	mov	r7, r1
 800da80:	f04f 0200 	mov.w	r2, #0
 800da84:	d134      	bne.n	800daf0 <_dtoa_r+0x660>
 800da86:	4b19      	ldr	r3, [pc, #100]	; (800daec <_dtoa_r+0x65c>)
 800da88:	ec51 0b18 	vmov	r0, r1, d8
 800da8c:	f7f2 fbfe 	bl	800028c <__adddf3>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4630      	mov	r0, r6
 800da96:	4639      	mov	r1, r7
 800da98:	f7f3 f83e 	bl	8000b18 <__aeabi_dcmpgt>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d175      	bne.n	800db8c <_dtoa_r+0x6fc>
 800daa0:	ec53 2b18 	vmov	r2, r3, d8
 800daa4:	4911      	ldr	r1, [pc, #68]	; (800daec <_dtoa_r+0x65c>)
 800daa6:	2000      	movs	r0, #0
 800daa8:	f7f2 fbee 	bl	8000288 <__aeabi_dsub>
 800daac:	4602      	mov	r2, r0
 800daae:	460b      	mov	r3, r1
 800dab0:	4630      	mov	r0, r6
 800dab2:	4639      	mov	r1, r7
 800dab4:	f7f3 f812 	bl	8000adc <__aeabi_dcmplt>
 800dab8:	2800      	cmp	r0, #0
 800daba:	f43f af27 	beq.w	800d90c <_dtoa_r+0x47c>
 800dabe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dac0:	1e6b      	subs	r3, r5, #1
 800dac2:	930c      	str	r3, [sp, #48]	; 0x30
 800dac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dac8:	2b30      	cmp	r3, #48	; 0x30
 800daca:	d0f8      	beq.n	800dabe <_dtoa_r+0x62e>
 800dacc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dad0:	e04a      	b.n	800db68 <_dtoa_r+0x6d8>
 800dad2:	bf00      	nop
 800dad4:	0800fa40 	.word	0x0800fa40
 800dad8:	0800fa18 	.word	0x0800fa18
 800dadc:	3ff00000 	.word	0x3ff00000
 800dae0:	40240000 	.word	0x40240000
 800dae4:	401c0000 	.word	0x401c0000
 800dae8:	40140000 	.word	0x40140000
 800daec:	3fe00000 	.word	0x3fe00000
 800daf0:	4baf      	ldr	r3, [pc, #700]	; (800ddb0 <_dtoa_r+0x920>)
 800daf2:	f7f2 fd81 	bl	80005f8 <__aeabi_dmul>
 800daf6:	4606      	mov	r6, r0
 800daf8:	460f      	mov	r7, r1
 800dafa:	e7ac      	b.n	800da56 <_dtoa_r+0x5c6>
 800dafc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db00:	9d00      	ldr	r5, [sp, #0]
 800db02:	4642      	mov	r2, r8
 800db04:	464b      	mov	r3, r9
 800db06:	4630      	mov	r0, r6
 800db08:	4639      	mov	r1, r7
 800db0a:	f7f2 fe9f 	bl	800084c <__aeabi_ddiv>
 800db0e:	f7f3 f823 	bl	8000b58 <__aeabi_d2iz>
 800db12:	9002      	str	r0, [sp, #8]
 800db14:	f7f2 fd06 	bl	8000524 <__aeabi_i2d>
 800db18:	4642      	mov	r2, r8
 800db1a:	464b      	mov	r3, r9
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4630      	mov	r0, r6
 800db26:	4639      	mov	r1, r7
 800db28:	f7f2 fbae 	bl	8000288 <__aeabi_dsub>
 800db2c:	9e02      	ldr	r6, [sp, #8]
 800db2e:	9f01      	ldr	r7, [sp, #4]
 800db30:	3630      	adds	r6, #48	; 0x30
 800db32:	f805 6b01 	strb.w	r6, [r5], #1
 800db36:	9e00      	ldr	r6, [sp, #0]
 800db38:	1bae      	subs	r6, r5, r6
 800db3a:	42b7      	cmp	r7, r6
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	d137      	bne.n	800dbb2 <_dtoa_r+0x722>
 800db42:	f7f2 fba3 	bl	800028c <__adddf3>
 800db46:	4642      	mov	r2, r8
 800db48:	464b      	mov	r3, r9
 800db4a:	4606      	mov	r6, r0
 800db4c:	460f      	mov	r7, r1
 800db4e:	f7f2 ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 800db52:	b9c8      	cbnz	r0, 800db88 <_dtoa_r+0x6f8>
 800db54:	4642      	mov	r2, r8
 800db56:	464b      	mov	r3, r9
 800db58:	4630      	mov	r0, r6
 800db5a:	4639      	mov	r1, r7
 800db5c:	f7f2 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800db60:	b110      	cbz	r0, 800db68 <_dtoa_r+0x6d8>
 800db62:	9b02      	ldr	r3, [sp, #8]
 800db64:	07d9      	lsls	r1, r3, #31
 800db66:	d40f      	bmi.n	800db88 <_dtoa_r+0x6f8>
 800db68:	4620      	mov	r0, r4
 800db6a:	4659      	mov	r1, fp
 800db6c:	f000 fada 	bl	800e124 <_Bfree>
 800db70:	2300      	movs	r3, #0
 800db72:	702b      	strb	r3, [r5, #0]
 800db74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db76:	f10a 0001 	add.w	r0, sl, #1
 800db7a:	6018      	str	r0, [r3, #0]
 800db7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f43f acd8 	beq.w	800d534 <_dtoa_r+0xa4>
 800db84:	601d      	str	r5, [r3, #0]
 800db86:	e4d5      	b.n	800d534 <_dtoa_r+0xa4>
 800db88:	f8cd a01c 	str.w	sl, [sp, #28]
 800db8c:	462b      	mov	r3, r5
 800db8e:	461d      	mov	r5, r3
 800db90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db94:	2a39      	cmp	r2, #57	; 0x39
 800db96:	d108      	bne.n	800dbaa <_dtoa_r+0x71a>
 800db98:	9a00      	ldr	r2, [sp, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d1f7      	bne.n	800db8e <_dtoa_r+0x6fe>
 800db9e:	9a07      	ldr	r2, [sp, #28]
 800dba0:	9900      	ldr	r1, [sp, #0]
 800dba2:	3201      	adds	r2, #1
 800dba4:	9207      	str	r2, [sp, #28]
 800dba6:	2230      	movs	r2, #48	; 0x30
 800dba8:	700a      	strb	r2, [r1, #0]
 800dbaa:	781a      	ldrb	r2, [r3, #0]
 800dbac:	3201      	adds	r2, #1
 800dbae:	701a      	strb	r2, [r3, #0]
 800dbb0:	e78c      	b.n	800dacc <_dtoa_r+0x63c>
 800dbb2:	4b7f      	ldr	r3, [pc, #508]	; (800ddb0 <_dtoa_r+0x920>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f7f2 fd1f 	bl	80005f8 <__aeabi_dmul>
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	f7f2 ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d09b      	beq.n	800db02 <_dtoa_r+0x672>
 800dbca:	e7cd      	b.n	800db68 <_dtoa_r+0x6d8>
 800dbcc:	9a08      	ldr	r2, [sp, #32]
 800dbce:	2a00      	cmp	r2, #0
 800dbd0:	f000 80c4 	beq.w	800dd5c <_dtoa_r+0x8cc>
 800dbd4:	9a05      	ldr	r2, [sp, #20]
 800dbd6:	2a01      	cmp	r2, #1
 800dbd8:	f300 80a8 	bgt.w	800dd2c <_dtoa_r+0x89c>
 800dbdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbde:	2a00      	cmp	r2, #0
 800dbe0:	f000 80a0 	beq.w	800dd24 <_dtoa_r+0x894>
 800dbe4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbe8:	9e06      	ldr	r6, [sp, #24]
 800dbea:	4645      	mov	r5, r8
 800dbec:	9a04      	ldr	r2, [sp, #16]
 800dbee:	2101      	movs	r1, #1
 800dbf0:	441a      	add	r2, r3
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	4498      	add	r8, r3
 800dbf6:	9204      	str	r2, [sp, #16]
 800dbf8:	f000 fb50 	bl	800e29c <__i2b>
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	2d00      	cmp	r5, #0
 800dc00:	dd0b      	ble.n	800dc1a <_dtoa_r+0x78a>
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dd08      	ble.n	800dc1a <_dtoa_r+0x78a>
 800dc08:	42ab      	cmp	r3, r5
 800dc0a:	9a04      	ldr	r2, [sp, #16]
 800dc0c:	bfa8      	it	ge
 800dc0e:	462b      	movge	r3, r5
 800dc10:	eba8 0803 	sub.w	r8, r8, r3
 800dc14:	1aed      	subs	r5, r5, r3
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	9b06      	ldr	r3, [sp, #24]
 800dc1c:	b1fb      	cbz	r3, 800dc5e <_dtoa_r+0x7ce>
 800dc1e:	9b08      	ldr	r3, [sp, #32]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 809f 	beq.w	800dd64 <_dtoa_r+0x8d4>
 800dc26:	2e00      	cmp	r6, #0
 800dc28:	dd11      	ble.n	800dc4e <_dtoa_r+0x7be>
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f000 fbf0 	bl	800e414 <__pow5mult>
 800dc34:	465a      	mov	r2, fp
 800dc36:	4601      	mov	r1, r0
 800dc38:	4607      	mov	r7, r0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fb44 	bl	800e2c8 <__multiply>
 800dc40:	4659      	mov	r1, fp
 800dc42:	9007      	str	r0, [sp, #28]
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fa6d 	bl	800e124 <_Bfree>
 800dc4a:	9b07      	ldr	r3, [sp, #28]
 800dc4c:	469b      	mov	fp, r3
 800dc4e:	9b06      	ldr	r3, [sp, #24]
 800dc50:	1b9a      	subs	r2, r3, r6
 800dc52:	d004      	beq.n	800dc5e <_dtoa_r+0x7ce>
 800dc54:	4659      	mov	r1, fp
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fbdc 	bl	800e414 <__pow5mult>
 800dc5c:	4683      	mov	fp, r0
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 fb1b 	bl	800e29c <__i2b>
 800dc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	dd7c      	ble.n	800dd68 <_dtoa_r+0x8d8>
 800dc6e:	461a      	mov	r2, r3
 800dc70:	4601      	mov	r1, r0
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fbce 	bl	800e414 <__pow5mult>
 800dc78:	9b05      	ldr	r3, [sp, #20]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	dd76      	ble.n	800dd6e <_dtoa_r+0x8de>
 800dc80:	2300      	movs	r3, #0
 800dc82:	9306      	str	r3, [sp, #24]
 800dc84:	6933      	ldr	r3, [r6, #16]
 800dc86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc8a:	6918      	ldr	r0, [r3, #16]
 800dc8c:	f000 fab6 	bl	800e1fc <__hi0bits>
 800dc90:	f1c0 0020 	rsb	r0, r0, #32
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4418      	add	r0, r3
 800dc98:	f010 001f 	ands.w	r0, r0, #31
 800dc9c:	f000 8086 	beq.w	800ddac <_dtoa_r+0x91c>
 800dca0:	f1c0 0320 	rsb	r3, r0, #32
 800dca4:	2b04      	cmp	r3, #4
 800dca6:	dd7f      	ble.n	800dda8 <_dtoa_r+0x918>
 800dca8:	f1c0 001c 	rsb	r0, r0, #28
 800dcac:	9b04      	ldr	r3, [sp, #16]
 800dcae:	4403      	add	r3, r0
 800dcb0:	4480      	add	r8, r0
 800dcb2:	4405      	add	r5, r0
 800dcb4:	9304      	str	r3, [sp, #16]
 800dcb6:	f1b8 0f00 	cmp.w	r8, #0
 800dcba:	dd05      	ble.n	800dcc8 <_dtoa_r+0x838>
 800dcbc:	4659      	mov	r1, fp
 800dcbe:	4642      	mov	r2, r8
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f000 fc01 	bl	800e4c8 <__lshift>
 800dcc6:	4683      	mov	fp, r0
 800dcc8:	9b04      	ldr	r3, [sp, #16]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	dd05      	ble.n	800dcda <_dtoa_r+0x84a>
 800dcce:	4631      	mov	r1, r6
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f000 fbf8 	bl	800e4c8 <__lshift>
 800dcd8:	4606      	mov	r6, r0
 800dcda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d069      	beq.n	800ddb4 <_dtoa_r+0x924>
 800dce0:	4631      	mov	r1, r6
 800dce2:	4658      	mov	r0, fp
 800dce4:	f000 fc5c 	bl	800e5a0 <__mcmp>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	da63      	bge.n	800ddb4 <_dtoa_r+0x924>
 800dcec:	2300      	movs	r3, #0
 800dcee:	4659      	mov	r1, fp
 800dcf0:	220a      	movs	r2, #10
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 fa38 	bl	800e168 <__multadd>
 800dcf8:	9b08      	ldr	r3, [sp, #32]
 800dcfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcfe:	4683      	mov	fp, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 818f 	beq.w	800e024 <_dtoa_r+0xb94>
 800dd06:	4639      	mov	r1, r7
 800dd08:	2300      	movs	r3, #0
 800dd0a:	220a      	movs	r2, #10
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 fa2b 	bl	800e168 <__multadd>
 800dd12:	f1b9 0f00 	cmp.w	r9, #0
 800dd16:	4607      	mov	r7, r0
 800dd18:	f300 808e 	bgt.w	800de38 <_dtoa_r+0x9a8>
 800dd1c:	9b05      	ldr	r3, [sp, #20]
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	dc50      	bgt.n	800ddc4 <_dtoa_r+0x934>
 800dd22:	e089      	b.n	800de38 <_dtoa_r+0x9a8>
 800dd24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd2a:	e75d      	b.n	800dbe8 <_dtoa_r+0x758>
 800dd2c:	9b01      	ldr	r3, [sp, #4]
 800dd2e:	1e5e      	subs	r6, r3, #1
 800dd30:	9b06      	ldr	r3, [sp, #24]
 800dd32:	42b3      	cmp	r3, r6
 800dd34:	bfbf      	itttt	lt
 800dd36:	9b06      	ldrlt	r3, [sp, #24]
 800dd38:	9606      	strlt	r6, [sp, #24]
 800dd3a:	1af2      	sublt	r2, r6, r3
 800dd3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dd3e:	bfb6      	itet	lt
 800dd40:	189b      	addlt	r3, r3, r2
 800dd42:	1b9e      	subge	r6, r3, r6
 800dd44:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dd46:	9b01      	ldr	r3, [sp, #4]
 800dd48:	bfb8      	it	lt
 800dd4a:	2600      	movlt	r6, #0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	bfb5      	itete	lt
 800dd50:	eba8 0503 	sublt.w	r5, r8, r3
 800dd54:	9b01      	ldrge	r3, [sp, #4]
 800dd56:	2300      	movlt	r3, #0
 800dd58:	4645      	movge	r5, r8
 800dd5a:	e747      	b.n	800dbec <_dtoa_r+0x75c>
 800dd5c:	9e06      	ldr	r6, [sp, #24]
 800dd5e:	9f08      	ldr	r7, [sp, #32]
 800dd60:	4645      	mov	r5, r8
 800dd62:	e74c      	b.n	800dbfe <_dtoa_r+0x76e>
 800dd64:	9a06      	ldr	r2, [sp, #24]
 800dd66:	e775      	b.n	800dc54 <_dtoa_r+0x7c4>
 800dd68:	9b05      	ldr	r3, [sp, #20]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	dc18      	bgt.n	800dda0 <_dtoa_r+0x910>
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	b9b3      	cbnz	r3, 800dda0 <_dtoa_r+0x910>
 800dd72:	9b03      	ldr	r3, [sp, #12]
 800dd74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd78:	b9a3      	cbnz	r3, 800dda4 <_dtoa_r+0x914>
 800dd7a:	9b03      	ldr	r3, [sp, #12]
 800dd7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd80:	0d1b      	lsrs	r3, r3, #20
 800dd82:	051b      	lsls	r3, r3, #20
 800dd84:	b12b      	cbz	r3, 800dd92 <_dtoa_r+0x902>
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	f108 0801 	add.w	r8, r8, #1
 800dd90:	2301      	movs	r3, #1
 800dd92:	9306      	str	r3, [sp, #24]
 800dd94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f47f af74 	bne.w	800dc84 <_dtoa_r+0x7f4>
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	e779      	b.n	800dc94 <_dtoa_r+0x804>
 800dda0:	2300      	movs	r3, #0
 800dda2:	e7f6      	b.n	800dd92 <_dtoa_r+0x902>
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	e7f4      	b.n	800dd92 <_dtoa_r+0x902>
 800dda8:	d085      	beq.n	800dcb6 <_dtoa_r+0x826>
 800ddaa:	4618      	mov	r0, r3
 800ddac:	301c      	adds	r0, #28
 800ddae:	e77d      	b.n	800dcac <_dtoa_r+0x81c>
 800ddb0:	40240000 	.word	0x40240000
 800ddb4:	9b01      	ldr	r3, [sp, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	dc38      	bgt.n	800de2c <_dtoa_r+0x99c>
 800ddba:	9b05      	ldr	r3, [sp, #20]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	dd35      	ble.n	800de2c <_dtoa_r+0x99c>
 800ddc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ddc4:	f1b9 0f00 	cmp.w	r9, #0
 800ddc8:	d10d      	bne.n	800dde6 <_dtoa_r+0x956>
 800ddca:	4631      	mov	r1, r6
 800ddcc:	464b      	mov	r3, r9
 800ddce:	2205      	movs	r2, #5
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 f9c9 	bl	800e168 <__multadd>
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	4606      	mov	r6, r0
 800ddda:	4658      	mov	r0, fp
 800dddc:	f000 fbe0 	bl	800e5a0 <__mcmp>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	f73f adbd 	bgt.w	800d960 <_dtoa_r+0x4d0>
 800dde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde8:	9d00      	ldr	r5, [sp, #0]
 800ddea:	ea6f 0a03 	mvn.w	sl, r3
 800ddee:	f04f 0800 	mov.w	r8, #0
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f000 f995 	bl	800e124 <_Bfree>
 800ddfa:	2f00      	cmp	r7, #0
 800ddfc:	f43f aeb4 	beq.w	800db68 <_dtoa_r+0x6d8>
 800de00:	f1b8 0f00 	cmp.w	r8, #0
 800de04:	d005      	beq.n	800de12 <_dtoa_r+0x982>
 800de06:	45b8      	cmp	r8, r7
 800de08:	d003      	beq.n	800de12 <_dtoa_r+0x982>
 800de0a:	4641      	mov	r1, r8
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 f989 	bl	800e124 <_Bfree>
 800de12:	4639      	mov	r1, r7
 800de14:	4620      	mov	r0, r4
 800de16:	f000 f985 	bl	800e124 <_Bfree>
 800de1a:	e6a5      	b.n	800db68 <_dtoa_r+0x6d8>
 800de1c:	2600      	movs	r6, #0
 800de1e:	4637      	mov	r7, r6
 800de20:	e7e1      	b.n	800dde6 <_dtoa_r+0x956>
 800de22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800de24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de28:	4637      	mov	r7, r6
 800de2a:	e599      	b.n	800d960 <_dtoa_r+0x4d0>
 800de2c:	9b08      	ldr	r3, [sp, #32]
 800de2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 80fd 	beq.w	800e032 <_dtoa_r+0xba2>
 800de38:	2d00      	cmp	r5, #0
 800de3a:	dd05      	ble.n	800de48 <_dtoa_r+0x9b8>
 800de3c:	4639      	mov	r1, r7
 800de3e:	462a      	mov	r2, r5
 800de40:	4620      	mov	r0, r4
 800de42:	f000 fb41 	bl	800e4c8 <__lshift>
 800de46:	4607      	mov	r7, r0
 800de48:	9b06      	ldr	r3, [sp, #24]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d05c      	beq.n	800df08 <_dtoa_r+0xa78>
 800de4e:	6879      	ldr	r1, [r7, #4]
 800de50:	4620      	mov	r0, r4
 800de52:	f000 f927 	bl	800e0a4 <_Balloc>
 800de56:	4605      	mov	r5, r0
 800de58:	b928      	cbnz	r0, 800de66 <_dtoa_r+0x9d6>
 800de5a:	4b80      	ldr	r3, [pc, #512]	; (800e05c <_dtoa_r+0xbcc>)
 800de5c:	4602      	mov	r2, r0
 800de5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de62:	f7ff bb2e 	b.w	800d4c2 <_dtoa_r+0x32>
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	3202      	adds	r2, #2
 800de6a:	0092      	lsls	r2, r2, #2
 800de6c:	f107 010c 	add.w	r1, r7, #12
 800de70:	300c      	adds	r0, #12
 800de72:	f000 f8fd 	bl	800e070 <memcpy>
 800de76:	2201      	movs	r2, #1
 800de78:	4629      	mov	r1, r5
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 fb24 	bl	800e4c8 <__lshift>
 800de80:	9b00      	ldr	r3, [sp, #0]
 800de82:	3301      	adds	r3, #1
 800de84:	9301      	str	r3, [sp, #4]
 800de86:	9b00      	ldr	r3, [sp, #0]
 800de88:	444b      	add	r3, r9
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	9b02      	ldr	r3, [sp, #8]
 800de8e:	f003 0301 	and.w	r3, r3, #1
 800de92:	46b8      	mov	r8, r7
 800de94:	9306      	str	r3, [sp, #24]
 800de96:	4607      	mov	r7, r0
 800de98:	9b01      	ldr	r3, [sp, #4]
 800de9a:	4631      	mov	r1, r6
 800de9c:	3b01      	subs	r3, #1
 800de9e:	4658      	mov	r0, fp
 800dea0:	9302      	str	r3, [sp, #8]
 800dea2:	f7ff fa69 	bl	800d378 <quorem>
 800dea6:	4603      	mov	r3, r0
 800dea8:	3330      	adds	r3, #48	; 0x30
 800deaa:	9004      	str	r0, [sp, #16]
 800deac:	4641      	mov	r1, r8
 800deae:	4658      	mov	r0, fp
 800deb0:	9308      	str	r3, [sp, #32]
 800deb2:	f000 fb75 	bl	800e5a0 <__mcmp>
 800deb6:	463a      	mov	r2, r7
 800deb8:	4681      	mov	r9, r0
 800deba:	4631      	mov	r1, r6
 800debc:	4620      	mov	r0, r4
 800debe:	f000 fb8b 	bl	800e5d8 <__mdiff>
 800dec2:	68c2      	ldr	r2, [r0, #12]
 800dec4:	9b08      	ldr	r3, [sp, #32]
 800dec6:	4605      	mov	r5, r0
 800dec8:	bb02      	cbnz	r2, 800df0c <_dtoa_r+0xa7c>
 800deca:	4601      	mov	r1, r0
 800decc:	4658      	mov	r0, fp
 800dece:	f000 fb67 	bl	800e5a0 <__mcmp>
 800ded2:	9b08      	ldr	r3, [sp, #32]
 800ded4:	4602      	mov	r2, r0
 800ded6:	4629      	mov	r1, r5
 800ded8:	4620      	mov	r0, r4
 800deda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dede:	f000 f921 	bl	800e124 <_Bfree>
 800dee2:	9b05      	ldr	r3, [sp, #20]
 800dee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dee6:	9d01      	ldr	r5, [sp, #4]
 800dee8:	ea43 0102 	orr.w	r1, r3, r2
 800deec:	9b06      	ldr	r3, [sp, #24]
 800deee:	430b      	orrs	r3, r1
 800def0:	9b08      	ldr	r3, [sp, #32]
 800def2:	d10d      	bne.n	800df10 <_dtoa_r+0xa80>
 800def4:	2b39      	cmp	r3, #57	; 0x39
 800def6:	d029      	beq.n	800df4c <_dtoa_r+0xabc>
 800def8:	f1b9 0f00 	cmp.w	r9, #0
 800defc:	dd01      	ble.n	800df02 <_dtoa_r+0xa72>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	3331      	adds	r3, #49	; 0x31
 800df02:	9a02      	ldr	r2, [sp, #8]
 800df04:	7013      	strb	r3, [r2, #0]
 800df06:	e774      	b.n	800ddf2 <_dtoa_r+0x962>
 800df08:	4638      	mov	r0, r7
 800df0a:	e7b9      	b.n	800de80 <_dtoa_r+0x9f0>
 800df0c:	2201      	movs	r2, #1
 800df0e:	e7e2      	b.n	800ded6 <_dtoa_r+0xa46>
 800df10:	f1b9 0f00 	cmp.w	r9, #0
 800df14:	db06      	blt.n	800df24 <_dtoa_r+0xa94>
 800df16:	9905      	ldr	r1, [sp, #20]
 800df18:	ea41 0909 	orr.w	r9, r1, r9
 800df1c:	9906      	ldr	r1, [sp, #24]
 800df1e:	ea59 0101 	orrs.w	r1, r9, r1
 800df22:	d120      	bne.n	800df66 <_dtoa_r+0xad6>
 800df24:	2a00      	cmp	r2, #0
 800df26:	ddec      	ble.n	800df02 <_dtoa_r+0xa72>
 800df28:	4659      	mov	r1, fp
 800df2a:	2201      	movs	r2, #1
 800df2c:	4620      	mov	r0, r4
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	f000 faca 	bl	800e4c8 <__lshift>
 800df34:	4631      	mov	r1, r6
 800df36:	4683      	mov	fp, r0
 800df38:	f000 fb32 	bl	800e5a0 <__mcmp>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	dc02      	bgt.n	800df48 <_dtoa_r+0xab8>
 800df42:	d1de      	bne.n	800df02 <_dtoa_r+0xa72>
 800df44:	07da      	lsls	r2, r3, #31
 800df46:	d5dc      	bpl.n	800df02 <_dtoa_r+0xa72>
 800df48:	2b39      	cmp	r3, #57	; 0x39
 800df4a:	d1d8      	bne.n	800defe <_dtoa_r+0xa6e>
 800df4c:	9a02      	ldr	r2, [sp, #8]
 800df4e:	2339      	movs	r3, #57	; 0x39
 800df50:	7013      	strb	r3, [r2, #0]
 800df52:	462b      	mov	r3, r5
 800df54:	461d      	mov	r5, r3
 800df56:	3b01      	subs	r3, #1
 800df58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df5c:	2a39      	cmp	r2, #57	; 0x39
 800df5e:	d050      	beq.n	800e002 <_dtoa_r+0xb72>
 800df60:	3201      	adds	r2, #1
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	e745      	b.n	800ddf2 <_dtoa_r+0x962>
 800df66:	2a00      	cmp	r2, #0
 800df68:	dd03      	ble.n	800df72 <_dtoa_r+0xae2>
 800df6a:	2b39      	cmp	r3, #57	; 0x39
 800df6c:	d0ee      	beq.n	800df4c <_dtoa_r+0xabc>
 800df6e:	3301      	adds	r3, #1
 800df70:	e7c7      	b.n	800df02 <_dtoa_r+0xa72>
 800df72:	9a01      	ldr	r2, [sp, #4]
 800df74:	9907      	ldr	r1, [sp, #28]
 800df76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df7a:	428a      	cmp	r2, r1
 800df7c:	d02a      	beq.n	800dfd4 <_dtoa_r+0xb44>
 800df7e:	4659      	mov	r1, fp
 800df80:	2300      	movs	r3, #0
 800df82:	220a      	movs	r2, #10
 800df84:	4620      	mov	r0, r4
 800df86:	f000 f8ef 	bl	800e168 <__multadd>
 800df8a:	45b8      	cmp	r8, r7
 800df8c:	4683      	mov	fp, r0
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	f04f 020a 	mov.w	r2, #10
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	d107      	bne.n	800dfac <_dtoa_r+0xb1c>
 800df9c:	f000 f8e4 	bl	800e168 <__multadd>
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	9b01      	ldr	r3, [sp, #4]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	e775      	b.n	800de98 <_dtoa_r+0xa08>
 800dfac:	f000 f8dc 	bl	800e168 <__multadd>
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	4680      	mov	r8, r0
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	220a      	movs	r2, #10
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 f8d5 	bl	800e168 <__multadd>
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	e7f0      	b.n	800dfa4 <_dtoa_r+0xb14>
 800dfc2:	f1b9 0f00 	cmp.w	r9, #0
 800dfc6:	9a00      	ldr	r2, [sp, #0]
 800dfc8:	bfcc      	ite	gt
 800dfca:	464d      	movgt	r5, r9
 800dfcc:	2501      	movle	r5, #1
 800dfce:	4415      	add	r5, r2
 800dfd0:	f04f 0800 	mov.w	r8, #0
 800dfd4:	4659      	mov	r1, fp
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	4620      	mov	r0, r4
 800dfda:	9301      	str	r3, [sp, #4]
 800dfdc:	f000 fa74 	bl	800e4c8 <__lshift>
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4683      	mov	fp, r0
 800dfe4:	f000 fadc 	bl	800e5a0 <__mcmp>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	dcb2      	bgt.n	800df52 <_dtoa_r+0xac2>
 800dfec:	d102      	bne.n	800dff4 <_dtoa_r+0xb64>
 800dfee:	9b01      	ldr	r3, [sp, #4]
 800dff0:	07db      	lsls	r3, r3, #31
 800dff2:	d4ae      	bmi.n	800df52 <_dtoa_r+0xac2>
 800dff4:	462b      	mov	r3, r5
 800dff6:	461d      	mov	r5, r3
 800dff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dffc:	2a30      	cmp	r2, #48	; 0x30
 800dffe:	d0fa      	beq.n	800dff6 <_dtoa_r+0xb66>
 800e000:	e6f7      	b.n	800ddf2 <_dtoa_r+0x962>
 800e002:	9a00      	ldr	r2, [sp, #0]
 800e004:	429a      	cmp	r2, r3
 800e006:	d1a5      	bne.n	800df54 <_dtoa_r+0xac4>
 800e008:	f10a 0a01 	add.w	sl, sl, #1
 800e00c:	2331      	movs	r3, #49	; 0x31
 800e00e:	e779      	b.n	800df04 <_dtoa_r+0xa74>
 800e010:	4b13      	ldr	r3, [pc, #76]	; (800e060 <_dtoa_r+0xbd0>)
 800e012:	f7ff baaf 	b.w	800d574 <_dtoa_r+0xe4>
 800e016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f47f aa86 	bne.w	800d52a <_dtoa_r+0x9a>
 800e01e:	4b11      	ldr	r3, [pc, #68]	; (800e064 <_dtoa_r+0xbd4>)
 800e020:	f7ff baa8 	b.w	800d574 <_dtoa_r+0xe4>
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	dc03      	bgt.n	800e032 <_dtoa_r+0xba2>
 800e02a:	9b05      	ldr	r3, [sp, #20]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	f73f aec9 	bgt.w	800ddc4 <_dtoa_r+0x934>
 800e032:	9d00      	ldr	r5, [sp, #0]
 800e034:	4631      	mov	r1, r6
 800e036:	4658      	mov	r0, fp
 800e038:	f7ff f99e 	bl	800d378 <quorem>
 800e03c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e040:	f805 3b01 	strb.w	r3, [r5], #1
 800e044:	9a00      	ldr	r2, [sp, #0]
 800e046:	1aaa      	subs	r2, r5, r2
 800e048:	4591      	cmp	r9, r2
 800e04a:	ddba      	ble.n	800dfc2 <_dtoa_r+0xb32>
 800e04c:	4659      	mov	r1, fp
 800e04e:	2300      	movs	r3, #0
 800e050:	220a      	movs	r2, #10
 800e052:	4620      	mov	r0, r4
 800e054:	f000 f888 	bl	800e168 <__multadd>
 800e058:	4683      	mov	fp, r0
 800e05a:	e7eb      	b.n	800e034 <_dtoa_r+0xba4>
 800e05c:	0800f9a3 	.word	0x0800f9a3
 800e060:	0800f8fc 	.word	0x0800f8fc
 800e064:	0800f920 	.word	0x0800f920

0800e068 <_localeconv_r>:
 800e068:	4800      	ldr	r0, [pc, #0]	; (800e06c <_localeconv_r+0x4>)
 800e06a:	4770      	bx	lr
 800e06c:	20000170 	.word	0x20000170

0800e070 <memcpy>:
 800e070:	440a      	add	r2, r1
 800e072:	4291      	cmp	r1, r2
 800e074:	f100 33ff 	add.w	r3, r0, #4294967295
 800e078:	d100      	bne.n	800e07c <memcpy+0xc>
 800e07a:	4770      	bx	lr
 800e07c:	b510      	push	{r4, lr}
 800e07e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e082:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e086:	4291      	cmp	r1, r2
 800e088:	d1f9      	bne.n	800e07e <memcpy+0xe>
 800e08a:	bd10      	pop	{r4, pc}

0800e08c <__malloc_lock>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__malloc_lock+0x8>)
 800e08e:	f000 bbc8 	b.w	800e822 <__retarget_lock_acquire_recursive>
 800e092:	bf00      	nop
 800e094:	20000a00 	.word	0x20000a00

0800e098 <__malloc_unlock>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__malloc_unlock+0x8>)
 800e09a:	f000 bbc3 	b.w	800e824 <__retarget_lock_release_recursive>
 800e09e:	bf00      	nop
 800e0a0:	20000a00 	.word	0x20000a00

0800e0a4 <_Balloc>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	b976      	cbnz	r6, 800e0cc <_Balloc+0x28>
 800e0ae:	2010      	movs	r0, #16
 800e0b0:	f7fe fc26 	bl	800c900 <malloc>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	6260      	str	r0, [r4, #36]	; 0x24
 800e0b8:	b920      	cbnz	r0, 800e0c4 <_Balloc+0x20>
 800e0ba:	4b18      	ldr	r3, [pc, #96]	; (800e11c <_Balloc+0x78>)
 800e0bc:	4818      	ldr	r0, [pc, #96]	; (800e120 <_Balloc+0x7c>)
 800e0be:	2166      	movs	r1, #102	; 0x66
 800e0c0:	f000 fb7e 	bl	800e7c0 <__assert_func>
 800e0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c8:	6006      	str	r6, [r0, #0]
 800e0ca:	60c6      	str	r6, [r0, #12]
 800e0cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0ce:	68f3      	ldr	r3, [r6, #12]
 800e0d0:	b183      	cbz	r3, 800e0f4 <_Balloc+0x50>
 800e0d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0da:	b9b8      	cbnz	r0, 800e10c <_Balloc+0x68>
 800e0dc:	2101      	movs	r1, #1
 800e0de:	fa01 f605 	lsl.w	r6, r1, r5
 800e0e2:	1d72      	adds	r2, r6, #5
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 fb5a 	bl	800e7a0 <_calloc_r>
 800e0ec:	b160      	cbz	r0, 800e108 <_Balloc+0x64>
 800e0ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0f2:	e00e      	b.n	800e112 <_Balloc+0x6e>
 800e0f4:	2221      	movs	r2, #33	; 0x21
 800e0f6:	2104      	movs	r1, #4
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f000 fb51 	bl	800e7a0 <_calloc_r>
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	60f0      	str	r0, [r6, #12]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1e4      	bne.n	800e0d2 <_Balloc+0x2e>
 800e108:	2000      	movs	r0, #0
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	6802      	ldr	r2, [r0, #0]
 800e10e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e112:	2300      	movs	r3, #0
 800e114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e118:	e7f7      	b.n	800e10a <_Balloc+0x66>
 800e11a:	bf00      	nop
 800e11c:	0800f92d 	.word	0x0800f92d
 800e120:	0800f9b4 	.word	0x0800f9b4

0800e124 <_Bfree>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b976      	cbnz	r6, 800e14c <_Bfree+0x28>
 800e12e:	2010      	movs	r0, #16
 800e130:	f7fe fbe6 	bl	800c900 <malloc>
 800e134:	4602      	mov	r2, r0
 800e136:	6268      	str	r0, [r5, #36]	; 0x24
 800e138:	b920      	cbnz	r0, 800e144 <_Bfree+0x20>
 800e13a:	4b09      	ldr	r3, [pc, #36]	; (800e160 <_Bfree+0x3c>)
 800e13c:	4809      	ldr	r0, [pc, #36]	; (800e164 <_Bfree+0x40>)
 800e13e:	218a      	movs	r1, #138	; 0x8a
 800e140:	f000 fb3e 	bl	800e7c0 <__assert_func>
 800e144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e148:	6006      	str	r6, [r0, #0]
 800e14a:	60c6      	str	r6, [r0, #12]
 800e14c:	b13c      	cbz	r4, 800e15e <_Bfree+0x3a>
 800e14e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e150:	6862      	ldr	r2, [r4, #4]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e158:	6021      	str	r1, [r4, #0]
 800e15a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	0800f92d 	.word	0x0800f92d
 800e164:	0800f9b4 	.word	0x0800f9b4

0800e168 <__multadd>:
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	690e      	ldr	r6, [r1, #16]
 800e16e:	4607      	mov	r7, r0
 800e170:	4698      	mov	r8, r3
 800e172:	460c      	mov	r4, r1
 800e174:	f101 0014 	add.w	r0, r1, #20
 800e178:	2300      	movs	r3, #0
 800e17a:	6805      	ldr	r5, [r0, #0]
 800e17c:	b2a9      	uxth	r1, r5
 800e17e:	fb02 8101 	mla	r1, r2, r1, r8
 800e182:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e186:	0c2d      	lsrs	r5, r5, #16
 800e188:	fb02 c505 	mla	r5, r2, r5, ip
 800e18c:	b289      	uxth	r1, r1
 800e18e:	3301      	adds	r3, #1
 800e190:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e194:	429e      	cmp	r6, r3
 800e196:	f840 1b04 	str.w	r1, [r0], #4
 800e19a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e19e:	dcec      	bgt.n	800e17a <__multadd+0x12>
 800e1a0:	f1b8 0f00 	cmp.w	r8, #0
 800e1a4:	d022      	beq.n	800e1ec <__multadd+0x84>
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	42b3      	cmp	r3, r6
 800e1aa:	dc19      	bgt.n	800e1e0 <__multadd+0x78>
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	3101      	adds	r1, #1
 800e1b2:	f7ff ff77 	bl	800e0a4 <_Balloc>
 800e1b6:	4605      	mov	r5, r0
 800e1b8:	b928      	cbnz	r0, 800e1c6 <__multadd+0x5e>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	4b0d      	ldr	r3, [pc, #52]	; (800e1f4 <__multadd+0x8c>)
 800e1be:	480e      	ldr	r0, [pc, #56]	; (800e1f8 <__multadd+0x90>)
 800e1c0:	21b5      	movs	r1, #181	; 0xb5
 800e1c2:	f000 fafd 	bl	800e7c0 <__assert_func>
 800e1c6:	6922      	ldr	r2, [r4, #16]
 800e1c8:	3202      	adds	r2, #2
 800e1ca:	f104 010c 	add.w	r1, r4, #12
 800e1ce:	0092      	lsls	r2, r2, #2
 800e1d0:	300c      	adds	r0, #12
 800e1d2:	f7ff ff4d 	bl	800e070 <memcpy>
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f7ff ffa3 	bl	800e124 <_Bfree>
 800e1de:	462c      	mov	r4, r5
 800e1e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e1e4:	3601      	adds	r6, #1
 800e1e6:	f8c3 8014 	str.w	r8, [r3, #20]
 800e1ea:	6126      	str	r6, [r4, #16]
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f2:	bf00      	nop
 800e1f4:	0800f9a3 	.word	0x0800f9a3
 800e1f8:	0800f9b4 	.word	0x0800f9b4

0800e1fc <__hi0bits>:
 800e1fc:	0c03      	lsrs	r3, r0, #16
 800e1fe:	041b      	lsls	r3, r3, #16
 800e200:	b9d3      	cbnz	r3, 800e238 <__hi0bits+0x3c>
 800e202:	0400      	lsls	r0, r0, #16
 800e204:	2310      	movs	r3, #16
 800e206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e20a:	bf04      	itt	eq
 800e20c:	0200      	lsleq	r0, r0, #8
 800e20e:	3308      	addeq	r3, #8
 800e210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e214:	bf04      	itt	eq
 800e216:	0100      	lsleq	r0, r0, #4
 800e218:	3304      	addeq	r3, #4
 800e21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e21e:	bf04      	itt	eq
 800e220:	0080      	lsleq	r0, r0, #2
 800e222:	3302      	addeq	r3, #2
 800e224:	2800      	cmp	r0, #0
 800e226:	db05      	blt.n	800e234 <__hi0bits+0x38>
 800e228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e22c:	f103 0301 	add.w	r3, r3, #1
 800e230:	bf08      	it	eq
 800e232:	2320      	moveq	r3, #32
 800e234:	4618      	mov	r0, r3
 800e236:	4770      	bx	lr
 800e238:	2300      	movs	r3, #0
 800e23a:	e7e4      	b.n	800e206 <__hi0bits+0xa>

0800e23c <__lo0bits>:
 800e23c:	6803      	ldr	r3, [r0, #0]
 800e23e:	f013 0207 	ands.w	r2, r3, #7
 800e242:	4601      	mov	r1, r0
 800e244:	d00b      	beq.n	800e25e <__lo0bits+0x22>
 800e246:	07da      	lsls	r2, r3, #31
 800e248:	d424      	bmi.n	800e294 <__lo0bits+0x58>
 800e24a:	0798      	lsls	r0, r3, #30
 800e24c:	bf49      	itett	mi
 800e24e:	085b      	lsrmi	r3, r3, #1
 800e250:	089b      	lsrpl	r3, r3, #2
 800e252:	2001      	movmi	r0, #1
 800e254:	600b      	strmi	r3, [r1, #0]
 800e256:	bf5c      	itt	pl
 800e258:	600b      	strpl	r3, [r1, #0]
 800e25a:	2002      	movpl	r0, #2
 800e25c:	4770      	bx	lr
 800e25e:	b298      	uxth	r0, r3
 800e260:	b9b0      	cbnz	r0, 800e290 <__lo0bits+0x54>
 800e262:	0c1b      	lsrs	r3, r3, #16
 800e264:	2010      	movs	r0, #16
 800e266:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e26a:	bf04      	itt	eq
 800e26c:	0a1b      	lsreq	r3, r3, #8
 800e26e:	3008      	addeq	r0, #8
 800e270:	071a      	lsls	r2, r3, #28
 800e272:	bf04      	itt	eq
 800e274:	091b      	lsreq	r3, r3, #4
 800e276:	3004      	addeq	r0, #4
 800e278:	079a      	lsls	r2, r3, #30
 800e27a:	bf04      	itt	eq
 800e27c:	089b      	lsreq	r3, r3, #2
 800e27e:	3002      	addeq	r0, #2
 800e280:	07da      	lsls	r2, r3, #31
 800e282:	d403      	bmi.n	800e28c <__lo0bits+0x50>
 800e284:	085b      	lsrs	r3, r3, #1
 800e286:	f100 0001 	add.w	r0, r0, #1
 800e28a:	d005      	beq.n	800e298 <__lo0bits+0x5c>
 800e28c:	600b      	str	r3, [r1, #0]
 800e28e:	4770      	bx	lr
 800e290:	4610      	mov	r0, r2
 800e292:	e7e8      	b.n	800e266 <__lo0bits+0x2a>
 800e294:	2000      	movs	r0, #0
 800e296:	4770      	bx	lr
 800e298:	2020      	movs	r0, #32
 800e29a:	4770      	bx	lr

0800e29c <__i2b>:
 800e29c:	b510      	push	{r4, lr}
 800e29e:	460c      	mov	r4, r1
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	f7ff feff 	bl	800e0a4 <_Balloc>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	b928      	cbnz	r0, 800e2b6 <__i2b+0x1a>
 800e2aa:	4b05      	ldr	r3, [pc, #20]	; (800e2c0 <__i2b+0x24>)
 800e2ac:	4805      	ldr	r0, [pc, #20]	; (800e2c4 <__i2b+0x28>)
 800e2ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2b2:	f000 fa85 	bl	800e7c0 <__assert_func>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	6144      	str	r4, [r0, #20]
 800e2ba:	6103      	str	r3, [r0, #16]
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	0800f9a3 	.word	0x0800f9a3
 800e2c4:	0800f9b4 	.word	0x0800f9b4

0800e2c8 <__multiply>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	4614      	mov	r4, r2
 800e2ce:	690a      	ldr	r2, [r1, #16]
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	bfb8      	it	lt
 800e2d6:	460b      	movlt	r3, r1
 800e2d8:	460d      	mov	r5, r1
 800e2da:	bfbc      	itt	lt
 800e2dc:	4625      	movlt	r5, r4
 800e2de:	461c      	movlt	r4, r3
 800e2e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e2e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e2e8:	68ab      	ldr	r3, [r5, #8]
 800e2ea:	6869      	ldr	r1, [r5, #4]
 800e2ec:	eb0a 0709 	add.w	r7, sl, r9
 800e2f0:	42bb      	cmp	r3, r7
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	bfb8      	it	lt
 800e2f6:	3101      	addlt	r1, #1
 800e2f8:	f7ff fed4 	bl	800e0a4 <_Balloc>
 800e2fc:	b930      	cbnz	r0, 800e30c <__multiply+0x44>
 800e2fe:	4602      	mov	r2, r0
 800e300:	4b42      	ldr	r3, [pc, #264]	; (800e40c <__multiply+0x144>)
 800e302:	4843      	ldr	r0, [pc, #268]	; (800e410 <__multiply+0x148>)
 800e304:	f240 115d 	movw	r1, #349	; 0x15d
 800e308:	f000 fa5a 	bl	800e7c0 <__assert_func>
 800e30c:	f100 0614 	add.w	r6, r0, #20
 800e310:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e314:	4633      	mov	r3, r6
 800e316:	2200      	movs	r2, #0
 800e318:	4543      	cmp	r3, r8
 800e31a:	d31e      	bcc.n	800e35a <__multiply+0x92>
 800e31c:	f105 0c14 	add.w	ip, r5, #20
 800e320:	f104 0314 	add.w	r3, r4, #20
 800e324:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e328:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e32c:	9202      	str	r2, [sp, #8]
 800e32e:	ebac 0205 	sub.w	r2, ip, r5
 800e332:	3a15      	subs	r2, #21
 800e334:	f022 0203 	bic.w	r2, r2, #3
 800e338:	3204      	adds	r2, #4
 800e33a:	f105 0115 	add.w	r1, r5, #21
 800e33e:	458c      	cmp	ip, r1
 800e340:	bf38      	it	cc
 800e342:	2204      	movcc	r2, #4
 800e344:	9201      	str	r2, [sp, #4]
 800e346:	9a02      	ldr	r2, [sp, #8]
 800e348:	9303      	str	r3, [sp, #12]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d808      	bhi.n	800e360 <__multiply+0x98>
 800e34e:	2f00      	cmp	r7, #0
 800e350:	dc55      	bgt.n	800e3fe <__multiply+0x136>
 800e352:	6107      	str	r7, [r0, #16]
 800e354:	b005      	add	sp, #20
 800e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35a:	f843 2b04 	str.w	r2, [r3], #4
 800e35e:	e7db      	b.n	800e318 <__multiply+0x50>
 800e360:	f8b3 a000 	ldrh.w	sl, [r3]
 800e364:	f1ba 0f00 	cmp.w	sl, #0
 800e368:	d020      	beq.n	800e3ac <__multiply+0xe4>
 800e36a:	f105 0e14 	add.w	lr, r5, #20
 800e36e:	46b1      	mov	r9, r6
 800e370:	2200      	movs	r2, #0
 800e372:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e376:	f8d9 b000 	ldr.w	fp, [r9]
 800e37a:	b2a1      	uxth	r1, r4
 800e37c:	fa1f fb8b 	uxth.w	fp, fp
 800e380:	fb0a b101 	mla	r1, sl, r1, fp
 800e384:	4411      	add	r1, r2
 800e386:	f8d9 2000 	ldr.w	r2, [r9]
 800e38a:	0c24      	lsrs	r4, r4, #16
 800e38c:	0c12      	lsrs	r2, r2, #16
 800e38e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e392:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e396:	b289      	uxth	r1, r1
 800e398:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e39c:	45f4      	cmp	ip, lr
 800e39e:	f849 1b04 	str.w	r1, [r9], #4
 800e3a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e3a6:	d8e4      	bhi.n	800e372 <__multiply+0xaa>
 800e3a8:	9901      	ldr	r1, [sp, #4]
 800e3aa:	5072      	str	r2, [r6, r1]
 800e3ac:	9a03      	ldr	r2, [sp, #12]
 800e3ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	f1b9 0f00 	cmp.w	r9, #0
 800e3b8:	d01f      	beq.n	800e3fa <__multiply+0x132>
 800e3ba:	6834      	ldr	r4, [r6, #0]
 800e3bc:	f105 0114 	add.w	r1, r5, #20
 800e3c0:	46b6      	mov	lr, r6
 800e3c2:	f04f 0a00 	mov.w	sl, #0
 800e3c6:	880a      	ldrh	r2, [r1, #0]
 800e3c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e3cc:	fb09 b202 	mla	r2, r9, r2, fp
 800e3d0:	4492      	add	sl, r2
 800e3d2:	b2a4      	uxth	r4, r4
 800e3d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e3d8:	f84e 4b04 	str.w	r4, [lr], #4
 800e3dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800e3e0:	f8be 2000 	ldrh.w	r2, [lr]
 800e3e4:	0c24      	lsrs	r4, r4, #16
 800e3e6:	fb09 2404 	mla	r4, r9, r4, r2
 800e3ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e3ee:	458c      	cmp	ip, r1
 800e3f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e3f4:	d8e7      	bhi.n	800e3c6 <__multiply+0xfe>
 800e3f6:	9a01      	ldr	r2, [sp, #4]
 800e3f8:	50b4      	str	r4, [r6, r2]
 800e3fa:	3604      	adds	r6, #4
 800e3fc:	e7a3      	b.n	800e346 <__multiply+0x7e>
 800e3fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1a5      	bne.n	800e352 <__multiply+0x8a>
 800e406:	3f01      	subs	r7, #1
 800e408:	e7a1      	b.n	800e34e <__multiply+0x86>
 800e40a:	bf00      	nop
 800e40c:	0800f9a3 	.word	0x0800f9a3
 800e410:	0800f9b4 	.word	0x0800f9b4

0800e414 <__pow5mult>:
 800e414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e418:	4615      	mov	r5, r2
 800e41a:	f012 0203 	ands.w	r2, r2, #3
 800e41e:	4606      	mov	r6, r0
 800e420:	460f      	mov	r7, r1
 800e422:	d007      	beq.n	800e434 <__pow5mult+0x20>
 800e424:	4c25      	ldr	r4, [pc, #148]	; (800e4bc <__pow5mult+0xa8>)
 800e426:	3a01      	subs	r2, #1
 800e428:	2300      	movs	r3, #0
 800e42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e42e:	f7ff fe9b 	bl	800e168 <__multadd>
 800e432:	4607      	mov	r7, r0
 800e434:	10ad      	asrs	r5, r5, #2
 800e436:	d03d      	beq.n	800e4b4 <__pow5mult+0xa0>
 800e438:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e43a:	b97c      	cbnz	r4, 800e45c <__pow5mult+0x48>
 800e43c:	2010      	movs	r0, #16
 800e43e:	f7fe fa5f 	bl	800c900 <malloc>
 800e442:	4602      	mov	r2, r0
 800e444:	6270      	str	r0, [r6, #36]	; 0x24
 800e446:	b928      	cbnz	r0, 800e454 <__pow5mult+0x40>
 800e448:	4b1d      	ldr	r3, [pc, #116]	; (800e4c0 <__pow5mult+0xac>)
 800e44a:	481e      	ldr	r0, [pc, #120]	; (800e4c4 <__pow5mult+0xb0>)
 800e44c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e450:	f000 f9b6 	bl	800e7c0 <__assert_func>
 800e454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e458:	6004      	str	r4, [r0, #0]
 800e45a:	60c4      	str	r4, [r0, #12]
 800e45c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e464:	b94c      	cbnz	r4, 800e47a <__pow5mult+0x66>
 800e466:	f240 2171 	movw	r1, #625	; 0x271
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff16 	bl	800e29c <__i2b>
 800e470:	2300      	movs	r3, #0
 800e472:	f8c8 0008 	str.w	r0, [r8, #8]
 800e476:	4604      	mov	r4, r0
 800e478:	6003      	str	r3, [r0, #0]
 800e47a:	f04f 0900 	mov.w	r9, #0
 800e47e:	07eb      	lsls	r3, r5, #31
 800e480:	d50a      	bpl.n	800e498 <__pow5mult+0x84>
 800e482:	4639      	mov	r1, r7
 800e484:	4622      	mov	r2, r4
 800e486:	4630      	mov	r0, r6
 800e488:	f7ff ff1e 	bl	800e2c8 <__multiply>
 800e48c:	4639      	mov	r1, r7
 800e48e:	4680      	mov	r8, r0
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff fe47 	bl	800e124 <_Bfree>
 800e496:	4647      	mov	r7, r8
 800e498:	106d      	asrs	r5, r5, #1
 800e49a:	d00b      	beq.n	800e4b4 <__pow5mult+0xa0>
 800e49c:	6820      	ldr	r0, [r4, #0]
 800e49e:	b938      	cbnz	r0, 800e4b0 <__pow5mult+0x9c>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4621      	mov	r1, r4
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7ff ff0f 	bl	800e2c8 <__multiply>
 800e4aa:	6020      	str	r0, [r4, #0]
 800e4ac:	f8c0 9000 	str.w	r9, [r0]
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	e7e4      	b.n	800e47e <__pow5mult+0x6a>
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ba:	bf00      	nop
 800e4bc:	0800fb08 	.word	0x0800fb08
 800e4c0:	0800f92d 	.word	0x0800f92d
 800e4c4:	0800f9b4 	.word	0x0800f9b4

0800e4c8 <__lshift>:
 800e4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	6849      	ldr	r1, [r1, #4]
 800e4d0:	6923      	ldr	r3, [r4, #16]
 800e4d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	4607      	mov	r7, r0
 800e4da:	4691      	mov	r9, r2
 800e4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4e0:	f108 0601 	add.w	r6, r8, #1
 800e4e4:	42b3      	cmp	r3, r6
 800e4e6:	db0b      	blt.n	800e500 <__lshift+0x38>
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff fddb 	bl	800e0a4 <_Balloc>
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	b948      	cbnz	r0, 800e506 <__lshift+0x3e>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	4b28      	ldr	r3, [pc, #160]	; (800e598 <__lshift+0xd0>)
 800e4f6:	4829      	ldr	r0, [pc, #164]	; (800e59c <__lshift+0xd4>)
 800e4f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e4fc:	f000 f960 	bl	800e7c0 <__assert_func>
 800e500:	3101      	adds	r1, #1
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	e7ee      	b.n	800e4e4 <__lshift+0x1c>
 800e506:	2300      	movs	r3, #0
 800e508:	f100 0114 	add.w	r1, r0, #20
 800e50c:	f100 0210 	add.w	r2, r0, #16
 800e510:	4618      	mov	r0, r3
 800e512:	4553      	cmp	r3, sl
 800e514:	db33      	blt.n	800e57e <__lshift+0xb6>
 800e516:	6920      	ldr	r0, [r4, #16]
 800e518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e51c:	f104 0314 	add.w	r3, r4, #20
 800e520:	f019 091f 	ands.w	r9, r9, #31
 800e524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e528:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e52c:	d02b      	beq.n	800e586 <__lshift+0xbe>
 800e52e:	f1c9 0e20 	rsb	lr, r9, #32
 800e532:	468a      	mov	sl, r1
 800e534:	2200      	movs	r2, #0
 800e536:	6818      	ldr	r0, [r3, #0]
 800e538:	fa00 f009 	lsl.w	r0, r0, r9
 800e53c:	4302      	orrs	r2, r0
 800e53e:	f84a 2b04 	str.w	r2, [sl], #4
 800e542:	f853 2b04 	ldr.w	r2, [r3], #4
 800e546:	459c      	cmp	ip, r3
 800e548:	fa22 f20e 	lsr.w	r2, r2, lr
 800e54c:	d8f3      	bhi.n	800e536 <__lshift+0x6e>
 800e54e:	ebac 0304 	sub.w	r3, ip, r4
 800e552:	3b15      	subs	r3, #21
 800e554:	f023 0303 	bic.w	r3, r3, #3
 800e558:	3304      	adds	r3, #4
 800e55a:	f104 0015 	add.w	r0, r4, #21
 800e55e:	4584      	cmp	ip, r0
 800e560:	bf38      	it	cc
 800e562:	2304      	movcc	r3, #4
 800e564:	50ca      	str	r2, [r1, r3]
 800e566:	b10a      	cbz	r2, 800e56c <__lshift+0xa4>
 800e568:	f108 0602 	add.w	r6, r8, #2
 800e56c:	3e01      	subs	r6, #1
 800e56e:	4638      	mov	r0, r7
 800e570:	612e      	str	r6, [r5, #16]
 800e572:	4621      	mov	r1, r4
 800e574:	f7ff fdd6 	bl	800e124 <_Bfree>
 800e578:	4628      	mov	r0, r5
 800e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e582:	3301      	adds	r3, #1
 800e584:	e7c5      	b.n	800e512 <__lshift+0x4a>
 800e586:	3904      	subs	r1, #4
 800e588:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e590:	459c      	cmp	ip, r3
 800e592:	d8f9      	bhi.n	800e588 <__lshift+0xc0>
 800e594:	e7ea      	b.n	800e56c <__lshift+0xa4>
 800e596:	bf00      	nop
 800e598:	0800f9a3 	.word	0x0800f9a3
 800e59c:	0800f9b4 	.word	0x0800f9b4

0800e5a0 <__mcmp>:
 800e5a0:	b530      	push	{r4, r5, lr}
 800e5a2:	6902      	ldr	r2, [r0, #16]
 800e5a4:	690c      	ldr	r4, [r1, #16]
 800e5a6:	1b12      	subs	r2, r2, r4
 800e5a8:	d10e      	bne.n	800e5c8 <__mcmp+0x28>
 800e5aa:	f100 0314 	add.w	r3, r0, #20
 800e5ae:	3114      	adds	r1, #20
 800e5b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5c0:	42a5      	cmp	r5, r4
 800e5c2:	d003      	beq.n	800e5cc <__mcmp+0x2c>
 800e5c4:	d305      	bcc.n	800e5d2 <__mcmp+0x32>
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	bd30      	pop	{r4, r5, pc}
 800e5cc:	4283      	cmp	r3, r0
 800e5ce:	d3f3      	bcc.n	800e5b8 <__mcmp+0x18>
 800e5d0:	e7fa      	b.n	800e5c8 <__mcmp+0x28>
 800e5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d6:	e7f7      	b.n	800e5c8 <__mcmp+0x28>

0800e5d8 <__mdiff>:
 800e5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	460c      	mov	r4, r1
 800e5de:	4606      	mov	r6, r0
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4617      	mov	r7, r2
 800e5e6:	f7ff ffdb 	bl	800e5a0 <__mcmp>
 800e5ea:	1e05      	subs	r5, r0, #0
 800e5ec:	d110      	bne.n	800e610 <__mdiff+0x38>
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f7ff fd57 	bl	800e0a4 <_Balloc>
 800e5f6:	b930      	cbnz	r0, 800e606 <__mdiff+0x2e>
 800e5f8:	4b39      	ldr	r3, [pc, #228]	; (800e6e0 <__mdiff+0x108>)
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	f240 2132 	movw	r1, #562	; 0x232
 800e600:	4838      	ldr	r0, [pc, #224]	; (800e6e4 <__mdiff+0x10c>)
 800e602:	f000 f8dd 	bl	800e7c0 <__assert_func>
 800e606:	2301      	movs	r3, #1
 800e608:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	bfa4      	itt	ge
 800e612:	463b      	movge	r3, r7
 800e614:	4627      	movge	r7, r4
 800e616:	4630      	mov	r0, r6
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	bfa6      	itte	ge
 800e61c:	461c      	movge	r4, r3
 800e61e:	2500      	movge	r5, #0
 800e620:	2501      	movlt	r5, #1
 800e622:	f7ff fd3f 	bl	800e0a4 <_Balloc>
 800e626:	b920      	cbnz	r0, 800e632 <__mdiff+0x5a>
 800e628:	4b2d      	ldr	r3, [pc, #180]	; (800e6e0 <__mdiff+0x108>)
 800e62a:	4602      	mov	r2, r0
 800e62c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e630:	e7e6      	b.n	800e600 <__mdiff+0x28>
 800e632:	693e      	ldr	r6, [r7, #16]
 800e634:	60c5      	str	r5, [r0, #12]
 800e636:	6925      	ldr	r5, [r4, #16]
 800e638:	f107 0114 	add.w	r1, r7, #20
 800e63c:	f104 0914 	add.w	r9, r4, #20
 800e640:	f100 0e14 	add.w	lr, r0, #20
 800e644:	f107 0210 	add.w	r2, r7, #16
 800e648:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e64c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e650:	46f2      	mov	sl, lr
 800e652:	2700      	movs	r7, #0
 800e654:	f859 3b04 	ldr.w	r3, [r9], #4
 800e658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e65c:	fa1f f883 	uxth.w	r8, r3
 800e660:	fa17 f78b 	uxtah	r7, r7, fp
 800e664:	0c1b      	lsrs	r3, r3, #16
 800e666:	eba7 0808 	sub.w	r8, r7, r8
 800e66a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e66e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e672:	fa1f f888 	uxth.w	r8, r8
 800e676:	141f      	asrs	r7, r3, #16
 800e678:	454d      	cmp	r5, r9
 800e67a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e67e:	f84a 3b04 	str.w	r3, [sl], #4
 800e682:	d8e7      	bhi.n	800e654 <__mdiff+0x7c>
 800e684:	1b2b      	subs	r3, r5, r4
 800e686:	3b15      	subs	r3, #21
 800e688:	f023 0303 	bic.w	r3, r3, #3
 800e68c:	3304      	adds	r3, #4
 800e68e:	3415      	adds	r4, #21
 800e690:	42a5      	cmp	r5, r4
 800e692:	bf38      	it	cc
 800e694:	2304      	movcc	r3, #4
 800e696:	4419      	add	r1, r3
 800e698:	4473      	add	r3, lr
 800e69a:	469e      	mov	lr, r3
 800e69c:	460d      	mov	r5, r1
 800e69e:	4565      	cmp	r5, ip
 800e6a0:	d30e      	bcc.n	800e6c0 <__mdiff+0xe8>
 800e6a2:	f10c 0203 	add.w	r2, ip, #3
 800e6a6:	1a52      	subs	r2, r2, r1
 800e6a8:	f022 0203 	bic.w	r2, r2, #3
 800e6ac:	3903      	subs	r1, #3
 800e6ae:	458c      	cmp	ip, r1
 800e6b0:	bf38      	it	cc
 800e6b2:	2200      	movcc	r2, #0
 800e6b4:	441a      	add	r2, r3
 800e6b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6ba:	b17b      	cbz	r3, 800e6dc <__mdiff+0x104>
 800e6bc:	6106      	str	r6, [r0, #16]
 800e6be:	e7a5      	b.n	800e60c <__mdiff+0x34>
 800e6c0:	f855 8b04 	ldr.w	r8, [r5], #4
 800e6c4:	fa17 f488 	uxtah	r4, r7, r8
 800e6c8:	1422      	asrs	r2, r4, #16
 800e6ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e6ce:	b2a4      	uxth	r4, r4
 800e6d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e6d4:	f84e 4b04 	str.w	r4, [lr], #4
 800e6d8:	1417      	asrs	r7, r2, #16
 800e6da:	e7e0      	b.n	800e69e <__mdiff+0xc6>
 800e6dc:	3e01      	subs	r6, #1
 800e6de:	e7ea      	b.n	800e6b6 <__mdiff+0xde>
 800e6e0:	0800f9a3 	.word	0x0800f9a3
 800e6e4:	0800f9b4 	.word	0x0800f9b4

0800e6e8 <__d2b>:
 800e6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6ec:	4689      	mov	r9, r1
 800e6ee:	2101      	movs	r1, #1
 800e6f0:	ec57 6b10 	vmov	r6, r7, d0
 800e6f4:	4690      	mov	r8, r2
 800e6f6:	f7ff fcd5 	bl	800e0a4 <_Balloc>
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	b930      	cbnz	r0, 800e70c <__d2b+0x24>
 800e6fe:	4602      	mov	r2, r0
 800e700:	4b25      	ldr	r3, [pc, #148]	; (800e798 <__d2b+0xb0>)
 800e702:	4826      	ldr	r0, [pc, #152]	; (800e79c <__d2b+0xb4>)
 800e704:	f240 310a 	movw	r1, #778	; 0x30a
 800e708:	f000 f85a 	bl	800e7c0 <__assert_func>
 800e70c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e714:	bb35      	cbnz	r5, 800e764 <__d2b+0x7c>
 800e716:	2e00      	cmp	r6, #0
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	d028      	beq.n	800e76e <__d2b+0x86>
 800e71c:	4668      	mov	r0, sp
 800e71e:	9600      	str	r6, [sp, #0]
 800e720:	f7ff fd8c 	bl	800e23c <__lo0bits>
 800e724:	9900      	ldr	r1, [sp, #0]
 800e726:	b300      	cbz	r0, 800e76a <__d2b+0x82>
 800e728:	9a01      	ldr	r2, [sp, #4]
 800e72a:	f1c0 0320 	rsb	r3, r0, #32
 800e72e:	fa02 f303 	lsl.w	r3, r2, r3
 800e732:	430b      	orrs	r3, r1
 800e734:	40c2      	lsrs	r2, r0
 800e736:	6163      	str	r3, [r4, #20]
 800e738:	9201      	str	r2, [sp, #4]
 800e73a:	9b01      	ldr	r3, [sp, #4]
 800e73c:	61a3      	str	r3, [r4, #24]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	bf14      	ite	ne
 800e742:	2202      	movne	r2, #2
 800e744:	2201      	moveq	r2, #1
 800e746:	6122      	str	r2, [r4, #16]
 800e748:	b1d5      	cbz	r5, 800e780 <__d2b+0x98>
 800e74a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e74e:	4405      	add	r5, r0
 800e750:	f8c9 5000 	str.w	r5, [r9]
 800e754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e758:	f8c8 0000 	str.w	r0, [r8]
 800e75c:	4620      	mov	r0, r4
 800e75e:	b003      	add	sp, #12
 800e760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e768:	e7d5      	b.n	800e716 <__d2b+0x2e>
 800e76a:	6161      	str	r1, [r4, #20]
 800e76c:	e7e5      	b.n	800e73a <__d2b+0x52>
 800e76e:	a801      	add	r0, sp, #4
 800e770:	f7ff fd64 	bl	800e23c <__lo0bits>
 800e774:	9b01      	ldr	r3, [sp, #4]
 800e776:	6163      	str	r3, [r4, #20]
 800e778:	2201      	movs	r2, #1
 800e77a:	6122      	str	r2, [r4, #16]
 800e77c:	3020      	adds	r0, #32
 800e77e:	e7e3      	b.n	800e748 <__d2b+0x60>
 800e780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e788:	f8c9 0000 	str.w	r0, [r9]
 800e78c:	6918      	ldr	r0, [r3, #16]
 800e78e:	f7ff fd35 	bl	800e1fc <__hi0bits>
 800e792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e796:	e7df      	b.n	800e758 <__d2b+0x70>
 800e798:	0800f9a3 	.word	0x0800f9a3
 800e79c:	0800f9b4 	.word	0x0800f9b4

0800e7a0 <_calloc_r>:
 800e7a0:	b513      	push	{r0, r1, r4, lr}
 800e7a2:	434a      	muls	r2, r1
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	9201      	str	r2, [sp, #4]
 800e7a8:	f7fe f912 	bl	800c9d0 <_malloc_r>
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	b118      	cbz	r0, 800e7b8 <_calloc_r+0x18>
 800e7b0:	9a01      	ldr	r2, [sp, #4]
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	f7fe f8b4 	bl	800c920 <memset>
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd10      	pop	{r4, pc}
	...

0800e7c0 <__assert_func>:
 800e7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <__assert_func+0x2c>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	68d8      	ldr	r0, [r3, #12]
 800e7ce:	b14c      	cbz	r4, 800e7e4 <__assert_func+0x24>
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <__assert_func+0x30>)
 800e7d2:	9100      	str	r1, [sp, #0]
 800e7d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7d8:	4906      	ldr	r1, [pc, #24]	; (800e7f4 <__assert_func+0x34>)
 800e7da:	462b      	mov	r3, r5
 800e7dc:	f000 f80e 	bl	800e7fc <fiprintf>
 800e7e0:	f000 fa5a 	bl	800ec98 <abort>
 800e7e4:	4b04      	ldr	r3, [pc, #16]	; (800e7f8 <__assert_func+0x38>)
 800e7e6:	461c      	mov	r4, r3
 800e7e8:	e7f3      	b.n	800e7d2 <__assert_func+0x12>
 800e7ea:	bf00      	nop
 800e7ec:	2000001c 	.word	0x2000001c
 800e7f0:	0800fb14 	.word	0x0800fb14
 800e7f4:	0800fb21 	.word	0x0800fb21
 800e7f8:	0800fb4f 	.word	0x0800fb4f

0800e7fc <fiprintf>:
 800e7fc:	b40e      	push	{r1, r2, r3}
 800e7fe:	b503      	push	{r0, r1, lr}
 800e800:	4601      	mov	r1, r0
 800e802:	ab03      	add	r3, sp, #12
 800e804:	4805      	ldr	r0, [pc, #20]	; (800e81c <fiprintf+0x20>)
 800e806:	f853 2b04 	ldr.w	r2, [r3], #4
 800e80a:	6800      	ldr	r0, [r0, #0]
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	f000 f845 	bl	800e89c <_vfiprintf_r>
 800e812:	b002      	add	sp, #8
 800e814:	f85d eb04 	ldr.w	lr, [sp], #4
 800e818:	b003      	add	sp, #12
 800e81a:	4770      	bx	lr
 800e81c:	2000001c 	.word	0x2000001c

0800e820 <__retarget_lock_init_recursive>:
 800e820:	4770      	bx	lr

0800e822 <__retarget_lock_acquire_recursive>:
 800e822:	4770      	bx	lr

0800e824 <__retarget_lock_release_recursive>:
 800e824:	4770      	bx	lr

0800e826 <__ascii_mbtowc>:
 800e826:	b082      	sub	sp, #8
 800e828:	b901      	cbnz	r1, 800e82c <__ascii_mbtowc+0x6>
 800e82a:	a901      	add	r1, sp, #4
 800e82c:	b142      	cbz	r2, 800e840 <__ascii_mbtowc+0x1a>
 800e82e:	b14b      	cbz	r3, 800e844 <__ascii_mbtowc+0x1e>
 800e830:	7813      	ldrb	r3, [r2, #0]
 800e832:	600b      	str	r3, [r1, #0]
 800e834:	7812      	ldrb	r2, [r2, #0]
 800e836:	1e10      	subs	r0, r2, #0
 800e838:	bf18      	it	ne
 800e83a:	2001      	movne	r0, #1
 800e83c:	b002      	add	sp, #8
 800e83e:	4770      	bx	lr
 800e840:	4610      	mov	r0, r2
 800e842:	e7fb      	b.n	800e83c <__ascii_mbtowc+0x16>
 800e844:	f06f 0001 	mvn.w	r0, #1
 800e848:	e7f8      	b.n	800e83c <__ascii_mbtowc+0x16>

0800e84a <__sfputc_r>:
 800e84a:	6893      	ldr	r3, [r2, #8]
 800e84c:	3b01      	subs	r3, #1
 800e84e:	2b00      	cmp	r3, #0
 800e850:	b410      	push	{r4}
 800e852:	6093      	str	r3, [r2, #8]
 800e854:	da08      	bge.n	800e868 <__sfputc_r+0x1e>
 800e856:	6994      	ldr	r4, [r2, #24]
 800e858:	42a3      	cmp	r3, r4
 800e85a:	db01      	blt.n	800e860 <__sfputc_r+0x16>
 800e85c:	290a      	cmp	r1, #10
 800e85e:	d103      	bne.n	800e868 <__sfputc_r+0x1e>
 800e860:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e864:	f000 b94a 	b.w	800eafc <__swbuf_r>
 800e868:	6813      	ldr	r3, [r2, #0]
 800e86a:	1c58      	adds	r0, r3, #1
 800e86c:	6010      	str	r0, [r2, #0]
 800e86e:	7019      	strb	r1, [r3, #0]
 800e870:	4608      	mov	r0, r1
 800e872:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <__sfputs_r>:
 800e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e87a:	4606      	mov	r6, r0
 800e87c:	460f      	mov	r7, r1
 800e87e:	4614      	mov	r4, r2
 800e880:	18d5      	adds	r5, r2, r3
 800e882:	42ac      	cmp	r4, r5
 800e884:	d101      	bne.n	800e88a <__sfputs_r+0x12>
 800e886:	2000      	movs	r0, #0
 800e888:	e007      	b.n	800e89a <__sfputs_r+0x22>
 800e88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88e:	463a      	mov	r2, r7
 800e890:	4630      	mov	r0, r6
 800e892:	f7ff ffda 	bl	800e84a <__sfputc_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d1f3      	bne.n	800e882 <__sfputs_r+0xa>
 800e89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e89c <_vfiprintf_r>:
 800e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a0:	460d      	mov	r5, r1
 800e8a2:	b09d      	sub	sp, #116	; 0x74
 800e8a4:	4614      	mov	r4, r2
 800e8a6:	4698      	mov	r8, r3
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	b118      	cbz	r0, 800e8b4 <_vfiprintf_r+0x18>
 800e8ac:	6983      	ldr	r3, [r0, #24]
 800e8ae:	b90b      	cbnz	r3, 800e8b4 <_vfiprintf_r+0x18>
 800e8b0:	f000 fb14 	bl	800eedc <__sinit>
 800e8b4:	4b89      	ldr	r3, [pc, #548]	; (800eadc <_vfiprintf_r+0x240>)
 800e8b6:	429d      	cmp	r5, r3
 800e8b8:	d11b      	bne.n	800e8f2 <_vfiprintf_r+0x56>
 800e8ba:	6875      	ldr	r5, [r6, #4]
 800e8bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8be:	07d9      	lsls	r1, r3, #31
 800e8c0:	d405      	bmi.n	800e8ce <_vfiprintf_r+0x32>
 800e8c2:	89ab      	ldrh	r3, [r5, #12]
 800e8c4:	059a      	lsls	r2, r3, #22
 800e8c6:	d402      	bmi.n	800e8ce <_vfiprintf_r+0x32>
 800e8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ca:	f7ff ffaa 	bl	800e822 <__retarget_lock_acquire_recursive>
 800e8ce:	89ab      	ldrh	r3, [r5, #12]
 800e8d0:	071b      	lsls	r3, r3, #28
 800e8d2:	d501      	bpl.n	800e8d8 <_vfiprintf_r+0x3c>
 800e8d4:	692b      	ldr	r3, [r5, #16]
 800e8d6:	b9eb      	cbnz	r3, 800e914 <_vfiprintf_r+0x78>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f000 f96e 	bl	800ebbc <__swsetup_r>
 800e8e0:	b1c0      	cbz	r0, 800e914 <_vfiprintf_r+0x78>
 800e8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e4:	07dc      	lsls	r4, r3, #31
 800e8e6:	d50e      	bpl.n	800e906 <_vfiprintf_r+0x6a>
 800e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ec:	b01d      	add	sp, #116	; 0x74
 800e8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f2:	4b7b      	ldr	r3, [pc, #492]	; (800eae0 <_vfiprintf_r+0x244>)
 800e8f4:	429d      	cmp	r5, r3
 800e8f6:	d101      	bne.n	800e8fc <_vfiprintf_r+0x60>
 800e8f8:	68b5      	ldr	r5, [r6, #8]
 800e8fa:	e7df      	b.n	800e8bc <_vfiprintf_r+0x20>
 800e8fc:	4b79      	ldr	r3, [pc, #484]	; (800eae4 <_vfiprintf_r+0x248>)
 800e8fe:	429d      	cmp	r5, r3
 800e900:	bf08      	it	eq
 800e902:	68f5      	ldreq	r5, [r6, #12]
 800e904:	e7da      	b.n	800e8bc <_vfiprintf_r+0x20>
 800e906:	89ab      	ldrh	r3, [r5, #12]
 800e908:	0598      	lsls	r0, r3, #22
 800e90a:	d4ed      	bmi.n	800e8e8 <_vfiprintf_r+0x4c>
 800e90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e90e:	f7ff ff89 	bl	800e824 <__retarget_lock_release_recursive>
 800e912:	e7e9      	b.n	800e8e8 <_vfiprintf_r+0x4c>
 800e914:	2300      	movs	r3, #0
 800e916:	9309      	str	r3, [sp, #36]	; 0x24
 800e918:	2320      	movs	r3, #32
 800e91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e922:	2330      	movs	r3, #48	; 0x30
 800e924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eae8 <_vfiprintf_r+0x24c>
 800e928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e92c:	f04f 0901 	mov.w	r9, #1
 800e930:	4623      	mov	r3, r4
 800e932:	469a      	mov	sl, r3
 800e934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e938:	b10a      	cbz	r2, 800e93e <_vfiprintf_r+0xa2>
 800e93a:	2a25      	cmp	r2, #37	; 0x25
 800e93c:	d1f9      	bne.n	800e932 <_vfiprintf_r+0x96>
 800e93e:	ebba 0b04 	subs.w	fp, sl, r4
 800e942:	d00b      	beq.n	800e95c <_vfiprintf_r+0xc0>
 800e944:	465b      	mov	r3, fp
 800e946:	4622      	mov	r2, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	4630      	mov	r0, r6
 800e94c:	f7ff ff94 	bl	800e878 <__sfputs_r>
 800e950:	3001      	adds	r0, #1
 800e952:	f000 80aa 	beq.w	800eaaa <_vfiprintf_r+0x20e>
 800e956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e958:	445a      	add	r2, fp
 800e95a:	9209      	str	r2, [sp, #36]	; 0x24
 800e95c:	f89a 3000 	ldrb.w	r3, [sl]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 80a2 	beq.w	800eaaa <_vfiprintf_r+0x20e>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 32ff 	mov.w	r2, #4294967295
 800e96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e970:	f10a 0a01 	add.w	sl, sl, #1
 800e974:	9304      	str	r3, [sp, #16]
 800e976:	9307      	str	r3, [sp, #28]
 800e978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e97c:	931a      	str	r3, [sp, #104]	; 0x68
 800e97e:	4654      	mov	r4, sl
 800e980:	2205      	movs	r2, #5
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	4858      	ldr	r0, [pc, #352]	; (800eae8 <_vfiprintf_r+0x24c>)
 800e988:	f7f1 fc2a 	bl	80001e0 <memchr>
 800e98c:	9a04      	ldr	r2, [sp, #16]
 800e98e:	b9d8      	cbnz	r0, 800e9c8 <_vfiprintf_r+0x12c>
 800e990:	06d1      	lsls	r1, r2, #27
 800e992:	bf44      	itt	mi
 800e994:	2320      	movmi	r3, #32
 800e996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e99a:	0713      	lsls	r3, r2, #28
 800e99c:	bf44      	itt	mi
 800e99e:	232b      	movmi	r3, #43	; 0x2b
 800e9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9aa:	d015      	beq.n	800e9d8 <_vfiprintf_r+0x13c>
 800e9ac:	9a07      	ldr	r2, [sp, #28]
 800e9ae:	4654      	mov	r4, sl
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9bc:	3b30      	subs	r3, #48	; 0x30
 800e9be:	2b09      	cmp	r3, #9
 800e9c0:	d94e      	bls.n	800ea60 <_vfiprintf_r+0x1c4>
 800e9c2:	b1b0      	cbz	r0, 800e9f2 <_vfiprintf_r+0x156>
 800e9c4:	9207      	str	r2, [sp, #28]
 800e9c6:	e014      	b.n	800e9f2 <_vfiprintf_r+0x156>
 800e9c8:	eba0 0308 	sub.w	r3, r0, r8
 800e9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	46a2      	mov	sl, r4
 800e9d6:	e7d2      	b.n	800e97e <_vfiprintf_r+0xe2>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	1d19      	adds	r1, r3, #4
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	9103      	str	r1, [sp, #12]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfbb      	ittet	lt
 800e9e4:	425b      	neglt	r3, r3
 800e9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9ea:	9307      	strge	r3, [sp, #28]
 800e9ec:	9307      	strlt	r3, [sp, #28]
 800e9ee:	bfb8      	it	lt
 800e9f0:	9204      	strlt	r2, [sp, #16]
 800e9f2:	7823      	ldrb	r3, [r4, #0]
 800e9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f6:	d10c      	bne.n	800ea12 <_vfiprintf_r+0x176>
 800e9f8:	7863      	ldrb	r3, [r4, #1]
 800e9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e9fc:	d135      	bne.n	800ea6a <_vfiprintf_r+0x1ce>
 800e9fe:	9b03      	ldr	r3, [sp, #12]
 800ea00:	1d1a      	adds	r2, r3, #4
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	9203      	str	r2, [sp, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	bfb8      	it	lt
 800ea0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea0e:	3402      	adds	r4, #2
 800ea10:	9305      	str	r3, [sp, #20]
 800ea12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eaf8 <_vfiprintf_r+0x25c>
 800ea16:	7821      	ldrb	r1, [r4, #0]
 800ea18:	2203      	movs	r2, #3
 800ea1a:	4650      	mov	r0, sl
 800ea1c:	f7f1 fbe0 	bl	80001e0 <memchr>
 800ea20:	b140      	cbz	r0, 800ea34 <_vfiprintf_r+0x198>
 800ea22:	2340      	movs	r3, #64	; 0x40
 800ea24:	eba0 000a 	sub.w	r0, r0, sl
 800ea28:	fa03 f000 	lsl.w	r0, r3, r0
 800ea2c:	9b04      	ldr	r3, [sp, #16]
 800ea2e:	4303      	orrs	r3, r0
 800ea30:	3401      	adds	r4, #1
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea38:	482c      	ldr	r0, [pc, #176]	; (800eaec <_vfiprintf_r+0x250>)
 800ea3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea3e:	2206      	movs	r2, #6
 800ea40:	f7f1 fbce 	bl	80001e0 <memchr>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d03f      	beq.n	800eac8 <_vfiprintf_r+0x22c>
 800ea48:	4b29      	ldr	r3, [pc, #164]	; (800eaf0 <_vfiprintf_r+0x254>)
 800ea4a:	bb1b      	cbnz	r3, 800ea94 <_vfiprintf_r+0x1f8>
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	3307      	adds	r3, #7
 800ea50:	f023 0307 	bic.w	r3, r3, #7
 800ea54:	3308      	adds	r3, #8
 800ea56:	9303      	str	r3, [sp, #12]
 800ea58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5a:	443b      	add	r3, r7
 800ea5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea5e:	e767      	b.n	800e930 <_vfiprintf_r+0x94>
 800ea60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea64:	460c      	mov	r4, r1
 800ea66:	2001      	movs	r0, #1
 800ea68:	e7a5      	b.n	800e9b6 <_vfiprintf_r+0x11a>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	3401      	adds	r4, #1
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	4619      	mov	r1, r3
 800ea72:	f04f 0c0a 	mov.w	ip, #10
 800ea76:	4620      	mov	r0, r4
 800ea78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea7c:	3a30      	subs	r2, #48	; 0x30
 800ea7e:	2a09      	cmp	r2, #9
 800ea80:	d903      	bls.n	800ea8a <_vfiprintf_r+0x1ee>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0c5      	beq.n	800ea12 <_vfiprintf_r+0x176>
 800ea86:	9105      	str	r1, [sp, #20]
 800ea88:	e7c3      	b.n	800ea12 <_vfiprintf_r+0x176>
 800ea8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea8e:	4604      	mov	r4, r0
 800ea90:	2301      	movs	r3, #1
 800ea92:	e7f0      	b.n	800ea76 <_vfiprintf_r+0x1da>
 800ea94:	ab03      	add	r3, sp, #12
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	462a      	mov	r2, r5
 800ea9a:	4b16      	ldr	r3, [pc, #88]	; (800eaf4 <_vfiprintf_r+0x258>)
 800ea9c:	a904      	add	r1, sp, #16
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f7fe f890 	bl	800cbc4 <_printf_float>
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	1c78      	adds	r0, r7, #1
 800eaa8:	d1d6      	bne.n	800ea58 <_vfiprintf_r+0x1bc>
 800eaaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaac:	07d9      	lsls	r1, r3, #31
 800eaae:	d405      	bmi.n	800eabc <_vfiprintf_r+0x220>
 800eab0:	89ab      	ldrh	r3, [r5, #12]
 800eab2:	059a      	lsls	r2, r3, #22
 800eab4:	d402      	bmi.n	800eabc <_vfiprintf_r+0x220>
 800eab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eab8:	f7ff feb4 	bl	800e824 <__retarget_lock_release_recursive>
 800eabc:	89ab      	ldrh	r3, [r5, #12]
 800eabe:	065b      	lsls	r3, r3, #25
 800eac0:	f53f af12 	bmi.w	800e8e8 <_vfiprintf_r+0x4c>
 800eac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eac6:	e711      	b.n	800e8ec <_vfiprintf_r+0x50>
 800eac8:	ab03      	add	r3, sp, #12
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	462a      	mov	r2, r5
 800eace:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <_vfiprintf_r+0x258>)
 800ead0:	a904      	add	r1, sp, #16
 800ead2:	4630      	mov	r0, r6
 800ead4:	f7fe fb1a 	bl	800d10c <_printf_i>
 800ead8:	e7e4      	b.n	800eaa4 <_vfiprintf_r+0x208>
 800eada:	bf00      	nop
 800eadc:	0800fc8c 	.word	0x0800fc8c
 800eae0:	0800fcac 	.word	0x0800fcac
 800eae4:	0800fc6c 	.word	0x0800fc6c
 800eae8:	0800fb5a 	.word	0x0800fb5a
 800eaec:	0800fb64 	.word	0x0800fb64
 800eaf0:	0800cbc5 	.word	0x0800cbc5
 800eaf4:	0800e879 	.word	0x0800e879
 800eaf8:	0800fb60 	.word	0x0800fb60

0800eafc <__swbuf_r>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	460e      	mov	r6, r1
 800eb00:	4614      	mov	r4, r2
 800eb02:	4605      	mov	r5, r0
 800eb04:	b118      	cbz	r0, 800eb0e <__swbuf_r+0x12>
 800eb06:	6983      	ldr	r3, [r0, #24]
 800eb08:	b90b      	cbnz	r3, 800eb0e <__swbuf_r+0x12>
 800eb0a:	f000 f9e7 	bl	800eedc <__sinit>
 800eb0e:	4b21      	ldr	r3, [pc, #132]	; (800eb94 <__swbuf_r+0x98>)
 800eb10:	429c      	cmp	r4, r3
 800eb12:	d12b      	bne.n	800eb6c <__swbuf_r+0x70>
 800eb14:	686c      	ldr	r4, [r5, #4]
 800eb16:	69a3      	ldr	r3, [r4, #24]
 800eb18:	60a3      	str	r3, [r4, #8]
 800eb1a:	89a3      	ldrh	r3, [r4, #12]
 800eb1c:	071a      	lsls	r2, r3, #28
 800eb1e:	d52f      	bpl.n	800eb80 <__swbuf_r+0x84>
 800eb20:	6923      	ldr	r3, [r4, #16]
 800eb22:	b36b      	cbz	r3, 800eb80 <__swbuf_r+0x84>
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	6820      	ldr	r0, [r4, #0]
 800eb28:	1ac0      	subs	r0, r0, r3
 800eb2a:	6963      	ldr	r3, [r4, #20]
 800eb2c:	b2f6      	uxtb	r6, r6
 800eb2e:	4283      	cmp	r3, r0
 800eb30:	4637      	mov	r7, r6
 800eb32:	dc04      	bgt.n	800eb3e <__swbuf_r+0x42>
 800eb34:	4621      	mov	r1, r4
 800eb36:	4628      	mov	r0, r5
 800eb38:	f000 f93c 	bl	800edb4 <_fflush_r>
 800eb3c:	bb30      	cbnz	r0, 800eb8c <__swbuf_r+0x90>
 800eb3e:	68a3      	ldr	r3, [r4, #8]
 800eb40:	3b01      	subs	r3, #1
 800eb42:	60a3      	str	r3, [r4, #8]
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	6022      	str	r2, [r4, #0]
 800eb4a:	701e      	strb	r6, [r3, #0]
 800eb4c:	6963      	ldr	r3, [r4, #20]
 800eb4e:	3001      	adds	r0, #1
 800eb50:	4283      	cmp	r3, r0
 800eb52:	d004      	beq.n	800eb5e <__swbuf_r+0x62>
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	07db      	lsls	r3, r3, #31
 800eb58:	d506      	bpl.n	800eb68 <__swbuf_r+0x6c>
 800eb5a:	2e0a      	cmp	r6, #10
 800eb5c:	d104      	bne.n	800eb68 <__swbuf_r+0x6c>
 800eb5e:	4621      	mov	r1, r4
 800eb60:	4628      	mov	r0, r5
 800eb62:	f000 f927 	bl	800edb4 <_fflush_r>
 800eb66:	b988      	cbnz	r0, 800eb8c <__swbuf_r+0x90>
 800eb68:	4638      	mov	r0, r7
 800eb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <__swbuf_r+0x9c>)
 800eb6e:	429c      	cmp	r4, r3
 800eb70:	d101      	bne.n	800eb76 <__swbuf_r+0x7a>
 800eb72:	68ac      	ldr	r4, [r5, #8]
 800eb74:	e7cf      	b.n	800eb16 <__swbuf_r+0x1a>
 800eb76:	4b09      	ldr	r3, [pc, #36]	; (800eb9c <__swbuf_r+0xa0>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	bf08      	it	eq
 800eb7c:	68ec      	ldreq	r4, [r5, #12]
 800eb7e:	e7ca      	b.n	800eb16 <__swbuf_r+0x1a>
 800eb80:	4621      	mov	r1, r4
 800eb82:	4628      	mov	r0, r5
 800eb84:	f000 f81a 	bl	800ebbc <__swsetup_r>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d0cb      	beq.n	800eb24 <__swbuf_r+0x28>
 800eb8c:	f04f 37ff 	mov.w	r7, #4294967295
 800eb90:	e7ea      	b.n	800eb68 <__swbuf_r+0x6c>
 800eb92:	bf00      	nop
 800eb94:	0800fc8c 	.word	0x0800fc8c
 800eb98:	0800fcac 	.word	0x0800fcac
 800eb9c:	0800fc6c 	.word	0x0800fc6c

0800eba0 <__ascii_wctomb>:
 800eba0:	b149      	cbz	r1, 800ebb6 <__ascii_wctomb+0x16>
 800eba2:	2aff      	cmp	r2, #255	; 0xff
 800eba4:	bf85      	ittet	hi
 800eba6:	238a      	movhi	r3, #138	; 0x8a
 800eba8:	6003      	strhi	r3, [r0, #0]
 800ebaa:	700a      	strbls	r2, [r1, #0]
 800ebac:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebb0:	bf98      	it	ls
 800ebb2:	2001      	movls	r0, #1
 800ebb4:	4770      	bx	lr
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4770      	bx	lr
	...

0800ebbc <__swsetup_r>:
 800ebbc:	4b32      	ldr	r3, [pc, #200]	; (800ec88 <__swsetup_r+0xcc>)
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	681d      	ldr	r5, [r3, #0]
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	b125      	cbz	r5, 800ebd2 <__swsetup_r+0x16>
 800ebc8:	69ab      	ldr	r3, [r5, #24]
 800ebca:	b913      	cbnz	r3, 800ebd2 <__swsetup_r+0x16>
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f000 f985 	bl	800eedc <__sinit>
 800ebd2:	4b2e      	ldr	r3, [pc, #184]	; (800ec8c <__swsetup_r+0xd0>)
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d10f      	bne.n	800ebf8 <__swsetup_r+0x3c>
 800ebd8:	686c      	ldr	r4, [r5, #4]
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebe0:	0719      	lsls	r1, r3, #28
 800ebe2:	d42c      	bmi.n	800ec3e <__swsetup_r+0x82>
 800ebe4:	06dd      	lsls	r5, r3, #27
 800ebe6:	d411      	bmi.n	800ec0c <__swsetup_r+0x50>
 800ebe8:	2309      	movs	r3, #9
 800ebea:	6033      	str	r3, [r6, #0]
 800ebec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf6:	e03e      	b.n	800ec76 <__swsetup_r+0xba>
 800ebf8:	4b25      	ldr	r3, [pc, #148]	; (800ec90 <__swsetup_r+0xd4>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d101      	bne.n	800ec02 <__swsetup_r+0x46>
 800ebfe:	68ac      	ldr	r4, [r5, #8]
 800ec00:	e7eb      	b.n	800ebda <__swsetup_r+0x1e>
 800ec02:	4b24      	ldr	r3, [pc, #144]	; (800ec94 <__swsetup_r+0xd8>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	bf08      	it	eq
 800ec08:	68ec      	ldreq	r4, [r5, #12]
 800ec0a:	e7e6      	b.n	800ebda <__swsetup_r+0x1e>
 800ec0c:	0758      	lsls	r0, r3, #29
 800ec0e:	d512      	bpl.n	800ec36 <__swsetup_r+0x7a>
 800ec10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec12:	b141      	cbz	r1, 800ec26 <__swsetup_r+0x6a>
 800ec14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec18:	4299      	cmp	r1, r3
 800ec1a:	d002      	beq.n	800ec22 <__swsetup_r+0x66>
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f7fd fe87 	bl	800c930 <_free_r>
 800ec22:	2300      	movs	r3, #0
 800ec24:	6363      	str	r3, [r4, #52]	; 0x34
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec2c:	81a3      	strh	r3, [r4, #12]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	6063      	str	r3, [r4, #4]
 800ec32:	6923      	ldr	r3, [r4, #16]
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	f043 0308 	orr.w	r3, r3, #8
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	b94b      	cbnz	r3, 800ec56 <__swsetup_r+0x9a>
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec4c:	d003      	beq.n	800ec56 <__swsetup_r+0x9a>
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 fa05 	bl	800f060 <__smakebuf_r>
 800ec56:	89a0      	ldrh	r0, [r4, #12]
 800ec58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec5c:	f010 0301 	ands.w	r3, r0, #1
 800ec60:	d00a      	beq.n	800ec78 <__swsetup_r+0xbc>
 800ec62:	2300      	movs	r3, #0
 800ec64:	60a3      	str	r3, [r4, #8]
 800ec66:	6963      	ldr	r3, [r4, #20]
 800ec68:	425b      	negs	r3, r3
 800ec6a:	61a3      	str	r3, [r4, #24]
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	b943      	cbnz	r3, 800ec82 <__swsetup_r+0xc6>
 800ec70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec74:	d1ba      	bne.n	800ebec <__swsetup_r+0x30>
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	0781      	lsls	r1, r0, #30
 800ec7a:	bf58      	it	pl
 800ec7c:	6963      	ldrpl	r3, [r4, #20]
 800ec7e:	60a3      	str	r3, [r4, #8]
 800ec80:	e7f4      	b.n	800ec6c <__swsetup_r+0xb0>
 800ec82:	2000      	movs	r0, #0
 800ec84:	e7f7      	b.n	800ec76 <__swsetup_r+0xba>
 800ec86:	bf00      	nop
 800ec88:	2000001c 	.word	0x2000001c
 800ec8c:	0800fc8c 	.word	0x0800fc8c
 800ec90:	0800fcac 	.word	0x0800fcac
 800ec94:	0800fc6c 	.word	0x0800fc6c

0800ec98 <abort>:
 800ec98:	b508      	push	{r3, lr}
 800ec9a:	2006      	movs	r0, #6
 800ec9c:	f000 fa48 	bl	800f130 <raise>
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7f6 f8a7 	bl	8004df4 <_exit>
	...

0800eca8 <__sflush_r>:
 800eca8:	898a      	ldrh	r2, [r1, #12]
 800ecaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecae:	4605      	mov	r5, r0
 800ecb0:	0710      	lsls	r0, r2, #28
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	d458      	bmi.n	800ed68 <__sflush_r+0xc0>
 800ecb6:	684b      	ldr	r3, [r1, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	dc05      	bgt.n	800ecc8 <__sflush_r+0x20>
 800ecbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	dc02      	bgt.n	800ecc8 <__sflush_r+0x20>
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecca:	2e00      	cmp	r6, #0
 800eccc:	d0f9      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecd4:	682f      	ldr	r7, [r5, #0]
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	d032      	beq.n	800ed40 <__sflush_r+0x98>
 800ecda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	075a      	lsls	r2, r3, #29
 800ece0:	d505      	bpl.n	800ecee <__sflush_r+0x46>
 800ece2:	6863      	ldr	r3, [r4, #4]
 800ece4:	1ac0      	subs	r0, r0, r3
 800ece6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ece8:	b10b      	cbz	r3, 800ecee <__sflush_r+0x46>
 800ecea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecec:	1ac0      	subs	r0, r0, r3
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecf4:	6a21      	ldr	r1, [r4, #32]
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	47b0      	blx	r6
 800ecfa:	1c43      	adds	r3, r0, #1
 800ecfc:	89a3      	ldrh	r3, [r4, #12]
 800ecfe:	d106      	bne.n	800ed0e <__sflush_r+0x66>
 800ed00:	6829      	ldr	r1, [r5, #0]
 800ed02:	291d      	cmp	r1, #29
 800ed04:	d82c      	bhi.n	800ed60 <__sflush_r+0xb8>
 800ed06:	4a2a      	ldr	r2, [pc, #168]	; (800edb0 <__sflush_r+0x108>)
 800ed08:	40ca      	lsrs	r2, r1
 800ed0a:	07d6      	lsls	r6, r2, #31
 800ed0c:	d528      	bpl.n	800ed60 <__sflush_r+0xb8>
 800ed0e:	2200      	movs	r2, #0
 800ed10:	6062      	str	r2, [r4, #4]
 800ed12:	04d9      	lsls	r1, r3, #19
 800ed14:	6922      	ldr	r2, [r4, #16]
 800ed16:	6022      	str	r2, [r4, #0]
 800ed18:	d504      	bpl.n	800ed24 <__sflush_r+0x7c>
 800ed1a:	1c42      	adds	r2, r0, #1
 800ed1c:	d101      	bne.n	800ed22 <__sflush_r+0x7a>
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	b903      	cbnz	r3, 800ed24 <__sflush_r+0x7c>
 800ed22:	6560      	str	r0, [r4, #84]	; 0x54
 800ed24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed26:	602f      	str	r7, [r5, #0]
 800ed28:	2900      	cmp	r1, #0
 800ed2a:	d0ca      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ed2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed30:	4299      	cmp	r1, r3
 800ed32:	d002      	beq.n	800ed3a <__sflush_r+0x92>
 800ed34:	4628      	mov	r0, r5
 800ed36:	f7fd fdfb 	bl	800c930 <_free_r>
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ed3e:	e7c1      	b.n	800ecc4 <__sflush_r+0x1c>
 800ed40:	6a21      	ldr	r1, [r4, #32]
 800ed42:	2301      	movs	r3, #1
 800ed44:	4628      	mov	r0, r5
 800ed46:	47b0      	blx	r6
 800ed48:	1c41      	adds	r1, r0, #1
 800ed4a:	d1c7      	bne.n	800ecdc <__sflush_r+0x34>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d0c4      	beq.n	800ecdc <__sflush_r+0x34>
 800ed52:	2b1d      	cmp	r3, #29
 800ed54:	d001      	beq.n	800ed5a <__sflush_r+0xb2>
 800ed56:	2b16      	cmp	r3, #22
 800ed58:	d101      	bne.n	800ed5e <__sflush_r+0xb6>
 800ed5a:	602f      	str	r7, [r5, #0]
 800ed5c:	e7b1      	b.n	800ecc2 <__sflush_r+0x1a>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed64:	81a3      	strh	r3, [r4, #12]
 800ed66:	e7ad      	b.n	800ecc4 <__sflush_r+0x1c>
 800ed68:	690f      	ldr	r7, [r1, #16]
 800ed6a:	2f00      	cmp	r7, #0
 800ed6c:	d0a9      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ed6e:	0793      	lsls	r3, r2, #30
 800ed70:	680e      	ldr	r6, [r1, #0]
 800ed72:	bf08      	it	eq
 800ed74:	694b      	ldreq	r3, [r1, #20]
 800ed76:	600f      	str	r7, [r1, #0]
 800ed78:	bf18      	it	ne
 800ed7a:	2300      	movne	r3, #0
 800ed7c:	eba6 0807 	sub.w	r8, r6, r7
 800ed80:	608b      	str	r3, [r1, #8]
 800ed82:	f1b8 0f00 	cmp.w	r8, #0
 800ed86:	dd9c      	ble.n	800ecc2 <__sflush_r+0x1a>
 800ed88:	6a21      	ldr	r1, [r4, #32]
 800ed8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed8c:	4643      	mov	r3, r8
 800ed8e:	463a      	mov	r2, r7
 800ed90:	4628      	mov	r0, r5
 800ed92:	47b0      	blx	r6
 800ed94:	2800      	cmp	r0, #0
 800ed96:	dc06      	bgt.n	800eda6 <__sflush_r+0xfe>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed9e:	81a3      	strh	r3, [r4, #12]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	e78e      	b.n	800ecc4 <__sflush_r+0x1c>
 800eda6:	4407      	add	r7, r0
 800eda8:	eba8 0800 	sub.w	r8, r8, r0
 800edac:	e7e9      	b.n	800ed82 <__sflush_r+0xda>
 800edae:	bf00      	nop
 800edb0:	20400001 	.word	0x20400001

0800edb4 <_fflush_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	690b      	ldr	r3, [r1, #16]
 800edb8:	4605      	mov	r5, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	b913      	cbnz	r3, 800edc4 <_fflush_r+0x10>
 800edbe:	2500      	movs	r5, #0
 800edc0:	4628      	mov	r0, r5
 800edc2:	bd38      	pop	{r3, r4, r5, pc}
 800edc4:	b118      	cbz	r0, 800edce <_fflush_r+0x1a>
 800edc6:	6983      	ldr	r3, [r0, #24]
 800edc8:	b90b      	cbnz	r3, 800edce <_fflush_r+0x1a>
 800edca:	f000 f887 	bl	800eedc <__sinit>
 800edce:	4b14      	ldr	r3, [pc, #80]	; (800ee20 <_fflush_r+0x6c>)
 800edd0:	429c      	cmp	r4, r3
 800edd2:	d11b      	bne.n	800ee0c <_fflush_r+0x58>
 800edd4:	686c      	ldr	r4, [r5, #4]
 800edd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0ef      	beq.n	800edbe <_fflush_r+0xa>
 800edde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ede0:	07d0      	lsls	r0, r2, #31
 800ede2:	d404      	bmi.n	800edee <_fflush_r+0x3a>
 800ede4:	0599      	lsls	r1, r3, #22
 800ede6:	d402      	bmi.n	800edee <_fflush_r+0x3a>
 800ede8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edea:	f7ff fd1a 	bl	800e822 <__retarget_lock_acquire_recursive>
 800edee:	4628      	mov	r0, r5
 800edf0:	4621      	mov	r1, r4
 800edf2:	f7ff ff59 	bl	800eca8 <__sflush_r>
 800edf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edf8:	07da      	lsls	r2, r3, #31
 800edfa:	4605      	mov	r5, r0
 800edfc:	d4e0      	bmi.n	800edc0 <_fflush_r+0xc>
 800edfe:	89a3      	ldrh	r3, [r4, #12]
 800ee00:	059b      	lsls	r3, r3, #22
 800ee02:	d4dd      	bmi.n	800edc0 <_fflush_r+0xc>
 800ee04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee06:	f7ff fd0d 	bl	800e824 <__retarget_lock_release_recursive>
 800ee0a:	e7d9      	b.n	800edc0 <_fflush_r+0xc>
 800ee0c:	4b05      	ldr	r3, [pc, #20]	; (800ee24 <_fflush_r+0x70>)
 800ee0e:	429c      	cmp	r4, r3
 800ee10:	d101      	bne.n	800ee16 <_fflush_r+0x62>
 800ee12:	68ac      	ldr	r4, [r5, #8]
 800ee14:	e7df      	b.n	800edd6 <_fflush_r+0x22>
 800ee16:	4b04      	ldr	r3, [pc, #16]	; (800ee28 <_fflush_r+0x74>)
 800ee18:	429c      	cmp	r4, r3
 800ee1a:	bf08      	it	eq
 800ee1c:	68ec      	ldreq	r4, [r5, #12]
 800ee1e:	e7da      	b.n	800edd6 <_fflush_r+0x22>
 800ee20:	0800fc8c 	.word	0x0800fc8c
 800ee24:	0800fcac 	.word	0x0800fcac
 800ee28:	0800fc6c 	.word	0x0800fc6c

0800ee2c <std>:
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	4604      	mov	r4, r0
 800ee32:	e9c0 3300 	strd	r3, r3, [r0]
 800ee36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee3a:	6083      	str	r3, [r0, #8]
 800ee3c:	8181      	strh	r1, [r0, #12]
 800ee3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ee40:	81c2      	strh	r2, [r0, #14]
 800ee42:	6183      	str	r3, [r0, #24]
 800ee44:	4619      	mov	r1, r3
 800ee46:	2208      	movs	r2, #8
 800ee48:	305c      	adds	r0, #92	; 0x5c
 800ee4a:	f7fd fd69 	bl	800c920 <memset>
 800ee4e:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <std+0x38>)
 800ee50:	6263      	str	r3, [r4, #36]	; 0x24
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <std+0x3c>)
 800ee54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <std+0x40>)
 800ee58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee5a:	4b05      	ldr	r3, [pc, #20]	; (800ee70 <std+0x44>)
 800ee5c:	6224      	str	r4, [r4, #32]
 800ee5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	bf00      	nop
 800ee64:	0800f169 	.word	0x0800f169
 800ee68:	0800f18b 	.word	0x0800f18b
 800ee6c:	0800f1c3 	.word	0x0800f1c3
 800ee70:	0800f1e7 	.word	0x0800f1e7

0800ee74 <_cleanup_r>:
 800ee74:	4901      	ldr	r1, [pc, #4]	; (800ee7c <_cleanup_r+0x8>)
 800ee76:	f000 b8af 	b.w	800efd8 <_fwalk_reent>
 800ee7a:	bf00      	nop
 800ee7c:	0800edb5 	.word	0x0800edb5

0800ee80 <__sfmoreglue>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	1e4a      	subs	r2, r1, #1
 800ee84:	2568      	movs	r5, #104	; 0x68
 800ee86:	4355      	muls	r5, r2
 800ee88:	460e      	mov	r6, r1
 800ee8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee8e:	f7fd fd9f 	bl	800c9d0 <_malloc_r>
 800ee92:	4604      	mov	r4, r0
 800ee94:	b140      	cbz	r0, 800eea8 <__sfmoreglue+0x28>
 800ee96:	2100      	movs	r1, #0
 800ee98:	e9c0 1600 	strd	r1, r6, [r0]
 800ee9c:	300c      	adds	r0, #12
 800ee9e:	60a0      	str	r0, [r4, #8]
 800eea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eea4:	f7fd fd3c 	bl	800c920 <memset>
 800eea8:	4620      	mov	r0, r4
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}

0800eeac <__sfp_lock_acquire>:
 800eeac:	4801      	ldr	r0, [pc, #4]	; (800eeb4 <__sfp_lock_acquire+0x8>)
 800eeae:	f7ff bcb8 	b.w	800e822 <__retarget_lock_acquire_recursive>
 800eeb2:	bf00      	nop
 800eeb4:	20000a04 	.word	0x20000a04

0800eeb8 <__sfp_lock_release>:
 800eeb8:	4801      	ldr	r0, [pc, #4]	; (800eec0 <__sfp_lock_release+0x8>)
 800eeba:	f7ff bcb3 	b.w	800e824 <__retarget_lock_release_recursive>
 800eebe:	bf00      	nop
 800eec0:	20000a04 	.word	0x20000a04

0800eec4 <__sinit_lock_acquire>:
 800eec4:	4801      	ldr	r0, [pc, #4]	; (800eecc <__sinit_lock_acquire+0x8>)
 800eec6:	f7ff bcac 	b.w	800e822 <__retarget_lock_acquire_recursive>
 800eeca:	bf00      	nop
 800eecc:	200009ff 	.word	0x200009ff

0800eed0 <__sinit_lock_release>:
 800eed0:	4801      	ldr	r0, [pc, #4]	; (800eed8 <__sinit_lock_release+0x8>)
 800eed2:	f7ff bca7 	b.w	800e824 <__retarget_lock_release_recursive>
 800eed6:	bf00      	nop
 800eed8:	200009ff 	.word	0x200009ff

0800eedc <__sinit>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4604      	mov	r4, r0
 800eee0:	f7ff fff0 	bl	800eec4 <__sinit_lock_acquire>
 800eee4:	69a3      	ldr	r3, [r4, #24]
 800eee6:	b11b      	cbz	r3, 800eef0 <__sinit+0x14>
 800eee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeec:	f7ff bff0 	b.w	800eed0 <__sinit_lock_release>
 800eef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eef4:	6523      	str	r3, [r4, #80]	; 0x50
 800eef6:	4b13      	ldr	r3, [pc, #76]	; (800ef44 <__sinit+0x68>)
 800eef8:	4a13      	ldr	r2, [pc, #76]	; (800ef48 <__sinit+0x6c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800eefe:	42a3      	cmp	r3, r4
 800ef00:	bf04      	itt	eq
 800ef02:	2301      	moveq	r3, #1
 800ef04:	61a3      	streq	r3, [r4, #24]
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 f820 	bl	800ef4c <__sfp>
 800ef0c:	6060      	str	r0, [r4, #4]
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 f81c 	bl	800ef4c <__sfp>
 800ef14:	60a0      	str	r0, [r4, #8]
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 f818 	bl	800ef4c <__sfp>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	60e0      	str	r0, [r4, #12]
 800ef20:	2104      	movs	r1, #4
 800ef22:	6860      	ldr	r0, [r4, #4]
 800ef24:	f7ff ff82 	bl	800ee2c <std>
 800ef28:	68a0      	ldr	r0, [r4, #8]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	2109      	movs	r1, #9
 800ef2e:	f7ff ff7d 	bl	800ee2c <std>
 800ef32:	68e0      	ldr	r0, [r4, #12]
 800ef34:	2202      	movs	r2, #2
 800ef36:	2112      	movs	r1, #18
 800ef38:	f7ff ff78 	bl	800ee2c <std>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	61a3      	str	r3, [r4, #24]
 800ef40:	e7d2      	b.n	800eee8 <__sinit+0xc>
 800ef42:	bf00      	nop
 800ef44:	0800f8e8 	.word	0x0800f8e8
 800ef48:	0800ee75 	.word	0x0800ee75

0800ef4c <__sfp>:
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	4607      	mov	r7, r0
 800ef50:	f7ff ffac 	bl	800eeac <__sfp_lock_acquire>
 800ef54:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <__sfp+0x84>)
 800ef56:	681e      	ldr	r6, [r3, #0]
 800ef58:	69b3      	ldr	r3, [r6, #24]
 800ef5a:	b913      	cbnz	r3, 800ef62 <__sfp+0x16>
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f7ff ffbd 	bl	800eedc <__sinit>
 800ef62:	3648      	adds	r6, #72	; 0x48
 800ef64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	d503      	bpl.n	800ef74 <__sfp+0x28>
 800ef6c:	6833      	ldr	r3, [r6, #0]
 800ef6e:	b30b      	cbz	r3, 800efb4 <__sfp+0x68>
 800ef70:	6836      	ldr	r6, [r6, #0]
 800ef72:	e7f7      	b.n	800ef64 <__sfp+0x18>
 800ef74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef78:	b9d5      	cbnz	r5, 800efb0 <__sfp+0x64>
 800ef7a:	4b16      	ldr	r3, [pc, #88]	; (800efd4 <__sfp+0x88>)
 800ef7c:	60e3      	str	r3, [r4, #12]
 800ef7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef82:	6665      	str	r5, [r4, #100]	; 0x64
 800ef84:	f7ff fc4c 	bl	800e820 <__retarget_lock_init_recursive>
 800ef88:	f7ff ff96 	bl	800eeb8 <__sfp_lock_release>
 800ef8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef94:	6025      	str	r5, [r4, #0]
 800ef96:	61a5      	str	r5, [r4, #24]
 800ef98:	2208      	movs	r2, #8
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efa0:	f7fd fcbe 	bl	800c920 <memset>
 800efa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efac:	4620      	mov	r0, r4
 800efae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb0:	3468      	adds	r4, #104	; 0x68
 800efb2:	e7d9      	b.n	800ef68 <__sfp+0x1c>
 800efb4:	2104      	movs	r1, #4
 800efb6:	4638      	mov	r0, r7
 800efb8:	f7ff ff62 	bl	800ee80 <__sfmoreglue>
 800efbc:	4604      	mov	r4, r0
 800efbe:	6030      	str	r0, [r6, #0]
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d1d5      	bne.n	800ef70 <__sfp+0x24>
 800efc4:	f7ff ff78 	bl	800eeb8 <__sfp_lock_release>
 800efc8:	230c      	movs	r3, #12
 800efca:	603b      	str	r3, [r7, #0]
 800efcc:	e7ee      	b.n	800efac <__sfp+0x60>
 800efce:	bf00      	nop
 800efd0:	0800f8e8 	.word	0x0800f8e8
 800efd4:	ffff0001 	.word	0xffff0001

0800efd8 <_fwalk_reent>:
 800efd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efdc:	4606      	mov	r6, r0
 800efde:	4688      	mov	r8, r1
 800efe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efe4:	2700      	movs	r7, #0
 800efe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efea:	f1b9 0901 	subs.w	r9, r9, #1
 800efee:	d505      	bpl.n	800effc <_fwalk_reent+0x24>
 800eff0:	6824      	ldr	r4, [r4, #0]
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	d1f7      	bne.n	800efe6 <_fwalk_reent+0xe>
 800eff6:	4638      	mov	r0, r7
 800eff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d907      	bls.n	800f012 <_fwalk_reent+0x3a>
 800f002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f006:	3301      	adds	r3, #1
 800f008:	d003      	beq.n	800f012 <_fwalk_reent+0x3a>
 800f00a:	4629      	mov	r1, r5
 800f00c:	4630      	mov	r0, r6
 800f00e:	47c0      	blx	r8
 800f010:	4307      	orrs	r7, r0
 800f012:	3568      	adds	r5, #104	; 0x68
 800f014:	e7e9      	b.n	800efea <_fwalk_reent+0x12>

0800f016 <__swhatbuf_r>:
 800f016:	b570      	push	{r4, r5, r6, lr}
 800f018:	460e      	mov	r6, r1
 800f01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f01e:	2900      	cmp	r1, #0
 800f020:	b096      	sub	sp, #88	; 0x58
 800f022:	4614      	mov	r4, r2
 800f024:	461d      	mov	r5, r3
 800f026:	da07      	bge.n	800f038 <__swhatbuf_r+0x22>
 800f028:	2300      	movs	r3, #0
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	89b3      	ldrh	r3, [r6, #12]
 800f02e:	061a      	lsls	r2, r3, #24
 800f030:	d410      	bmi.n	800f054 <__swhatbuf_r+0x3e>
 800f032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f036:	e00e      	b.n	800f056 <__swhatbuf_r+0x40>
 800f038:	466a      	mov	r2, sp
 800f03a:	f000 f8fb 	bl	800f234 <_fstat_r>
 800f03e:	2800      	cmp	r0, #0
 800f040:	dbf2      	blt.n	800f028 <__swhatbuf_r+0x12>
 800f042:	9a01      	ldr	r2, [sp, #4]
 800f044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f04c:	425a      	negs	r2, r3
 800f04e:	415a      	adcs	r2, r3
 800f050:	602a      	str	r2, [r5, #0]
 800f052:	e7ee      	b.n	800f032 <__swhatbuf_r+0x1c>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	2000      	movs	r0, #0
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	b016      	add	sp, #88	; 0x58
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f060 <__smakebuf_r>:
 800f060:	898b      	ldrh	r3, [r1, #12]
 800f062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f064:	079d      	lsls	r5, r3, #30
 800f066:	4606      	mov	r6, r0
 800f068:	460c      	mov	r4, r1
 800f06a:	d507      	bpl.n	800f07c <__smakebuf_r+0x1c>
 800f06c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	6123      	str	r3, [r4, #16]
 800f074:	2301      	movs	r3, #1
 800f076:	6163      	str	r3, [r4, #20]
 800f078:	b002      	add	sp, #8
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	ab01      	add	r3, sp, #4
 800f07e:	466a      	mov	r2, sp
 800f080:	f7ff ffc9 	bl	800f016 <__swhatbuf_r>
 800f084:	9900      	ldr	r1, [sp, #0]
 800f086:	4605      	mov	r5, r0
 800f088:	4630      	mov	r0, r6
 800f08a:	f7fd fca1 	bl	800c9d0 <_malloc_r>
 800f08e:	b948      	cbnz	r0, 800f0a4 <__smakebuf_r+0x44>
 800f090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f094:	059a      	lsls	r2, r3, #22
 800f096:	d4ef      	bmi.n	800f078 <__smakebuf_r+0x18>
 800f098:	f023 0303 	bic.w	r3, r3, #3
 800f09c:	f043 0302 	orr.w	r3, r3, #2
 800f0a0:	81a3      	strh	r3, [r4, #12]
 800f0a2:	e7e3      	b.n	800f06c <__smakebuf_r+0xc>
 800f0a4:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <__smakebuf_r+0x7c>)
 800f0a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	6020      	str	r0, [r4, #0]
 800f0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b0:	81a3      	strh	r3, [r4, #12]
 800f0b2:	9b00      	ldr	r3, [sp, #0]
 800f0b4:	6163      	str	r3, [r4, #20]
 800f0b6:	9b01      	ldr	r3, [sp, #4]
 800f0b8:	6120      	str	r0, [r4, #16]
 800f0ba:	b15b      	cbz	r3, 800f0d4 <__smakebuf_r+0x74>
 800f0bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f8c9 	bl	800f258 <_isatty_r>
 800f0c6:	b128      	cbz	r0, 800f0d4 <__smakebuf_r+0x74>
 800f0c8:	89a3      	ldrh	r3, [r4, #12]
 800f0ca:	f023 0303 	bic.w	r3, r3, #3
 800f0ce:	f043 0301 	orr.w	r3, r3, #1
 800f0d2:	81a3      	strh	r3, [r4, #12]
 800f0d4:	89a0      	ldrh	r0, [r4, #12]
 800f0d6:	4305      	orrs	r5, r0
 800f0d8:	81a5      	strh	r5, [r4, #12]
 800f0da:	e7cd      	b.n	800f078 <__smakebuf_r+0x18>
 800f0dc:	0800ee75 	.word	0x0800ee75

0800f0e0 <_raise_r>:
 800f0e0:	291f      	cmp	r1, #31
 800f0e2:	b538      	push	{r3, r4, r5, lr}
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	460d      	mov	r5, r1
 800f0e8:	d904      	bls.n	800f0f4 <_raise_r+0x14>
 800f0ea:	2316      	movs	r3, #22
 800f0ec:	6003      	str	r3, [r0, #0]
 800f0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f0f6:	b112      	cbz	r2, 800f0fe <_raise_r+0x1e>
 800f0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f0fc:	b94b      	cbnz	r3, 800f112 <_raise_r+0x32>
 800f0fe:	4620      	mov	r0, r4
 800f100:	f000 f830 	bl	800f164 <_getpid_r>
 800f104:	462a      	mov	r2, r5
 800f106:	4601      	mov	r1, r0
 800f108:	4620      	mov	r0, r4
 800f10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f10e:	f000 b817 	b.w	800f140 <_kill_r>
 800f112:	2b01      	cmp	r3, #1
 800f114:	d00a      	beq.n	800f12c <_raise_r+0x4c>
 800f116:	1c59      	adds	r1, r3, #1
 800f118:	d103      	bne.n	800f122 <_raise_r+0x42>
 800f11a:	2316      	movs	r3, #22
 800f11c:	6003      	str	r3, [r0, #0]
 800f11e:	2001      	movs	r0, #1
 800f120:	e7e7      	b.n	800f0f2 <_raise_r+0x12>
 800f122:	2400      	movs	r4, #0
 800f124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f128:	4628      	mov	r0, r5
 800f12a:	4798      	blx	r3
 800f12c:	2000      	movs	r0, #0
 800f12e:	e7e0      	b.n	800f0f2 <_raise_r+0x12>

0800f130 <raise>:
 800f130:	4b02      	ldr	r3, [pc, #8]	; (800f13c <raise+0xc>)
 800f132:	4601      	mov	r1, r0
 800f134:	6818      	ldr	r0, [r3, #0]
 800f136:	f7ff bfd3 	b.w	800f0e0 <_raise_r>
 800f13a:	bf00      	nop
 800f13c:	2000001c 	.word	0x2000001c

0800f140 <_kill_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4d07      	ldr	r5, [pc, #28]	; (800f160 <_kill_r+0x20>)
 800f144:	2300      	movs	r3, #0
 800f146:	4604      	mov	r4, r0
 800f148:	4608      	mov	r0, r1
 800f14a:	4611      	mov	r1, r2
 800f14c:	602b      	str	r3, [r5, #0]
 800f14e:	f7f5 fe41 	bl	8004dd4 <_kill>
 800f152:	1c43      	adds	r3, r0, #1
 800f154:	d102      	bne.n	800f15c <_kill_r+0x1c>
 800f156:	682b      	ldr	r3, [r5, #0]
 800f158:	b103      	cbz	r3, 800f15c <_kill_r+0x1c>
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	bd38      	pop	{r3, r4, r5, pc}
 800f15e:	bf00      	nop
 800f160:	200009f8 	.word	0x200009f8

0800f164 <_getpid_r>:
 800f164:	f7f5 be2e 	b.w	8004dc4 <_getpid>

0800f168 <__sread>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	460c      	mov	r4, r1
 800f16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f170:	f000 f894 	bl	800f29c <_read_r>
 800f174:	2800      	cmp	r0, #0
 800f176:	bfab      	itete	ge
 800f178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f17a:	89a3      	ldrhlt	r3, [r4, #12]
 800f17c:	181b      	addge	r3, r3, r0
 800f17e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f182:	bfac      	ite	ge
 800f184:	6563      	strge	r3, [r4, #84]	; 0x54
 800f186:	81a3      	strhlt	r3, [r4, #12]
 800f188:	bd10      	pop	{r4, pc}

0800f18a <__swrite>:
 800f18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f18e:	461f      	mov	r7, r3
 800f190:	898b      	ldrh	r3, [r1, #12]
 800f192:	05db      	lsls	r3, r3, #23
 800f194:	4605      	mov	r5, r0
 800f196:	460c      	mov	r4, r1
 800f198:	4616      	mov	r6, r2
 800f19a:	d505      	bpl.n	800f1a8 <__swrite+0x1e>
 800f19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f000 f868 	bl	800f278 <_lseek_r>
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1b2:	81a3      	strh	r3, [r4, #12]
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1be:	f000 b817 	b.w	800f1f0 <_write_r>

0800f1c2 <__sseek>:
 800f1c2:	b510      	push	{r4, lr}
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ca:	f000 f855 	bl	800f278 <_lseek_r>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	89a3      	ldrh	r3, [r4, #12]
 800f1d2:	bf15      	itete	ne
 800f1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1de:	81a3      	strheq	r3, [r4, #12]
 800f1e0:	bf18      	it	ne
 800f1e2:	81a3      	strhne	r3, [r4, #12]
 800f1e4:	bd10      	pop	{r4, pc}

0800f1e6 <__sclose>:
 800f1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ea:	f000 b813 	b.w	800f214 <_close_r>
	...

0800f1f0 <_write_r>:
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	4d07      	ldr	r5, [pc, #28]	; (800f210 <_write_r+0x20>)
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	4608      	mov	r0, r1
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	602a      	str	r2, [r5, #0]
 800f1fe:	461a      	mov	r2, r3
 800f200:	f7f5 fe1f 	bl	8004e42 <_write>
 800f204:	1c43      	adds	r3, r0, #1
 800f206:	d102      	bne.n	800f20e <_write_r+0x1e>
 800f208:	682b      	ldr	r3, [r5, #0]
 800f20a:	b103      	cbz	r3, 800f20e <_write_r+0x1e>
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	bd38      	pop	{r3, r4, r5, pc}
 800f210:	200009f8 	.word	0x200009f8

0800f214 <_close_r>:
 800f214:	b538      	push	{r3, r4, r5, lr}
 800f216:	4d06      	ldr	r5, [pc, #24]	; (800f230 <_close_r+0x1c>)
 800f218:	2300      	movs	r3, #0
 800f21a:	4604      	mov	r4, r0
 800f21c:	4608      	mov	r0, r1
 800f21e:	602b      	str	r3, [r5, #0]
 800f220:	f7f5 fe2b 	bl	8004e7a <_close>
 800f224:	1c43      	adds	r3, r0, #1
 800f226:	d102      	bne.n	800f22e <_close_r+0x1a>
 800f228:	682b      	ldr	r3, [r5, #0]
 800f22a:	b103      	cbz	r3, 800f22e <_close_r+0x1a>
 800f22c:	6023      	str	r3, [r4, #0]
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
 800f230:	200009f8 	.word	0x200009f8

0800f234 <_fstat_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d07      	ldr	r5, [pc, #28]	; (800f254 <_fstat_r+0x20>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	4611      	mov	r1, r2
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f7f5 fe26 	bl	8004e92 <_fstat>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	d102      	bne.n	800f250 <_fstat_r+0x1c>
 800f24a:	682b      	ldr	r3, [r5, #0]
 800f24c:	b103      	cbz	r3, 800f250 <_fstat_r+0x1c>
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	bf00      	nop
 800f254:	200009f8 	.word	0x200009f8

0800f258 <_isatty_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d06      	ldr	r5, [pc, #24]	; (800f274 <_isatty_r+0x1c>)
 800f25c:	2300      	movs	r3, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	4608      	mov	r0, r1
 800f262:	602b      	str	r3, [r5, #0]
 800f264:	f7f5 fe25 	bl	8004eb2 <_isatty>
 800f268:	1c43      	adds	r3, r0, #1
 800f26a:	d102      	bne.n	800f272 <_isatty_r+0x1a>
 800f26c:	682b      	ldr	r3, [r5, #0]
 800f26e:	b103      	cbz	r3, 800f272 <_isatty_r+0x1a>
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	200009f8 	.word	0x200009f8

0800f278 <_lseek_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d07      	ldr	r5, [pc, #28]	; (800f298 <_lseek_r+0x20>)
 800f27c:	4604      	mov	r4, r0
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	2200      	movs	r2, #0
 800f284:	602a      	str	r2, [r5, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f7f5 fe1e 	bl	8004ec8 <_lseek>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_lseek_r+0x1e>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	b103      	cbz	r3, 800f296 <_lseek_r+0x1e>
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	200009f8 	.word	0x200009f8

0800f29c <_read_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d07      	ldr	r5, [pc, #28]	; (800f2bc <_read_r+0x20>)
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	4608      	mov	r0, r1
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	602a      	str	r2, [r5, #0]
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	f7f5 fdac 	bl	8004e08 <_read>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_read_r+0x1e>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_read_r+0x1e>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	200009f8 	.word	0x200009f8

0800f2c0 <_init>:
 800f2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c2:	bf00      	nop
 800f2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2c6:	bc08      	pop	{r3}
 800f2c8:	469e      	mov	lr, r3
 800f2ca:	4770      	bx	lr

0800f2cc <_fini>:
 800f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ce:	bf00      	nop
 800f2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2d2:	bc08      	pop	{r3}
 800f2d4:	469e      	mov	lr, r3
 800f2d6:	4770      	bx	lr
